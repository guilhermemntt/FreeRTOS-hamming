
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000e4a  00000ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800112  00800112  00000ef0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b52  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d90  00000000  00000000  00003d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018bd  00000000  00000000  00004aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00006378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001181  00000000  00000000  00006a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025d6  00000000  00000000  00007bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000a193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cb 05 	call	0xb96	; 0xb96 <main>
  9e:	0c 94 23 07 	jmp	0xe46	; 0xe46 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
}

#elif( configCHECKSUM_METHOD==1 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	ac 01       	movw	r20, r24
  a8:	fb 01       	movw	r30, r22
	volatile StackType_t* i;
	uint16_t xChecksum = 0;
	for(i = pxEndOfStack ;i > pxStartOfStack ;i--)
  aa:	86 17       	cp	r24, r22
  ac:	97 07       	cpc	r25, r23
  ae:	48 f4       	brcc	.+18     	; 0xc2 <uxChecksumGetTaskChecksum+0x1c>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
	{
		xChecksum^=*i;
  b4:	20 81       	ld	r18, Z
  b6:	82 27       	eor	r24, r18

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
	volatile StackType_t* i;
	uint16_t xChecksum = 0;
	for(i = pxEndOfStack ;i > pxStartOfStack ;i--)
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	4e 17       	cp	r20, r30
  bc:	5f 07       	cpc	r21, r31
  be:	d1 f7       	brne	.-12     	; 0xb4 <uxChecksumGetTaskChecksum+0xe>
  c0:	08 95       	ret
#elif( configCHECKSUM_METHOD==1 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
	volatile StackType_t* i;
	uint16_t xChecksum = 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	for(i = pxEndOfStack ;i > pxStartOfStack ;i--)
	{
		xChecksum^=*i;
	}
	return (uint16_t)xChecksum;
}
  c6:	08 95       	ret

000000c8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
  ce:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <malloc>
  d8:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  da:	0e 94 ac 04 	call	0x958	; 0x958 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
  de:	ce 01       	movw	r24, r28
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	if( pv )
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	41 f0       	breq	.+16     	; 0xfe <vPortFree+0x18>
  ee:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
  f0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <vTaskSuspendAll>
		{
			free( pv );
  f4:	ce 01       	movw	r24, r28
  f6:	0e 94 93 06 	call	0xd26	; 0xd26 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  fa:	0e 94 ac 04 	call	0x958	; 0x958 <xTaskResumeAll>
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 104:	fc 01       	movw	r30, r24
 106:	03 96       	adiw	r24, 0x03	; 3
 108:	92 83       	std	Z+2, r25	; 0x02
 10a:	81 83       	std	Z+1, r24	; 0x01
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	3f ef       	ldi	r19, 0xFF	; 255
 110:	34 83       	std	Z+4, r19	; 0x04
 112:	23 83       	std	Z+3, r18	; 0x03
 114:	96 83       	std	Z+6, r25	; 0x06
 116:	85 83       	std	Z+5, r24	; 0x05
 118:	90 87       	std	Z+8, r25	; 0x08
 11a:	87 83       	std	Z+7, r24	; 0x07
 11c:	10 82       	st	Z, r1
 11e:	08 95       	ret

00000120 <vListInitialiseItem>:
 120:	fc 01       	movw	r30, r24
 122:	11 86       	std	Z+9, r1	; 0x09
 124:	10 86       	std	Z+8, r1	; 0x08
 126:	08 95       	ret

00000128 <vListInsertEnd>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	9c 01       	movw	r18, r24
 12e:	fb 01       	movw	r30, r22
 130:	dc 01       	movw	r26, r24
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	cd 91       	ld	r28, X+
 136:	dc 91       	ld	r29, X
 138:	12 97       	sbiw	r26, 0x02	; 2
 13a:	d3 83       	std	Z+3, r29	; 0x03
 13c:	c2 83       	std	Z+2, r28	; 0x02
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	9d 81       	ldd	r25, Y+5	; 0x05
 142:	95 83       	std	Z+5, r25	; 0x05
 144:	84 83       	std	Z+4, r24	; 0x04
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	9d 81       	ldd	r25, Y+5	; 0x05
 14a:	dc 01       	movw	r26, r24
 14c:	13 96       	adiw	r26, 0x03	; 3
 14e:	7c 93       	st	X, r23
 150:	6e 93       	st	-X, r22
 152:	12 97       	sbiw	r26, 0x02	; 2
 154:	7d 83       	std	Y+5, r23	; 0x05
 156:	6c 83       	std	Y+4, r22	; 0x04
 158:	31 87       	std	Z+9, r19	; 0x09
 15a:	20 87       	std	Z+8, r18	; 0x08
 15c:	f9 01       	movw	r30, r18
 15e:	80 81       	ld	r24, Z
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 83       	st	Z, r24
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 170:	a0 85       	ldd	r26, Z+8	; 0x08
 172:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 174:	c2 81       	ldd	r28, Z+2	; 0x02
 176:	d3 81       	ldd	r29, Z+3	; 0x03
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	95 81       	ldd	r25, Z+5	; 0x05
 17c:	9d 83       	std	Y+5, r25	; 0x05
 17e:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 180:	c4 81       	ldd	r28, Z+4	; 0x04
 182:	d5 81       	ldd	r29, Z+5	; 0x05
 184:	82 81       	ldd	r24, Z+2	; 0x02
 186:	93 81       	ldd	r25, Z+3	; 0x03
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	12 97       	sbiw	r26, 0x02	; 2
 194:	e8 17       	cp	r30, r24
 196:	f9 07       	cpc	r31, r25
 198:	31 f4       	brne	.+12     	; 0x1a6 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 19a:	84 81       	ldd	r24, Z+4	; 0x04
 19c:	95 81       	ldd	r25, Z+5	; 0x05
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	9c 93       	st	X, r25
 1a2:	8e 93       	st	-X, r24
 1a4:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 1a6:	11 86       	std	Z+9, r1	; 0x09
 1a8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 1aa:	8c 91       	ld	r24, X
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 1b0:	8c 91       	ld	r24, X
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1b8:	31 e1       	ldi	r19, 0x11	; 17
 1ba:	fc 01       	movw	r30, r24
 1bc:	30 83       	st	Z, r19
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	22 e2       	ldi	r18, 0x22	; 34
 1c2:	20 83       	st	Z, r18
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	a3 e3       	ldi	r26, 0x33	; 51
 1c8:	a0 83       	st	Z, r26
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	60 83       	st	Z, r22
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	70 83       	st	Z, r23
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	10 82       	st	Z, r1
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	60 83       	st	Z, r22
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	10 82       	st	Z, r1
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	60 83       	st	Z, r22
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	60 83       	st	Z, r22
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	60 83       	st	Z, r22
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	60 83       	st	Z, r22
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	66 e0       	ldi	r22, 0x06	; 6
 1fc:	60 83       	st	Z, r22
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	60 83       	st	Z, r22
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	68 e0       	ldi	r22, 0x08	; 8
 208:	60 83       	st	Z, r22
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	69 e0       	ldi	r22, 0x09	; 9
 20e:	60 83       	st	Z, r22
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	60 e1       	ldi	r22, 0x10	; 16
 214:	60 83       	st	Z, r22
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	30 83       	st	Z, r19
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	32 e1       	ldi	r19, 0x12	; 18
 21e:	30 83       	st	Z, r19
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	33 e1       	ldi	r19, 0x13	; 19
 224:	30 83       	st	Z, r19
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	34 e1       	ldi	r19, 0x14	; 20
 22a:	30 83       	st	Z, r19
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	35 e1       	ldi	r19, 0x15	; 21
 230:	30 83       	st	Z, r19
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	36 e1       	ldi	r19, 0x16	; 22
 236:	30 83       	st	Z, r19
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	37 e1       	ldi	r19, 0x17	; 23
 23c:	30 83       	st	Z, r19
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	38 e1       	ldi	r19, 0x18	; 24
 242:	30 83       	st	Z, r19
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	39 e1       	ldi	r19, 0x19	; 25
 248:	30 83       	st	Z, r19
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	30 e2       	ldi	r19, 0x20	; 32
 24e:	30 83       	st	Z, r19
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	31 e2       	ldi	r19, 0x21	; 33
 254:	30 83       	st	Z, r19
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	20 83       	st	Z, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	23 e2       	ldi	r18, 0x23	; 35
 25e:	20 83       	st	Z, r18
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	40 83       	st	Z, r20
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	50 83       	st	Z, r21
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	26 e2       	ldi	r18, 0x26	; 38
 26c:	20 83       	st	Z, r18
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	27 e2       	ldi	r18, 0x27	; 39
 272:	20 83       	st	Z, r18
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	28 e2       	ldi	r18, 0x28	; 40
 278:	20 83       	st	Z, r18
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	29 e2       	ldi	r18, 0x29	; 41
 27e:	20 83       	st	Z, r18
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	20 e3       	ldi	r18, 0x30	; 48
 284:	20 83       	st	Z, r18
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	21 e3       	ldi	r18, 0x31	; 49
 28a:	20 83       	st	Z, r18
 28c:	86 97       	sbiw	r24, 0x26	; 38
 28e:	08 95       	ret

00000290 <xPortStartScheduler>:
 290:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 29a:	8b e0       	ldi	r24, 0x0B	; 11
 29c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2a0:	ef e6       	ldi	r30, 0x6F	; 111
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
 2aa:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 2ae:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 2b2:	cd 91       	ld	r28, X+
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	dd 91       	ld	r29, X+
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	5f 90       	pop	r5
 2f0:	4f 90       	pop	r4
 2f2:	3f 90       	pop	r3
 2f4:	2f 90       	pop	r2
 2f6:	1f 90       	pop	r1
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	08 95       	ret
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret

00000304 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	0f 92       	push	r0
 30c:	1f 92       	push	r1
 30e:	11 24       	eor	r1, r1
 310:	2f 92       	push	r2
 312:	3f 92       	push	r3
 314:	4f 92       	push	r4
 316:	5f 92       	push	r5
 318:	6f 92       	push	r6
 31a:	7f 92       	push	r7
 31c:	8f 92       	push	r8
 31e:	9f 92       	push	r9
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
 34c:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 350:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 354:	0d b6       	in	r0, 0x3d	; 61
 356:	0d 92       	st	X+, r0
 358:	0e b6       	in	r0, 0x3e	; 62
 35a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 35c:	0e 94 2b 05 	call	0xa56	; 0xa56 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 360:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 364:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 368:	cd 91       	ld	r28, X+
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	dd 91       	ld	r29, X+
 36e:	de bf       	out	0x3e, r29	; 62
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	7f 90       	pop	r7
 3a2:	6f 90       	pop	r6
 3a4:	5f 90       	pop	r5
 3a6:	4f 90       	pop	r4
 3a8:	3f 90       	pop	r3
 3aa:	2f 90       	pop	r2
 3ac:	1f 90       	pop	r1
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0

	asm volatile ( "ret" );
 3b4:	08 95       	ret

000003b6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	0f 92       	push	r0
 3be:	1f 92       	push	r1
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 92       	push	r2
 3c4:	3f 92       	push	r3
 3c6:	4f 92       	push	r4
 3c8:	5f 92       	push	r5
 3ca:	6f 92       	push	r6
 3cc:	7f 92       	push	r7
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
 3fe:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 402:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 406:	0d b6       	in	r0, 0x3d	; 61
 408:	0d 92       	st	X+, r0
 40a:	0e b6       	in	r0, 0x3e	; 62
 40c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 40e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <xTaskIncrementTick>
 412:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 414:	0e 94 2b 05 	call	0xa56	; 0xa56 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 418:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 41c:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 420:	cd 91       	ld	r28, X+
 422:	cd bf       	out	0x3d, r28	; 61
 424:	dd 91       	ld	r29, X+
 426:	de bf       	out	0x3e, r29	; 62
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	8f 90       	pop	r8
 458:	7f 90       	pop	r7
 45a:	6f 90       	pop	r6
 45c:	5f 90       	pop	r5
 45e:	4f 90       	pop	r4
 460:	3f 90       	pop	r3
 462:	2f 90       	pop	r2
 464:	1f 90       	pop	r1
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0

	asm volatile ( "ret" );
 46c:	08 95       	ret

0000046e <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 46e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <vPortYieldFromTick>
		asm volatile ( "reti" );
 472:	18 95       	reti

00000474 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 474:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 478:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 47c:	80 81       	ld	r24, Z
 47e:	81 11       	cpse	r24, r1
 480:	07 c0       	rjmp	.+14     	; 0x490 <prvResetNextTaskUnblockTime+0x1c>
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 48a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 48e:	08 95       	ret
 490:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 494:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 498:	05 80       	ldd	r0, Z+5	; 0x05
 49a:	f6 81       	ldd	r31, Z+6	; 0x06
 49c:	e0 2d       	mov	r30, r0
 49e:	06 80       	ldd	r0, Z+6	; 0x06
 4a0:	f7 81       	ldd	r31, Z+7	; 0x07
 4a2:	e0 2d       	mov	r30, r0
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	93 81       	ldd	r25, Z+3	; 0x03
 4a8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 4ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 4b0:	08 95       	ret

000004b2 <prvIdleTask>:
 4b2:	cf e3       	ldi	r28, 0x3F	; 63
 4b4:	d1 e0       	ldi	r29, 0x01	; 1
 4b6:	88 81       	ld	r24, Y
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	e8 f3       	brcs	.-6      	; 0x4b6 <prvIdleTask+0x4>
 4bc:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 4c0:	fa cf       	rjmp	.-12     	; 0x4b6 <prvIdleTask+0x4>

000004c2 <xTaskCreate>:
 4c2:	2f 92       	push	r2
 4c4:	3f 92       	push	r3
 4c6:	4f 92       	push	r4
 4c8:	5f 92       	push	r5
 4ca:	6f 92       	push	r6
 4cc:	7f 92       	push	r7
 4ce:	9f 92       	push	r9
 4d0:	af 92       	push	r10
 4d2:	bf 92       	push	r11
 4d4:	cf 92       	push	r12
 4d6:	df 92       	push	r13
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <xTaskCreate+0x24>
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <xTaskCreate+0x26>
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	1c 01       	movw	r2, r24
 4ee:	6b 01       	movw	r12, r22
 4f0:	5a 01       	movw	r10, r20
 4f2:	3a 83       	std	Y+2, r19	; 0x02
 4f4:	29 83       	std	Y+1, r18	; 0x01
 4f6:	90 2e       	mov	r9, r16
 4f8:	ca 01       	movw	r24, r20
 4fa:	0e 94 64 00 	call	0xc8	; 0xc8 <pvPortMalloc>
 4fe:	8c 01       	movw	r16, r24
 500:	89 2b       	or	r24, r25
 502:	09 f4       	brne	.+2      	; 0x506 <xTaskCreate+0x44>
 504:	27 c1       	rjmp	.+590    	; 0x754 <xTaskCreate+0x292>
 506:	80 e3       	ldi	r24, 0x30	; 48
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 64 00 	call	0xc8	; 0xc8 <pvPortMalloc>
 50e:	9c 83       	std	Y+4, r25	; 0x04
 510:	8b 83       	std	Y+3, r24	; 0x03
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	01 f1       	breq	.+64     	; 0x556 <xTaskCreate+0x94>
 516:	dc 01       	movw	r26, r24
 518:	58 96       	adiw	r26, 0x18	; 24
 51a:	1c 93       	st	X, r17
 51c:	0e 93       	st	-X, r16
 51e:	57 97       	sbiw	r26, 0x17	; 23
 520:	25 01       	movw	r4, r10
 522:	61 2c       	mov	r6, r1
 524:	71 2c       	mov	r7, r1
 526:	a5 01       	movw	r20, r10
 528:	65 ea       	ldi	r22, 0xA5	; 165
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	c8 01       	movw	r24, r16
 52e:	0e 94 1c 07 	call	0xe38	; 0xe38 <memset>
 532:	b1 e0       	ldi	r27, 0x01	; 1
 534:	ab 1a       	sub	r10, r27
 536:	b1 08       	sbc	r11, r1
 538:	eb 81       	ldd	r30, Y+3	; 0x03
 53a:	fc 81       	ldd	r31, Y+4	; 0x04
 53c:	87 89       	ldd	r24, Z+23	; 0x17
 53e:	90 8d       	ldd	r25, Z+24	; 0x18
 540:	a8 0e       	add	r10, r24
 542:	b9 1e       	adc	r11, r25
 544:	b0 a6       	std	Z+40, r11	; 0x28
 546:	a7 a2       	std	Z+39, r10	; 0x27
 548:	d6 01       	movw	r26, r12
 54a:	8c 91       	ld	r24, X
 54c:	81 8f       	std	Z+25, r24	; 0x19
 54e:	8c 91       	ld	r24, X
 550:	81 11       	cpse	r24, r1
 552:	05 c0       	rjmp	.+10     	; 0x55e <xTaskCreate+0x9c>
 554:	19 c0       	rjmp	.+50     	; 0x588 <xTaskCreate+0xc6>
 556:	c8 01       	movw	r24, r16
 558:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 55c:	fb c0       	rjmp	.+502    	; 0x754 <xTaskCreate+0x292>
 55e:	4b 81       	ldd	r20, Y+3	; 0x03
 560:	5c 81       	ldd	r21, Y+4	; 0x04
 562:	46 5e       	subi	r20, 0xE6	; 230
 564:	5f 4f       	sbci	r21, 0xFF	; 255
 566:	f6 01       	movw	r30, r12
 568:	31 96       	adiw	r30, 0x01	; 1
 56a:	b8 e0       	ldi	r27, 0x08	; 8
 56c:	cb 0e       	add	r12, r27
 56e:	d1 1c       	adc	r13, r1
 570:	cf 01       	movw	r24, r30
 572:	21 91       	ld	r18, Z+
 574:	da 01       	movw	r26, r20
 576:	2d 93       	st	X+, r18
 578:	ad 01       	movw	r20, r26
 57a:	dc 01       	movw	r26, r24
 57c:	8c 91       	ld	r24, X
 57e:	88 23       	and	r24, r24
 580:	19 f0       	breq	.+6      	; 0x588 <xTaskCreate+0xc6>
 582:	ec 15       	cp	r30, r12
 584:	fd 05       	cpc	r31, r13
 586:	a1 f7       	brne	.-24     	; 0x570 <xTaskCreate+0xae>
 588:	eb 81       	ldd	r30, Y+3	; 0x03
 58a:	fc 81       	ldd	r31, Y+4	; 0x04
 58c:	10 a2       	std	Z+32, r1	; 0x20
 58e:	09 2d       	mov	r16, r9
 590:	04 30       	cpi	r16, 0x04	; 4
 592:	08 f0       	brcs	.+2      	; 0x596 <xTaskCreate+0xd4>
 594:	03 e0       	ldi	r16, 0x03	; 3
 596:	ab 81       	ldd	r26, Y+3	; 0x03
 598:	bc 81       	ldd	r27, Y+4	; 0x04
 59a:	56 96       	adiw	r26, 0x16	; 22
 59c:	0c 93       	st	X, r16
 59e:	56 97       	sbiw	r26, 0x16	; 22
 5a0:	99 96       	adiw	r26, 0x29	; 41
 5a2:	0c 93       	st	X, r16
 5a4:	99 97       	sbiw	r26, 0x29	; 41
 5a6:	9a 96       	adiw	r26, 0x2a	; 42
 5a8:	1c 92       	st	X, r1
 5aa:	9a 97       	sbiw	r26, 0x2a	; 42
 5ac:	6d 01       	movw	r12, r26
 5ae:	b2 e0       	ldi	r27, 0x02	; 2
 5b0:	cb 0e       	add	r12, r27
 5b2:	d1 1c       	adc	r13, r1
 5b4:	c6 01       	movw	r24, r12
 5b6:	0e 94 90 00 	call	0x120	; 0x120 <vListInitialiseItem>
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	9c 81       	ldd	r25, Y+4	; 0x04
 5be:	0c 96       	adiw	r24, 0x0c	; 12
 5c0:	0e 94 90 00 	call	0x120	; 0x120 <vListInitialiseItem>
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	9c 81       	ldd	r25, Y+4	; 0x04
 5c8:	fc 01       	movw	r30, r24
 5ca:	91 87       	std	Z+9, r25	; 0x09
 5cc:	80 87       	std	Z+8, r24	; 0x08
 5ce:	84 e0       	ldi	r24, 0x04	; 4
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	80 1b       	sub	r24, r16
 5d4:	91 09       	sbc	r25, r1
 5d6:	df 01       	movw	r26, r30
 5d8:	95 87       	std	Z+13, r25	; 0x0d
 5da:	84 87       	std	Z+12, r24	; 0x0c
 5dc:	53 96       	adiw	r26, 0x13	; 19
 5de:	fc 93       	st	X, r31
 5e0:	ee 93       	st	-X, r30
 5e2:	52 97       	sbiw	r26, 0x12	; 18
 5e4:	13 a6       	std	Z+43, r1	; 0x2b
 5e6:	14 a6       	std	Z+44, r1	; 0x2c
 5e8:	15 a6       	std	Z+45, r1	; 0x2d
 5ea:	16 a6       	std	Z+46, r1	; 0x2e
 5ec:	17 a6       	std	Z+47, r1	; 0x2f
 5ee:	49 81       	ldd	r20, Y+1	; 0x01
 5f0:	5a 81       	ldd	r21, Y+2	; 0x02
 5f2:	b1 01       	movw	r22, r2
 5f4:	c5 01       	movw	r24, r10
 5f6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pxPortInitialiseStack>
 5fa:	ab 81       	ldd	r26, Y+3	; 0x03
 5fc:	bc 81       	ldd	r27, Y+4	; 0x04
 5fe:	11 96       	adiw	r26, 0x01	; 1
 600:	9c 93       	st	X, r25
 602:	8e 93       	st	-X, r24
 604:	e1 14       	cp	r14, r1
 606:	f1 04       	cpc	r15, r1
 608:	19 f0       	breq	.+6      	; 0x610 <xTaskCreate+0x14e>
 60a:	f7 01       	movw	r30, r14
 60c:	b1 83       	std	Z+1, r27	; 0x01
 60e:	a0 83       	st	Z, r26
 610:	ab 81       	ldd	r26, Y+3	; 0x03
 612:	bc 81       	ldd	r27, Y+4	; 0x04
 614:	93 96       	adiw	r26, 0x23	; 35
 616:	4d 92       	st	X+, r4
 618:	5d 92       	st	X+, r5
 61a:	6d 92       	st	X+, r6
 61c:	7c 92       	st	X, r7
 61e:	96 97       	sbiw	r26, 0x26	; 38
 620:	00 91 63 01 	lds	r16, 0x0163	; 0x800163 <pxCurrentTCB>
 624:	10 91 64 01 	lds	r17, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 628:	97 96       	adiw	r26, 0x27	; 39
 62a:	6d 91       	ld	r22, X+
 62c:	7c 91       	ld	r23, X
 62e:	98 97       	sbiw	r26, 0x28	; 40
 630:	8d 91       	ld	r24, X+
 632:	9c 91       	ld	r25, X
 634:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 638:	f8 01       	movw	r30, r16
 63a:	92 a3       	std	Z+34, r25	; 0x22
 63c:	81 a3       	std	Z+33, r24	; 0x21
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	0f 92       	push	r0
 644:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 648:	8f 5f       	subi	r24, 0xFF	; 255
 64a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 64e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
 652:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 656:	89 2b       	or	r24, r25
 658:	99 f5       	brne	.+102    	; 0x6c0 <xTaskCreate+0x1fe>
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	9c 81       	ldd	r25, Y+4	; 0x04
 65e:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 662:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 666:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	e9 f5       	brne	.+122    	; 0x6e8 <xTaskCreate+0x226>
 66e:	8f e3       	ldi	r24, 0x3F	; 63
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 676:	88 e4       	ldi	r24, 0x48	; 72
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 67e:	81 e5       	ldi	r24, 0x51	; 81
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 686:	8a e5       	ldi	r24, 0x5A	; 90
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 68e:	86 e3       	ldi	r24, 0x36	; 54
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 696:	8d e2       	ldi	r24, 0x2D	; 45
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 69e:	80 e2       	ldi	r24, 0x20	; 32
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 6a6:	86 e3       	ldi	r24, 0x36	; 54
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
 6ae:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
 6b2:	8d e2       	ldi	r24, 0x2D	; 45
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 6ba:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 6be:	14 c0       	rjmp	.+40     	; 0x6e8 <xTaskCreate+0x226>
 6c0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 6c4:	81 11       	cpse	r24, r1
 6c6:	10 c0       	rjmp	.+32     	; 0x6e8 <xTaskCreate+0x226>
 6c8:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 6cc:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 6d0:	96 89       	ldd	r25, Z+22	; 0x16
 6d2:	ab 81       	ldd	r26, Y+3	; 0x03
 6d4:	bc 81       	ldd	r27, Y+4	; 0x04
 6d6:	56 96       	adiw	r26, 0x16	; 22
 6d8:	8c 91       	ld	r24, X
 6da:	56 97       	sbiw	r26, 0x16	; 22
 6dc:	89 17       	cp	r24, r25
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <xTaskCreate+0x226>
 6e0:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <pxCurrentTCB+0x1>
 6e4:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <pxCurrentTCB>
 6e8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 6f2:	eb 81       	ldd	r30, Y+3	; 0x03
 6f4:	fc 81       	ldd	r31, Y+4	; 0x04
 6f6:	86 89       	ldd	r24, Z+22	; 0x16
 6f8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 6fc:	98 17       	cp	r25, r24
 6fe:	10 f4       	brcc	.+4      	; 0x704 <xTaskCreate+0x242>
 700:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	9c 01       	movw	r18, r24
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	22 0f       	add	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	82 0f       	add	r24, r18
 716:	93 1f       	adc	r25, r19
 718:	b6 01       	movw	r22, r12
 71a:	81 5c       	subi	r24, 0xC1	; 193
 71c:	9e 4f       	sbci	r25, 0xFE	; 254
 71e:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 72a:	88 23       	and	r24, r24
 72c:	79 f0       	breq	.+30     	; 0x74c <xTaskCreate+0x28a>
 72e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 732:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 736:	96 89       	ldd	r25, Z+22	; 0x16
 738:	ab 81       	ldd	r26, Y+3	; 0x03
 73a:	bc 81       	ldd	r27, Y+4	; 0x04
 73c:	56 96       	adiw	r26, 0x16	; 22
 73e:	8c 91       	ld	r24, X
 740:	98 17       	cp	r25, r24
 742:	30 f4       	brcc	.+12     	; 0x750 <xTaskCreate+0x28e>
 744:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	05 c0       	rjmp	.+10     	; 0x756 <xTaskCreate+0x294>
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	03 c0       	rjmp	.+6      	; 0x756 <xTaskCreate+0x294>
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	01 c0       	rjmp	.+2      	; 0x756 <xTaskCreate+0x294>
 754:	8f ef       	ldi	r24, 0xFF	; 255
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	df 90       	pop	r13
 76c:	cf 90       	pop	r12
 76e:	bf 90       	pop	r11
 770:	af 90       	pop	r10
 772:	9f 90       	pop	r9
 774:	7f 90       	pop	r7
 776:	6f 90       	pop	r6
 778:	5f 90       	pop	r5
 77a:	4f 90       	pop	r4
 77c:	3f 90       	pop	r3
 77e:	2f 90       	pop	r2
 780:	08 95       	ret

00000782 <vTaskStartScheduler>:
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	0f 2e       	mov	r0, r31
 78a:	f3 e1       	ldi	r31, 0x13	; 19
 78c:	ef 2e       	mov	r14, r31
 78e:	f1 e0       	ldi	r31, 0x01	; 1
 790:	ff 2e       	mov	r15, r31
 792:	f0 2d       	mov	r31, r0
 794:	00 e0       	ldi	r16, 0x00	; 0
 796:	20 e0       	ldi	r18, 0x00	; 0
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	44 e6       	ldi	r20, 0x64	; 100
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	66 e0       	ldi	r22, 0x06	; 6
 7a0:	71 e0       	ldi	r23, 0x01	; 1
 7a2:	89 e5       	ldi	r24, 0x59	; 89
 7a4:	92 e0       	ldi	r25, 0x02	; 2
 7a6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTaskCreate>
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	81 f4       	brne	.+32     	; 0x7ce <vTaskStartScheduler+0x4c>
 7ae:	f8 94       	cli
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 7b8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 7c2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 7c6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 7ca:	0e 94 48 01 	call	0x290	; 0x290 <xPortStartScheduler>
 7ce:	0f 91       	pop	r16
 7d0:	ff 90       	pop	r15
 7d2:	ef 90       	pop	r14
 7d4:	08 95       	ret

000007d6 <vTaskSuspendAll>:
 7d6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7e0:	08 95       	ret

000007e2 <xTaskIncrementTick>:
 7e2:	cf 92       	push	r12
 7e4:	df 92       	push	r13
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 7f6:	81 11       	cpse	r24, r1
 7f8:	99 c0       	rjmp	.+306    	; 0x92c <__stack+0x2d>
 7fa:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 7fe:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	e8 1a       	sub	r14, r24
 806:	f8 0a       	sbc	r15, r24
 808:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 80c:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 810:	e1 14       	cp	r14, r1
 812:	f1 04       	cpc	r15, r1
 814:	b9 f4       	brne	.+46     	; 0x844 <xTaskIncrementTick+0x62>
 816:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
 81a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 81e:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
 822:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 826:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
 82a:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
 82e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 832:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 836:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 83a:	8f 5f       	subi	r24, 0xFF	; 255
 83c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 840:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 844:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 848:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 84c:	e8 16       	cp	r14, r24
 84e:	f9 06       	cpc	r15, r25
 850:	10 f4       	brcc	.+4      	; 0x856 <xTaskIncrementTick+0x74>
 852:	d1 2c       	mov	r13, r1
 854:	53 c0       	rjmp	.+166    	; 0x8fc <xTaskIncrementTick+0x11a>
 856:	d1 2c       	mov	r13, r1
 858:	cc 24       	eor	r12, r12
 85a:	c3 94       	inc	r12
 85c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 860:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 864:	80 81       	ld	r24, Z
 866:	81 11       	cpse	r24, r1
 868:	07 c0       	rjmp	.+14     	; 0x878 <xTaskIncrementTick+0x96>
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 872:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 876:	42 c0       	rjmp	.+132    	; 0x8fc <xTaskIncrementTick+0x11a>
 878:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 87c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 880:	05 80       	ldd	r0, Z+5	; 0x05
 882:	f6 81       	ldd	r31, Z+6	; 0x06
 884:	e0 2d       	mov	r30, r0
 886:	c6 81       	ldd	r28, Z+6	; 0x06
 888:	d7 81       	ldd	r29, Z+7	; 0x07
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	9b 81       	ldd	r25, Y+3	; 0x03
 88e:	e8 16       	cp	r14, r24
 890:	f9 06       	cpc	r15, r25
 892:	28 f4       	brcc	.+10     	; 0x89e <xTaskIncrementTick+0xbc>
 894:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 898:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 89c:	2f c0       	rjmp	.+94     	; 0x8fc <xTaskIncrementTick+0x11a>
 89e:	8e 01       	movw	r16, r28
 8a0:	0e 5f       	subi	r16, 0xFE	; 254
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	c8 01       	movw	r24, r16
 8a6:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 8aa:	8c 89       	ldd	r24, Y+20	; 0x14
 8ac:	9d 89       	ldd	r25, Y+21	; 0x15
 8ae:	89 2b       	or	r24, r25
 8b0:	21 f0       	breq	.+8      	; 0x8ba <xTaskIncrementTick+0xd8>
 8b2:	ce 01       	movw	r24, r28
 8b4:	0c 96       	adiw	r24, 0x0c	; 12
 8b6:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 8ba:	8e 89       	ldd	r24, Y+22	; 0x16
 8bc:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 8c0:	98 17       	cp	r25, r24
 8c2:	10 f4       	brcc	.+4      	; 0x8c8 <xTaskIncrementTick+0xe6>
 8c4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	9c 01       	movw	r18, r24
 8cc:	22 0f       	add	r18, r18
 8ce:	33 1f       	adc	r19, r19
 8d0:	22 0f       	add	r18, r18
 8d2:	33 1f       	adc	r19, r19
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	82 0f       	add	r24, r18
 8da:	93 1f       	adc	r25, r19
 8dc:	b8 01       	movw	r22, r16
 8de:	81 5c       	subi	r24, 0xC1	; 193
 8e0:	9e 4f       	sbci	r25, 0xFE	; 254
 8e2:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 8e6:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 8ea:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 8ee:	9e 89       	ldd	r25, Y+22	; 0x16
 8f0:	86 89       	ldd	r24, Z+22	; 0x16
 8f2:	98 17       	cp	r25, r24
 8f4:	08 f4       	brcc	.+2      	; 0x8f8 <xTaskIncrementTick+0x116>
 8f6:	b2 cf       	rjmp	.-156    	; 0x85c <xTaskIncrementTick+0x7a>
 8f8:	dc 2c       	mov	r13, r12
 8fa:	b0 cf       	rjmp	.-160    	; 0x85c <xTaskIncrementTick+0x7a>
 8fc:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 900:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 904:	86 89       	ldd	r24, Z+22	; 0x16
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	fc 01       	movw	r30, r24
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	8e 0f       	add	r24, r30
 918:	9f 1f       	adc	r25, r31
 91a:	fc 01       	movw	r30, r24
 91c:	e1 5c       	subi	r30, 0xC1	; 193
 91e:	fe 4f       	sbci	r31, 0xFE	; 254
 920:	80 81       	ld	r24, Z
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	48 f0       	brcs	.+18     	; 0x938 <__stack+0x39>
 926:	dd 24       	eor	r13, r13
 928:	d3 94       	inc	r13
 92a:	06 c0       	rjmp	.+12     	; 0x938 <__stack+0x39>
 92c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 930:	8f 5f       	subi	r24, 0xFF	; 255
 932:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 936:	d1 2c       	mov	r13, r1
 938:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 93c:	88 23       	and	r24, r24
 93e:	11 f0       	breq	.+4      	; 0x944 <__stack+0x45>
 940:	dd 24       	eor	r13, r13
 942:	d3 94       	inc	r13
 944:	8d 2d       	mov	r24, r13
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	ff 90       	pop	r15
 950:	ef 90       	pop	r14
 952:	df 90       	pop	r13
 954:	cf 90       	pop	r12
 956:	08 95       	ret

00000958 <xTaskResumeAll>:
 958:	df 92       	push	r13
 95a:	ef 92       	push	r14
 95c:	ff 92       	push	r15
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	0f 92       	push	r0
 96c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 970:	81 50       	subi	r24, 0x01	; 1
 972:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 976:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 97a:	81 11       	cpse	r24, r1
 97c:	5f c0       	rjmp	.+190    	; 0xa3c <xTaskResumeAll+0xe4>
 97e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 982:	81 11       	cpse	r24, r1
 984:	33 c0       	rjmp	.+102    	; 0x9ec <xTaskResumeAll+0x94>
 986:	5d c0       	rjmp	.+186    	; 0xa42 <xTaskResumeAll+0xea>
 988:	d7 01       	movw	r26, r14
 98a:	15 96       	adiw	r26, 0x05	; 5
 98c:	ed 91       	ld	r30, X+
 98e:	fc 91       	ld	r31, X
 990:	16 97       	sbiw	r26, 0x06	; 6
 992:	c6 81       	ldd	r28, Z+6	; 0x06
 994:	d7 81       	ldd	r29, Z+7	; 0x07
 996:	ce 01       	movw	r24, r28
 998:	0c 96       	adiw	r24, 0x0c	; 12
 99a:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 99e:	8e 01       	movw	r16, r28
 9a0:	0e 5f       	subi	r16, 0xFE	; 254
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
 9a4:	c8 01       	movw	r24, r16
 9a6:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 9aa:	8e 89       	ldd	r24, Y+22	; 0x16
 9ac:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 9b0:	98 17       	cp	r25, r24
 9b2:	10 f4       	brcc	.+4      	; 0x9b8 <xTaskResumeAll+0x60>
 9b4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	9c 01       	movw	r18, r24
 9bc:	22 0f       	add	r18, r18
 9be:	33 1f       	adc	r19, r19
 9c0:	22 0f       	add	r18, r18
 9c2:	33 1f       	adc	r19, r19
 9c4:	22 0f       	add	r18, r18
 9c6:	33 1f       	adc	r19, r19
 9c8:	82 0f       	add	r24, r18
 9ca:	93 1f       	adc	r25, r19
 9cc:	b8 01       	movw	r22, r16
 9ce:	81 5c       	subi	r24, 0xC1	; 193
 9d0:	9e 4f       	sbci	r25, 0xFE	; 254
 9d2:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 9d6:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 9da:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9de:	9e 89       	ldd	r25, Y+22	; 0x16
 9e0:	86 89       	ldd	r24, Z+22	; 0x16
 9e2:	98 17       	cp	r25, r24
 9e4:	68 f0       	brcs	.+26     	; 0xa00 <xTaskResumeAll+0xa8>
 9e6:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 9ea:	0a c0       	rjmp	.+20     	; 0xa00 <xTaskResumeAll+0xa8>
 9ec:	c0 e0       	ldi	r28, 0x00	; 0
 9ee:	d0 e0       	ldi	r29, 0x00	; 0
 9f0:	0f 2e       	mov	r0, r31
 9f2:	f0 e2       	ldi	r31, 0x20	; 32
 9f4:	ef 2e       	mov	r14, r31
 9f6:	f1 e0       	ldi	r31, 0x01	; 1
 9f8:	ff 2e       	mov	r15, r31
 9fa:	f0 2d       	mov	r31, r0
 9fc:	dd 24       	eor	r13, r13
 9fe:	d3 94       	inc	r13
 a00:	f7 01       	movw	r30, r14
 a02:	80 81       	ld	r24, Z
 a04:	81 11       	cpse	r24, r1
 a06:	c0 cf       	rjmp	.-128    	; 0x988 <xTaskResumeAll+0x30>
 a08:	cd 2b       	or	r28, r29
 a0a:	11 f0       	breq	.+4      	; 0xa10 <xTaskResumeAll+0xb8>
 a0c:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 a10:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 a14:	cc 23       	and	r28, r28
 a16:	51 f0       	breq	.+20     	; 0xa2c <xTaskResumeAll+0xd4>
 a18:	d1 e0       	ldi	r29, 0x01	; 1
 a1a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <xTaskIncrementTick>
 a1e:	81 11       	cpse	r24, r1
 a20:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 a24:	c1 50       	subi	r28, 0x01	; 1
 a26:	c9 f7       	brne	.-14     	; 0xa1a <xTaskResumeAll+0xc2>
 a28:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 a2c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 a30:	88 23       	and	r24, r24
 a32:	31 f0       	breq	.+12     	; 0xa40 <xTaskResumeAll+0xe8>
 a34:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <xTaskResumeAll+0xea>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	01 c0       	rjmp	.+2      	; 0xa42 <xTaskResumeAll+0xea>
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	0f 90       	pop	r0
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	df 91       	pop	r29
 a48:	cf 91       	pop	r28
 a4a:	1f 91       	pop	r17
 a4c:	0f 91       	pop	r16
 a4e:	ff 90       	pop	r15
 a50:	ef 90       	pop	r14
 a52:	df 90       	pop	r13
 a54:	08 95       	ret

00000a56 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 a5a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a5e:	88 23       	and	r24, r24
 a60:	21 f0       	breq	.+8      	; 0xa6a <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 a68:	91 c0       	rjmp	.+290    	; 0xb8c <vTaskSwitchContext+0x136>
	}
	else
	{
		xYieldPending = pdFALSE;
 a6a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 a6e:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
 a72:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a76:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 a7a:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a7e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a82:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a86:	97 96       	adiw	r26, 0x27	; 39
 a88:	6d 91       	ld	r22, X+
 a8a:	7c 91       	ld	r23, X
 a8c:	98 97       	sbiw	r26, 0x28	; 40
 a8e:	80 81       	ld	r24, Z
 a90:	91 81       	ldd	r25, Z+1	; 0x01
 a92:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 a96:	9a a3       	std	Y+34, r25	; 0x22
 a98:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 a9a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 a9e:	82 2f       	mov	r24, r18
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	fc 01       	movw	r30, r24
 aa4:	ee 0f       	add	r30, r30
 aa6:	ff 1f       	adc	r31, r31
 aa8:	ee 0f       	add	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	ee 0f       	add	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	e8 0f       	add	r30, r24
 ab2:	f9 1f       	adc	r31, r25
 ab4:	e1 5c       	subi	r30, 0xC1	; 193
 ab6:	fe 4f       	sbci	r31, 0xFE	; 254
 ab8:	30 81       	ld	r19, Z
 aba:	31 11       	cpse	r19, r1
 abc:	11 c0       	rjmp	.+34     	; 0xae0 <vTaskSwitchContext+0x8a>
 abe:	21 50       	subi	r18, 0x01	; 1
 ac0:	82 2f       	mov	r24, r18
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	fc 01       	movw	r30, r24
 ac6:	ee 0f       	add	r30, r30
 ac8:	ff 1f       	adc	r31, r31
 aca:	ee 0f       	add	r30, r30
 acc:	ff 1f       	adc	r31, r31
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	e8 0f       	add	r30, r24
 ad4:	f9 1f       	adc	r31, r25
 ad6:	e1 5c       	subi	r30, 0xC1	; 193
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	30 81       	ld	r19, Z
 adc:	33 23       	and	r19, r19
 ade:	79 f3       	breq	.-34     	; 0xabe <vTaskSwitchContext+0x68>
 ae0:	ac 01       	movw	r20, r24
 ae2:	44 0f       	add	r20, r20
 ae4:	55 1f       	adc	r21, r21
 ae6:	44 0f       	add	r20, r20
 ae8:	55 1f       	adc	r21, r21
 aea:	44 0f       	add	r20, r20
 aec:	55 1f       	adc	r21, r21
 aee:	48 0f       	add	r20, r24
 af0:	59 1f       	adc	r21, r25
 af2:	da 01       	movw	r26, r20
 af4:	a1 5c       	subi	r26, 0xC1	; 193
 af6:	be 4f       	sbci	r27, 0xFE	; 254
 af8:	11 96       	adiw	r26, 0x01	; 1
 afa:	ed 91       	ld	r30, X+
 afc:	fc 91       	ld	r31, X
 afe:	12 97       	sbiw	r26, 0x02	; 2
 b00:	02 80       	ldd	r0, Z+2	; 0x02
 b02:	f3 81       	ldd	r31, Z+3	; 0x03
 b04:	e0 2d       	mov	r30, r0
 b06:	12 96       	adiw	r26, 0x02	; 2
 b08:	fc 93       	st	X, r31
 b0a:	ee 93       	st	-X, r30
 b0c:	11 97       	sbiw	r26, 0x01	; 1
 b0e:	4e 5b       	subi	r20, 0xBE	; 190
 b10:	5e 4f       	sbci	r21, 0xFE	; 254
 b12:	e4 17       	cp	r30, r20
 b14:	f5 07       	cpc	r31, r21
 b16:	29 f4       	brne	.+10     	; 0xb22 <vTaskSwitchContext+0xcc>
 b18:	42 81       	ldd	r20, Z+2	; 0x02
 b1a:	53 81       	ldd	r21, Z+3	; 0x03
 b1c:	fd 01       	movw	r30, r26
 b1e:	52 83       	std	Z+2, r21	; 0x02
 b20:	41 83       	std	Z+1, r20	; 0x01
 b22:	fc 01       	movw	r30, r24
 b24:	ee 0f       	add	r30, r30
 b26:	ff 1f       	adc	r31, r31
 b28:	ee 0f       	add	r30, r30
 b2a:	ff 1f       	adc	r31, r31
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	8e 0f       	add	r24, r30
 b32:	9f 1f       	adc	r25, r31
 b34:	fc 01       	movw	r30, r24
 b36:	e1 5c       	subi	r30, 0xC1	; 193
 b38:	fe 4f       	sbci	r31, 0xFE	; 254
 b3a:	01 80       	ldd	r0, Z+1	; 0x01
 b3c:	f2 81       	ldd	r31, Z+2	; 0x02
 b3e:	e0 2d       	mov	r30, r0
 b40:	86 81       	ldd	r24, Z+6	; 0x06
 b42:	97 81       	ldd	r25, Z+7	; 0x07
 b44:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 b48:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 b4c:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 b50:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 b54:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b58:	c1 a1       	ldd	r28, Z+33	; 0x21
 b5a:	d2 a1       	ldd	r29, Z+34	; 0x22
 b5c:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 b60:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b64:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 b68:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b6c:	97 96       	adiw	r26, 0x27	; 39
 b6e:	6d 91       	ld	r22, X+
 b70:	7c 91       	ld	r23, X
 b72:	98 97       	sbiw	r26, 0x28	; 40
 b74:	80 81       	ld	r24, Z
 b76:	91 81       	ldd	r25, Z+1	; 0x01
 b78:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 b7c:	c8 17       	cp	r28, r24
 b7e:	d9 07       	cpc	r29, r25
 b80:	19 f4       	brne	.+6      	; 0xb88 <vTaskSwitchContext+0x132>
 b82:	0e 94 ed 05 	call	0xbda	; 0xbda <vApplicationTaskChecksumHook>
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <vTaskSwitchContext+0x136>
 b88:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <vApplicationTaskChecksumHook1>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 b8c:	df 91       	pop	r29
 b8e:	cf 91       	pop	r28
 b90:	08 95       	ret

00000b92 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <_Z7task_txPv>

00000b94 <_Z7task_rxPv>:
	{
	}
}

void task_rx(void* p)
{	
 b94:	ff cf       	rjmp	.-2      	; 0xb94 <_Z7task_rxPv>

00000b96 <main>:
	{
	}
}

int main(void)
{
 b96:	ef 92       	push	r14
 b98:	ff 92       	push	r15
 b9a:	0f 93       	push	r16
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 b9c:	e1 2c       	mov	r14, r1
 b9e:	f1 2c       	mov	r15, r1
 ba0:	01 e0       	ldi	r16, 0x01	; 1
 ba2:	20 e0       	ldi	r18, 0x00	; 0
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	44 e6       	ldi	r20, 0x64	; 100
 ba8:	50 e0       	ldi	r21, 0x00	; 0
 baa:	6b e0       	ldi	r22, 0x0B	; 11
 bac:	71 e0       	ldi	r23, 0x01	; 1
 bae:	89 ec       	ldi	r24, 0xC9	; 201
 bb0:	95 e0       	ldi	r25, 0x05	; 5
 bb2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 bb6:	20 e0       	ldi	r18, 0x00	; 0
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	44 e6       	ldi	r20, 0x64	; 100
 bbc:	50 e0       	ldi	r21, 0x00	; 0
 bbe:	6e e0       	ldi	r22, 0x0E	; 14
 bc0:	71 e0       	ldi	r23, 0x01	; 1
 bc2:	8a ec       	ldi	r24, 0xCA	; 202
 bc4:	95 e0       	ldi	r25, 0x05	; 5
 bc6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTaskCreate>
	vTaskStartScheduler();
 bca:	0e 94 c1 03 	call	0x782	; 0x782 <vTaskStartScheduler>
	
	return 0;
}
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0f 91       	pop	r16
 bd4:	ff 90       	pop	r15
 bd6:	ef 90       	pop	r14
 bd8:	08 95       	ret

00000bda <vApplicationTaskChecksumHook>:
extern "C"{
	void vApplicationTaskChecksumHook( void ){
		globa=1;
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
 be2:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
 be6:	08 95       	ret

00000be8 <vApplicationTaskChecksumHook1>:
	}
	void vApplicationTaskChecksumHook1( void ){
		globa=2;
 be8:	82 e0       	ldi	r24, 0x02	; 2
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
 bf0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
 bf4:	08 95       	ret

00000bf6 <malloc>:
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	82 30       	cpi	r24, 0x02	; 2
 c00:	91 05       	cpc	r25, r1
 c02:	10 f4       	brcc	.+4      	; 0xc08 <malloc+0x12>
 c04:	82 e0       	ldi	r24, 0x02	; 2
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
 c0c:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
 c10:	20 e0       	ldi	r18, 0x00	; 0
 c12:	30 e0       	ldi	r19, 0x00	; 0
 c14:	a0 e0       	ldi	r26, 0x00	; 0
 c16:	b0 e0       	ldi	r27, 0x00	; 0
 c18:	30 97       	sbiw	r30, 0x00	; 0
 c1a:	19 f1       	breq	.+70     	; 0xc62 <malloc+0x6c>
 c1c:	40 81       	ld	r20, Z
 c1e:	51 81       	ldd	r21, Z+1	; 0x01
 c20:	02 81       	ldd	r16, Z+2	; 0x02
 c22:	13 81       	ldd	r17, Z+3	; 0x03
 c24:	48 17       	cp	r20, r24
 c26:	59 07       	cpc	r21, r25
 c28:	c8 f0       	brcs	.+50     	; 0xc5c <malloc+0x66>
 c2a:	84 17       	cp	r24, r20
 c2c:	95 07       	cpc	r25, r21
 c2e:	69 f4       	brne	.+26     	; 0xc4a <malloc+0x54>
 c30:	10 97       	sbiw	r26, 0x00	; 0
 c32:	31 f0       	breq	.+12     	; 0xc40 <malloc+0x4a>
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	0c 93       	st	X, r16
 c38:	12 97       	sbiw	r26, 0x02	; 2
 c3a:	13 96       	adiw	r26, 0x03	; 3
 c3c:	1c 93       	st	X, r17
 c3e:	27 c0       	rjmp	.+78     	; 0xc8e <malloc+0x98>
 c40:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
 c44:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
 c48:	22 c0       	rjmp	.+68     	; 0xc8e <malloc+0x98>
 c4a:	21 15       	cp	r18, r1
 c4c:	31 05       	cpc	r19, r1
 c4e:	19 f0       	breq	.+6      	; 0xc56 <malloc+0x60>
 c50:	42 17       	cp	r20, r18
 c52:	53 07       	cpc	r21, r19
 c54:	18 f4       	brcc	.+6      	; 0xc5c <malloc+0x66>
 c56:	9a 01       	movw	r18, r20
 c58:	bd 01       	movw	r22, r26
 c5a:	ef 01       	movw	r28, r30
 c5c:	df 01       	movw	r26, r30
 c5e:	f8 01       	movw	r30, r16
 c60:	db cf       	rjmp	.-74     	; 0xc18 <malloc+0x22>
 c62:	21 15       	cp	r18, r1
 c64:	31 05       	cpc	r19, r1
 c66:	f9 f0       	breq	.+62     	; 0xca6 <malloc+0xb0>
 c68:	28 1b       	sub	r18, r24
 c6a:	39 0b       	sbc	r19, r25
 c6c:	24 30       	cpi	r18, 0x04	; 4
 c6e:	31 05       	cpc	r19, r1
 c70:	80 f4       	brcc	.+32     	; 0xc92 <malloc+0x9c>
 c72:	8a 81       	ldd	r24, Y+2	; 0x02
 c74:	9b 81       	ldd	r25, Y+3	; 0x03
 c76:	61 15       	cp	r22, r1
 c78:	71 05       	cpc	r23, r1
 c7a:	21 f0       	breq	.+8      	; 0xc84 <malloc+0x8e>
 c7c:	fb 01       	movw	r30, r22
 c7e:	93 83       	std	Z+3, r25	; 0x03
 c80:	82 83       	std	Z+2, r24	; 0x02
 c82:	04 c0       	rjmp	.+8      	; 0xc8c <malloc+0x96>
 c84:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
 c88:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
 c8c:	fe 01       	movw	r30, r28
 c8e:	32 96       	adiw	r30, 0x02	; 2
 c90:	44 c0       	rjmp	.+136    	; 0xd1a <malloc+0x124>
 c92:	fe 01       	movw	r30, r28
 c94:	e2 0f       	add	r30, r18
 c96:	f3 1f       	adc	r31, r19
 c98:	81 93       	st	Z+, r24
 c9a:	91 93       	st	Z+, r25
 c9c:	22 50       	subi	r18, 0x02	; 2
 c9e:	31 09       	sbc	r19, r1
 ca0:	39 83       	std	Y+1, r19	; 0x01
 ca2:	28 83       	st	Y, r18
 ca4:	3a c0       	rjmp	.+116    	; 0xd1a <malloc+0x124>
 ca6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 caa:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 cae:	23 2b       	or	r18, r19
 cb0:	41 f4       	brne	.+16     	; 0xcc2 <malloc+0xcc>
 cb2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 cb6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 cba:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
 cbe:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
 cc2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 cc6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 cca:	21 15       	cp	r18, r1
 ccc:	31 05       	cpc	r19, r1
 cce:	41 f4       	brne	.+16     	; 0xce0 <malloc+0xea>
 cd0:	2d b7       	in	r18, 0x3d	; 61
 cd2:	3e b7       	in	r19, 0x3e	; 62
 cd4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 cd8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 cdc:	24 1b       	sub	r18, r20
 cde:	35 0b       	sbc	r19, r21
 ce0:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
 ce4:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
 ce8:	e2 17       	cp	r30, r18
 cea:	f3 07       	cpc	r31, r19
 cec:	a0 f4       	brcc	.+40     	; 0xd16 <malloc+0x120>
 cee:	2e 1b       	sub	r18, r30
 cf0:	3f 0b       	sbc	r19, r31
 cf2:	28 17       	cp	r18, r24
 cf4:	39 07       	cpc	r19, r25
 cf6:	78 f0       	brcs	.+30     	; 0xd16 <malloc+0x120>
 cf8:	ac 01       	movw	r20, r24
 cfa:	4e 5f       	subi	r20, 0xFE	; 254
 cfc:	5f 4f       	sbci	r21, 0xFF	; 255
 cfe:	24 17       	cp	r18, r20
 d00:	35 07       	cpc	r19, r21
 d02:	48 f0       	brcs	.+18     	; 0xd16 <malloc+0x120>
 d04:	4e 0f       	add	r20, r30
 d06:	5f 1f       	adc	r21, r31
 d08:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
 d0c:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
 d10:	81 93       	st	Z+, r24
 d12:	91 93       	st	Z+, r25
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <malloc+0x124>
 d16:	e0 e0       	ldi	r30, 0x00	; 0
 d18:	f0 e0       	ldi	r31, 0x00	; 0
 d1a:	cf 01       	movw	r24, r30
 d1c:	df 91       	pop	r29
 d1e:	cf 91       	pop	r28
 d20:	1f 91       	pop	r17
 d22:	0f 91       	pop	r16
 d24:	08 95       	ret

00000d26 <free>:
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
 d2a:	00 97       	sbiw	r24, 0x00	; 0
 d2c:	09 f4       	brne	.+2      	; 0xd30 <free+0xa>
 d2e:	81 c0       	rjmp	.+258    	; 0xe32 <free+0x10c>
 d30:	fc 01       	movw	r30, r24
 d32:	32 97       	sbiw	r30, 0x02	; 2
 d34:	13 82       	std	Z+3, r1	; 0x03
 d36:	12 82       	std	Z+2, r1	; 0x02
 d38:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
 d3c:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
 d40:	10 97       	sbiw	r26, 0x00	; 0
 d42:	81 f4       	brne	.+32     	; 0xd64 <free+0x3e>
 d44:	20 81       	ld	r18, Z
 d46:	31 81       	ldd	r19, Z+1	; 0x01
 d48:	82 0f       	add	r24, r18
 d4a:	93 1f       	adc	r25, r19
 d4c:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 d50:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 d54:	28 17       	cp	r18, r24
 d56:	39 07       	cpc	r19, r25
 d58:	51 f5       	brne	.+84     	; 0xdae <free+0x88>
 d5a:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
 d5e:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
 d62:	67 c0       	rjmp	.+206    	; 0xe32 <free+0x10c>
 d64:	ed 01       	movw	r28, r26
 d66:	20 e0       	ldi	r18, 0x00	; 0
 d68:	30 e0       	ldi	r19, 0x00	; 0
 d6a:	ce 17       	cp	r28, r30
 d6c:	df 07       	cpc	r29, r31
 d6e:	40 f4       	brcc	.+16     	; 0xd80 <free+0x5a>
 d70:	4a 81       	ldd	r20, Y+2	; 0x02
 d72:	5b 81       	ldd	r21, Y+3	; 0x03
 d74:	9e 01       	movw	r18, r28
 d76:	41 15       	cp	r20, r1
 d78:	51 05       	cpc	r21, r1
 d7a:	f1 f0       	breq	.+60     	; 0xdb8 <free+0x92>
 d7c:	ea 01       	movw	r28, r20
 d7e:	f5 cf       	rjmp	.-22     	; 0xd6a <free+0x44>
 d80:	d3 83       	std	Z+3, r29	; 0x03
 d82:	c2 83       	std	Z+2, r28	; 0x02
 d84:	40 81       	ld	r20, Z
 d86:	51 81       	ldd	r21, Z+1	; 0x01
 d88:	84 0f       	add	r24, r20
 d8a:	95 1f       	adc	r25, r21
 d8c:	c8 17       	cp	r28, r24
 d8e:	d9 07       	cpc	r29, r25
 d90:	59 f4       	brne	.+22     	; 0xda8 <free+0x82>
 d92:	88 81       	ld	r24, Y
 d94:	99 81       	ldd	r25, Y+1	; 0x01
 d96:	84 0f       	add	r24, r20
 d98:	95 1f       	adc	r25, r21
 d9a:	02 96       	adiw	r24, 0x02	; 2
 d9c:	91 83       	std	Z+1, r25	; 0x01
 d9e:	80 83       	st	Z, r24
 da0:	8a 81       	ldd	r24, Y+2	; 0x02
 da2:	9b 81       	ldd	r25, Y+3	; 0x03
 da4:	93 83       	std	Z+3, r25	; 0x03
 da6:	82 83       	std	Z+2, r24	; 0x02
 da8:	21 15       	cp	r18, r1
 daa:	31 05       	cpc	r19, r1
 dac:	29 f4       	brne	.+10     	; 0xdb8 <free+0x92>
 dae:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
 db2:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
 db6:	3d c0       	rjmp	.+122    	; 0xe32 <free+0x10c>
 db8:	e9 01       	movw	r28, r18
 dba:	fb 83       	std	Y+3, r31	; 0x03
 dbc:	ea 83       	std	Y+2, r30	; 0x02
 dbe:	49 91       	ld	r20, Y+
 dc0:	59 91       	ld	r21, Y+
 dc2:	c4 0f       	add	r28, r20
 dc4:	d5 1f       	adc	r29, r21
 dc6:	ec 17       	cp	r30, r28
 dc8:	fd 07       	cpc	r31, r29
 dca:	61 f4       	brne	.+24     	; 0xde4 <free+0xbe>
 dcc:	80 81       	ld	r24, Z
 dce:	91 81       	ldd	r25, Z+1	; 0x01
 dd0:	84 0f       	add	r24, r20
 dd2:	95 1f       	adc	r25, r21
 dd4:	02 96       	adiw	r24, 0x02	; 2
 dd6:	e9 01       	movw	r28, r18
 dd8:	99 83       	std	Y+1, r25	; 0x01
 dda:	88 83       	st	Y, r24
 ddc:	82 81       	ldd	r24, Z+2	; 0x02
 dde:	93 81       	ldd	r25, Z+3	; 0x03
 de0:	9b 83       	std	Y+3, r25	; 0x03
 de2:	8a 83       	std	Y+2, r24	; 0x02
 de4:	e0 e0       	ldi	r30, 0x00	; 0
 de6:	f0 e0       	ldi	r31, 0x00	; 0
 de8:	12 96       	adiw	r26, 0x02	; 2
 dea:	8d 91       	ld	r24, X+
 dec:	9c 91       	ld	r25, X
 dee:	13 97       	sbiw	r26, 0x03	; 3
 df0:	00 97       	sbiw	r24, 0x00	; 0
 df2:	19 f0       	breq	.+6      	; 0xdfa <free+0xd4>
 df4:	fd 01       	movw	r30, r26
 df6:	dc 01       	movw	r26, r24
 df8:	f7 cf       	rjmp	.-18     	; 0xde8 <free+0xc2>
 dfa:	8d 91       	ld	r24, X+
 dfc:	9c 91       	ld	r25, X
 dfe:	11 97       	sbiw	r26, 0x01	; 1
 e00:	9d 01       	movw	r18, r26
 e02:	2e 5f       	subi	r18, 0xFE	; 254
 e04:	3f 4f       	sbci	r19, 0xFF	; 255
 e06:	82 0f       	add	r24, r18
 e08:	93 1f       	adc	r25, r19
 e0a:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 e0e:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 e12:	28 17       	cp	r18, r24
 e14:	39 07       	cpc	r19, r25
 e16:	69 f4       	brne	.+26     	; 0xe32 <free+0x10c>
 e18:	30 97       	sbiw	r30, 0x00	; 0
 e1a:	29 f4       	brne	.+10     	; 0xe26 <free+0x100>
 e1c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
 e20:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
 e24:	02 c0       	rjmp	.+4      	; 0xe2a <free+0x104>
 e26:	13 82       	std	Z+3, r1	; 0x03
 e28:	12 82       	std	Z+2, r1	; 0x02
 e2a:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
 e2e:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
 e32:	df 91       	pop	r29
 e34:	cf 91       	pop	r28
 e36:	08 95       	ret

00000e38 <memset>:
 e38:	dc 01       	movw	r26, r24
 e3a:	01 c0       	rjmp	.+2      	; 0xe3e <memset+0x6>
 e3c:	6d 93       	st	X+, r22
 e3e:	41 50       	subi	r20, 0x01	; 1
 e40:	50 40       	sbci	r21, 0x00	; 0
 e42:	e0 f7       	brcc	.-8      	; 0xe3c <memset+0x4>
 e44:	08 95       	ret

00000e46 <_exit>:
 e46:	f8 94       	cli

00000e48 <__stop_program>:
 e48:	ff cf       	rjmp	.-2      	; 0xe48 <__stop_program>
