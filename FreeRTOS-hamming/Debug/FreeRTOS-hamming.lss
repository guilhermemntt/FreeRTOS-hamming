
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ef4  00000f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800112  00800112  00000f9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d5f  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddc  00000000  00000000  00003fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019c5  00000000  00000000  00004db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  0000677c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001215  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002783  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000a81c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 37       	cpi	r26, 0x73	; 115
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2c 06 	call	0xc58	; 0xc58 <main>
  9e:	0c 94 78 07 	jmp	0xef0	; 0xef0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
}

#elif( configSUPPORT_TASK_CHECKSUM==2 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <uxChecksumGetTaskChecksum+0xc>
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	fc 01       	movw	r30, r24
	uint16_t	usPolinomio=0x8408;
	uint8_t	i;
	uint16_t	usData;
	volatile uint16_t	usCrc;
	usCrc=0xffff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	9f ef       	ldi	r25, 0xFF	; 255
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
	
	if(pxStartOfStack==pxEndOfStack){
  c0:	e6 17       	cp	r30, r22
  c2:	f7 07       	cpc	r31, r23
  c4:	29 f4       	brne	.+10     	; 0xd0 <uxChecksumGetTaskChecksum+0x2a>
		return	(~usCrc);
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	80 95       	com	r24
  cc:	90 95       	com	r25
  ce:	43 c0       	rjmp	.+134    	; 0x156 <uxChecksumGetTaskChecksum+0xb0>
	}
	do{
		for (i = 0, usData = (uint16_t)0xff && *(pxStartOfStack-=portSTACK_GROWTH); i < 8; i++, usData >>= 1) {
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	f1 2c       	mov	r15, r1
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	af 2d       	mov	r26, r15
  da:	80 2f       	mov	r24, r16
  dc:	31 96       	adiw	r30, 0x01	; 1
  de:	20 81       	ld	r18, Z
  e0:	41 2f       	mov	r20, r17
  e2:	9b 2f       	mov	r25, r27
  e4:	21 11       	cpse	r18, r1
  e6:	02 c0       	rjmp	.+4      	; 0xec <uxChecksumGetTaskChecksum+0x46>
  e8:	4f 2d       	mov	r20, r15
  ea:	90 2f       	mov	r25, r16
  ec:	24 2f       	mov	r18, r20
  ee:	39 2f       	mov	r19, r25
  f0:	98 e0       	ldi	r25, 0x08	; 8
			if((usCrc & 0x0001)^(usData & 0x0001)){
  f2:	49 81       	ldd	r20, Y+1	; 0x01
  f4:	5a 81       	ldd	r21, Y+2	; 0x02
  f6:	24 27       	eor	r18, r20
  f8:	35 27       	eor	r19, r21
  fa:	20 ff       	sbrs	r18, 0
  fc:	0b c0       	rjmp	.+22     	; 0x114 <uxChecksumGetTaskChecksum+0x6e>
				usCrc = (usCrc >> 1)^usPolinomio;
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	3a 81       	ldd	r19, Y+2	; 0x02
 102:	36 95       	lsr	r19
 104:	27 95       	ror	r18
 106:	48 e0       	ldi	r20, 0x08	; 8
 108:	24 27       	eor	r18, r20
 10a:	44 e8       	ldi	r20, 0x84	; 132
 10c:	34 27       	eor	r19, r20
 10e:	3a 83       	std	Y+2, r19	; 0x02
 110:	29 83       	std	Y+1, r18	; 0x01
 112:	06 c0       	rjmp	.+12     	; 0x120 <uxChecksumGetTaskChecksum+0x7a>
			}
			else{
				usCrc >>= 1;
 114:	29 81       	ldd	r18, Y+1	; 0x01
 116:	3a 81       	ldd	r19, Y+2	; 0x02
 118:	36 95       	lsr	r19
 11a:	27 95       	ror	r18
 11c:	3a 83       	std	Y+2, r19	; 0x02
 11e:	29 83       	std	Y+1, r18	; 0x01
 120:	91 50       	subi	r25, 0x01	; 1
	
	if(pxStartOfStack==pxEndOfStack){
		return	(~usCrc);
	}
	do{
		for (i = 0, usData = (uint16_t)0xff && *(pxStartOfStack-=portSTACK_GROWTH); i < 8; i++, usData >>= 1) {
 122:	2a 2f       	mov	r18, r26
 124:	38 2f       	mov	r19, r24
 126:	29 f7       	brne	.-54     	; 0xf2 <uxChecksumGetTaskChecksum+0x4c>
			}
			else{
				usCrc >>= 1;
			}
		}
	} while (pxEndOfStack != pxStartOfStack);
 128:	6e 17       	cp	r22, r30
 12a:	7f 07       	cpc	r23, r31
 12c:	b9 f6       	brne	.-82     	; 0xdc <uxChecksumGetTaskChecksum+0x36>
	usCrc = ~usCrc;
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	80 95       	com	r24
 134:	90 95       	com	r25
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	89 83       	std	Y+1, r24	; 0x01
	usData = usCrc;
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
	usCrc = (usCrc << 8)|(usData >> 8 & 0xff);
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	3a 81       	ldd	r19, Y+2	; 0x02
 142:	32 2f       	mov	r19, r18
 144:	22 27       	eor	r18, r18
 146:	89 2f       	mov	r24, r25
 148:	99 27       	eor	r25, r25
 14a:	82 2b       	or	r24, r18
 14c:	93 2b       	or	r25, r19
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
	return usCrc;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
}
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	08 95       	ret

00000166 <vApplicationTaskChecksumSucceedHook>:
	
#endif

#if ( configUSE_TASK_CHECKSUM_HOOK == 1 )

	vApplicationTaskChecksumSucceedHook(){
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
		volatile char a=10;
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	89 83       	std	Y+1, r24	; 0x01
	}
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <vApplicationTaskChecksumFailedHook>:
	
	vApplicationTaskChecksumFailedHook(){
 17c:	ff cf       	rjmp	.-2      	; 0x17c <vApplicationTaskChecksumFailedHook>

0000017e <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
 184:	0e 94 39 04 	call	0x872	; 0x872 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 50 06 	call	0xca0	; 0xca0 <malloc>
 18e:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 190:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 194:	ce 01       	movw	r24, r28
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	if( pv )
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <vPortFree+0x18>
 1a4:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
 1a6:	0e 94 39 04 	call	0x872	; 0x872 <vTaskSuspendAll>
		{
			free( pv );
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 1b0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <xTaskResumeAll>
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 1ba:	fc 01       	movw	r30, r24
 1bc:	03 96       	adiw	r24, 0x03	; 3
 1be:	92 83       	std	Z+2, r25	; 0x02
 1c0:	81 83       	std	Z+1, r24	; 0x01
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	3f ef       	ldi	r19, 0xFF	; 255
 1c6:	34 83       	std	Z+4, r19	; 0x04
 1c8:	23 83       	std	Z+3, r18	; 0x03
 1ca:	96 83       	std	Z+6, r25	; 0x06
 1cc:	85 83       	std	Z+5, r24	; 0x05
 1ce:	90 87       	std	Z+8, r25	; 0x08
 1d0:	87 83       	std	Z+7, r24	; 0x07
 1d2:	10 82       	st	Z, r1
 1d4:	08 95       	ret

000001d6 <vListInitialiseItem>:
 1d6:	fc 01       	movw	r30, r24
 1d8:	11 86       	std	Z+9, r1	; 0x09
 1da:	10 86       	std	Z+8, r1	; 0x08
 1dc:	08 95       	ret

000001de <vListInsertEnd>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	9c 01       	movw	r18, r24
 1e4:	fb 01       	movw	r30, r22
 1e6:	dc 01       	movw	r26, r24
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	cd 91       	ld	r28, X+
 1ec:	dc 91       	ld	r29, X
 1ee:	12 97       	sbiw	r26, 0x02	; 2
 1f0:	d3 83       	std	Z+3, r29	; 0x03
 1f2:	c2 83       	std	Z+2, r28	; 0x02
 1f4:	8c 81       	ldd	r24, Y+4	; 0x04
 1f6:	9d 81       	ldd	r25, Y+5	; 0x05
 1f8:	95 83       	std	Z+5, r25	; 0x05
 1fa:	84 83       	std	Z+4, r24	; 0x04
 1fc:	8c 81       	ldd	r24, Y+4	; 0x04
 1fe:	9d 81       	ldd	r25, Y+5	; 0x05
 200:	dc 01       	movw	r26, r24
 202:	13 96       	adiw	r26, 0x03	; 3
 204:	7c 93       	st	X, r23
 206:	6e 93       	st	-X, r22
 208:	12 97       	sbiw	r26, 0x02	; 2
 20a:	7d 83       	std	Y+5, r23	; 0x05
 20c:	6c 83       	std	Y+4, r22	; 0x04
 20e:	31 87       	std	Z+9, r19	; 0x09
 210:	20 87       	std	Z+8, r18	; 0x08
 212:	f9 01       	movw	r30, r18
 214:	80 81       	ld	r24, Z
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 83       	st	Z, r24
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 226:	a0 85       	ldd	r26, Z+8	; 0x08
 228:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 22a:	c2 81       	ldd	r28, Z+2	; 0x02
 22c:	d3 81       	ldd	r29, Z+3	; 0x03
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	9d 83       	std	Y+5, r25	; 0x05
 234:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 236:	c4 81       	ldd	r28, Z+4	; 0x04
 238:	d5 81       	ldd	r29, Z+5	; 0x05
 23a:	82 81       	ldd	r24, Z+2	; 0x02
 23c:	93 81       	ldd	r25, Z+3	; 0x03
 23e:	9b 83       	std	Y+3, r25	; 0x03
 240:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 242:	11 96       	adiw	r26, 0x01	; 1
 244:	8d 91       	ld	r24, X+
 246:	9c 91       	ld	r25, X
 248:	12 97       	sbiw	r26, 0x02	; 2
 24a:	e8 17       	cp	r30, r24
 24c:	f9 07       	cpc	r31, r25
 24e:	31 f4       	brne	.+12     	; 0x25c <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 250:	84 81       	ldd	r24, Z+4	; 0x04
 252:	95 81       	ldd	r25, Z+5	; 0x05
 254:	12 96       	adiw	r26, 0x02	; 2
 256:	9c 93       	st	X, r25
 258:	8e 93       	st	-X, r24
 25a:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 25c:	11 86       	std	Z+9, r1	; 0x09
 25e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 260:	8c 91       	ld	r24, X
 262:	81 50       	subi	r24, 0x01	; 1
 264:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 266:	8c 91       	ld	r24, X
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 26e:	31 e1       	ldi	r19, 0x11	; 17
 270:	fc 01       	movw	r30, r24
 272:	30 83       	st	Z, r19
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	22 e2       	ldi	r18, 0x22	; 34
 278:	20 83       	st	Z, r18
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	a3 e3       	ldi	r26, 0x33	; 51
 27e:	a0 83       	st	Z, r26
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	60 83       	st	Z, r22
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	70 83       	st	Z, r23
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	10 82       	st	Z, r1
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	60 e8       	ldi	r22, 0x80	; 128
 290:	60 83       	st	Z, r22
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	10 82       	st	Z, r1
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	60 83       	st	Z, r22
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	60 83       	st	Z, r22
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	60 83       	st	Z, r22
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	65 e0       	ldi	r22, 0x05	; 5
 2ac:	60 83       	st	Z, r22
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	66 e0       	ldi	r22, 0x06	; 6
 2b2:	60 83       	st	Z, r22
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	67 e0       	ldi	r22, 0x07	; 7
 2b8:	60 83       	st	Z, r22
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	68 e0       	ldi	r22, 0x08	; 8
 2be:	60 83       	st	Z, r22
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	69 e0       	ldi	r22, 0x09	; 9
 2c4:	60 83       	st	Z, r22
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	60 e1       	ldi	r22, 0x10	; 16
 2ca:	60 83       	st	Z, r22
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	30 83       	st	Z, r19
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	32 e1       	ldi	r19, 0x12	; 18
 2d4:	30 83       	st	Z, r19
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	33 e1       	ldi	r19, 0x13	; 19
 2da:	30 83       	st	Z, r19
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	34 e1       	ldi	r19, 0x14	; 20
 2e0:	30 83       	st	Z, r19
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	35 e1       	ldi	r19, 0x15	; 21
 2e6:	30 83       	st	Z, r19
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	36 e1       	ldi	r19, 0x16	; 22
 2ec:	30 83       	st	Z, r19
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	37 e1       	ldi	r19, 0x17	; 23
 2f2:	30 83       	st	Z, r19
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	38 e1       	ldi	r19, 0x18	; 24
 2f8:	30 83       	st	Z, r19
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	39 e1       	ldi	r19, 0x19	; 25
 2fe:	30 83       	st	Z, r19
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	30 e2       	ldi	r19, 0x20	; 32
 304:	30 83       	st	Z, r19
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	31 e2       	ldi	r19, 0x21	; 33
 30a:	30 83       	st	Z, r19
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	20 83       	st	Z, r18
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	23 e2       	ldi	r18, 0x23	; 35
 314:	20 83       	st	Z, r18
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	40 83       	st	Z, r20
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	50 83       	st	Z, r21
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	26 e2       	ldi	r18, 0x26	; 38
 322:	20 83       	st	Z, r18
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	27 e2       	ldi	r18, 0x27	; 39
 328:	20 83       	st	Z, r18
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	28 e2       	ldi	r18, 0x28	; 40
 32e:	20 83       	st	Z, r18
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	29 e2       	ldi	r18, 0x29	; 41
 334:	20 83       	st	Z, r18
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	20 e3       	ldi	r18, 0x30	; 48
 33a:	20 83       	st	Z, r18
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	21 e3       	ldi	r18, 0x31	; 49
 340:	20 83       	st	Z, r18
 342:	86 97       	sbiw	r24, 0x26	; 38
 344:	08 95       	ret

00000346 <xPortStartScheduler>:
 346:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 34a:	89 ef       	ldi	r24, 0xF9	; 249
 34c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 350:	8b e0       	ldi	r24, 0x0B	; 11
 352:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 356:	ef e6       	ldi	r30, 0x6F	; 111
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	80 83       	st	Z, r24
 360:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 364:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 368:	cd 91       	ld	r28, X+
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	dd 91       	ld	r29, X+
 36e:	de bf       	out	0x3e, r29	; 62
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	7f 90       	pop	r7
 3a2:	6f 90       	pop	r6
 3a4:	5f 90       	pop	r5
 3a6:	4f 90       	pop	r4
 3a8:	3f 90       	pop	r3
 3aa:	2f 90       	pop	r2
 3ac:	1f 90       	pop	r1
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	08 95       	ret
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret

000003ba <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	0f 92       	push	r0
 3c2:	1f 92       	push	r1
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 92       	push	r2
 3c8:	3f 92       	push	r3
 3ca:	4f 92       	push	r4
 3cc:	5f 92       	push	r5
 3ce:	6f 92       	push	r6
 3d0:	7f 92       	push	r7
 3d2:	8f 92       	push	r8
 3d4:	9f 92       	push	r9
 3d6:	af 92       	push	r10
 3d8:	bf 92       	push	r11
 3da:	cf 92       	push	r12
 3dc:	df 92       	push	r13
 3de:	ef 92       	push	r14
 3e0:	ff 92       	push	r15
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ef 93       	push	r30
 400:	ff 93       	push	r31
 402:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 406:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 40a:	0d b6       	in	r0, 0x3d	; 61
 40c:	0d 92       	st	X+, r0
 40e:	0e b6       	in	r0, 0x3e	; 62
 410:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 412:	0e 94 79 05 	call	0xaf2	; 0xaf2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 416:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 41a:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 41e:	cd 91       	ld	r28, X+
 420:	cd bf       	out	0x3d, r28	; 61
 422:	dd 91       	ld	r29, X+
 424:	de bf       	out	0x3e, r29	; 62
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	7f 90       	pop	r7
 458:	6f 90       	pop	r6
 45a:	5f 90       	pop	r5
 45c:	4f 90       	pop	r4
 45e:	3f 90       	pop	r3
 460:	2f 90       	pop	r2
 462:	1f 90       	pop	r1
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0

	asm volatile ( "ret" );
 46a:	08 95       	ret

0000046c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	0f 92       	push	r0
 474:	1f 92       	push	r1
 476:	11 24       	eor	r1, r1
 478:	2f 92       	push	r2
 47a:	3f 92       	push	r3
 47c:	4f 92       	push	r4
 47e:	5f 92       	push	r5
 480:	6f 92       	push	r6
 482:	7f 92       	push	r7
 484:	8f 92       	push	r8
 486:	9f 92       	push	r9
 488:	af 92       	push	r10
 48a:	bf 92       	push	r11
 48c:	cf 92       	push	r12
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
 4b4:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 4b8:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 4bc:	0d b6       	in	r0, 0x3d	; 61
 4be:	0d 92       	st	X+, r0
 4c0:	0e b6       	in	r0, 0x3e	; 62
 4c2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 4c4:	0e 94 3f 04 	call	0x87e	; 0x87e <xTaskIncrementTick>
 4c8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 4ca:	0e 94 79 05 	call	0xaf2	; 0xaf2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 4ce:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 4d2:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 4d6:	cd 91       	ld	r28, X+
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	dd 91       	ld	r29, X+
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	bf 91       	pop	r27
 4e8:	af 91       	pop	r26
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	7f 91       	pop	r23
 4f0:	6f 91       	pop	r22
 4f2:	5f 91       	pop	r21
 4f4:	4f 91       	pop	r20
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	ef 90       	pop	r14
 502:	df 90       	pop	r13
 504:	cf 90       	pop	r12
 506:	bf 90       	pop	r11
 508:	af 90       	pop	r10
 50a:	9f 90       	pop	r9
 50c:	8f 90       	pop	r8
 50e:	7f 90       	pop	r7
 510:	6f 90       	pop	r6
 512:	5f 90       	pop	r5
 514:	4f 90       	pop	r4
 516:	3f 90       	pop	r3
 518:	2f 90       	pop	r2
 51a:	1f 90       	pop	r1
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0

	asm volatile ( "ret" );
 522:	08 95       	ret

00000524 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 524:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYieldFromTick>
		asm volatile ( "reti" );
 528:	18 95       	reti

0000052a <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 52a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 52e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 532:	80 81       	ld	r24, Z
 534:	81 11       	cpse	r24, r1
 536:	07 c0       	rjmp	.+14     	; 0x546 <prvResetNextTaskUnblockTime+0x1c>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 540:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 544:	08 95       	ret
 546:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 54a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 54e:	05 80       	ldd	r0, Z+5	; 0x05
 550:	f6 81       	ldd	r31, Z+6	; 0x06
 552:	e0 2d       	mov	r30, r0
 554:	06 80       	ldd	r0, Z+6	; 0x06
 556:	f7 81       	ldd	r31, Z+7	; 0x07
 558:	e0 2d       	mov	r30, r0
 55a:	82 81       	ldd	r24, Z+2	; 0x02
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 562:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 566:	08 95       	ret

00000568 <prvIdleTask>:
 568:	01 e2       	ldi	r16, 0x21	; 33
 56a:	11 e0       	ldi	r17, 0x01	; 1
 56c:	0f 2e       	mov	r0, r31
 56e:	f9 e4       	ldi	r31, 0x49	; 73
 570:	ef 2e       	mov	r14, r31
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	ff 2e       	mov	r15, r31
 576:	f0 2d       	mov	r31, r0
 578:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 57c:	88 23       	and	r24, r24
 57e:	29 f1       	breq	.+74     	; 0x5ca <prvIdleTask+0x62>
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	0f 92       	push	r0
 586:	d8 01       	movw	r26, r16
 588:	15 96       	adiw	r26, 0x05	; 5
 58a:	ed 91       	ld	r30, X+
 58c:	fc 91       	ld	r31, X
 58e:	16 97       	sbiw	r26, 0x06	; 6
 590:	c6 81       	ldd	r28, Z+6	; 0x06
 592:	d7 81       	ldd	r29, Z+7	; 0x07
 594:	ce 01       	movw	r24, r28
 596:	02 96       	adiw	r24, 0x02	; 2
 598:	0e 94 10 01 	call	0x220	; 0x220 <uxListRemove>
 59c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 5a0:	81 50       	subi	r24, 0x01	; 1
 5a2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 5a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 5aa:	81 50       	subi	r24, 0x01	; 1
 5ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	8f 89       	ldd	r24, Y+23	; 0x17
 5b6:	98 8d       	ldd	r25, Y+24	; 0x18
 5b8:	0e 94 ce 00 	call	0x19c	; 0x19c <vPortFree>
 5bc:	ce 01       	movw	r24, r28
 5be:	0e 94 ce 00 	call	0x19c	; 0x19c <vPortFree>
 5c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 5c6:	81 11       	cpse	r24, r1
 5c8:	db cf       	rjmp	.-74     	; 0x580 <prvIdleTask+0x18>
 5ca:	f7 01       	movw	r30, r14
 5cc:	80 81       	ld	r24, Z
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	98 f2       	brcs	.-90     	; 0x578 <prvIdleTask+0x10>
 5d2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <vPortYield>
 5d6:	d0 cf       	rjmp	.-96     	; 0x578 <prvIdleTask+0x10>

000005d8 <xTaskCreate>:
 5d8:	4f 92       	push	r4
 5da:	5f 92       	push	r5
 5dc:	6f 92       	push	r6
 5de:	7f 92       	push	r7
 5e0:	8f 92       	push	r8
 5e2:	9f 92       	push	r9
 5e4:	af 92       	push	r10
 5e6:	bf 92       	push	r11
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	4c 01       	movw	r8, r24
 5f8:	6b 01       	movw	r12, r22
 5fa:	5a 01       	movw	r10, r20
 5fc:	29 01       	movw	r4, r18
 5fe:	ca 01       	movw	r24, r20
 600:	0e 94 bf 00 	call	0x17e	; 0x17e <pvPortMalloc>
 604:	3c 01       	movw	r6, r24
 606:	89 2b       	or	r24, r25
 608:	09 f4       	brne	.+2      	; 0x60c <xTaskCreate+0x34>
 60a:	f8 c0       	rjmp	.+496    	; 0x7fc <xTaskCreate+0x224>
 60c:	8c e2       	ldi	r24, 0x2C	; 44
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 bf 00 	call	0x17e	; 0x17e <pvPortMalloc>
 614:	ec 01       	movw	r28, r24
 616:	89 2b       	or	r24, r25
 618:	c1 f0       	breq	.+48     	; 0x64a <xTaskCreate+0x72>
 61a:	78 8e       	std	Y+24, r7	; 0x18
 61c:	6f 8a       	std	Y+23, r6	; 0x17
 61e:	a5 01       	movw	r20, r10
 620:	65 ea       	ldi	r22, 0xA5	; 165
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	c3 01       	movw	r24, r6
 626:	0e 94 71 07 	call	0xee2	; 0xee2 <memset>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	a8 1a       	sub	r10, r24
 62e:	b1 08       	sbc	r11, r1
 630:	8f 89       	ldd	r24, Y+23	; 0x17
 632:	98 8d       	ldd	r25, Y+24	; 0x18
 634:	a8 0e       	add	r10, r24
 636:	b9 1e       	adc	r11, r25
 638:	bc a2       	std	Y+36, r11	; 0x24
 63a:	ab a2       	std	Y+35, r10	; 0x23
 63c:	d6 01       	movw	r26, r12
 63e:	8c 91       	ld	r24, X
 640:	89 8f       	std	Y+25, r24	; 0x19
 642:	8c 91       	ld	r24, X
 644:	81 11       	cpse	r24, r1
 646:	05 c0       	rjmp	.+10     	; 0x652 <xTaskCreate+0x7a>
 648:	18 c0       	rjmp	.+48     	; 0x67a <xTaskCreate+0xa2>
 64a:	c3 01       	movw	r24, r6
 64c:	0e 94 ce 00 	call	0x19c	; 0x19c <vPortFree>
 650:	d5 c0       	rjmp	.+426    	; 0x7fc <xTaskCreate+0x224>
 652:	ae 01       	movw	r20, r28
 654:	46 5e       	subi	r20, 0xE6	; 230
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	f6 01       	movw	r30, r12
 65a:	31 96       	adiw	r30, 0x01	; 1
 65c:	b8 e0       	ldi	r27, 0x08	; 8
 65e:	cb 0e       	add	r12, r27
 660:	d1 1c       	adc	r13, r1
 662:	cf 01       	movw	r24, r30
 664:	21 91       	ld	r18, Z+
 666:	da 01       	movw	r26, r20
 668:	2d 93       	st	X+, r18
 66a:	ad 01       	movw	r20, r26
 66c:	dc 01       	movw	r26, r24
 66e:	8c 91       	ld	r24, X
 670:	88 23       	and	r24, r24
 672:	19 f0       	breq	.+6      	; 0x67a <xTaskCreate+0xa2>
 674:	ec 15       	cp	r30, r12
 676:	fd 05       	cpc	r31, r13
 678:	a1 f7       	brne	.-24     	; 0x662 <xTaskCreate+0x8a>
 67a:	18 a2       	std	Y+32, r1	; 0x20
 67c:	04 30       	cpi	r16, 0x04	; 4
 67e:	08 f0       	brcs	.+2      	; 0x682 <xTaskCreate+0xaa>
 680:	03 e0       	ldi	r16, 0x03	; 3
 682:	0e 8b       	std	Y+22, r16	; 0x16
 684:	0d a3       	std	Y+37, r16	; 0x25
 686:	1e a2       	std	Y+38, r1	; 0x26
 688:	6e 01       	movw	r12, r28
 68a:	b2 e0       	ldi	r27, 0x02	; 2
 68c:	cb 0e       	add	r12, r27
 68e:	d1 1c       	adc	r13, r1
 690:	c6 01       	movw	r24, r12
 692:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <vListInitialiseItem>
 696:	ce 01       	movw	r24, r28
 698:	0c 96       	adiw	r24, 0x0c	; 12
 69a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <vListInitialiseItem>
 69e:	d9 87       	std	Y+9, r29	; 0x09
 6a0:	c8 87       	std	Y+8, r28	; 0x08
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	80 1b       	sub	r24, r16
 6a8:	91 09       	sbc	r25, r1
 6aa:	9d 87       	std	Y+13, r25	; 0x0d
 6ac:	8c 87       	std	Y+12, r24	; 0x0c
 6ae:	db 8b       	std	Y+19, r29	; 0x13
 6b0:	ca 8b       	std	Y+18, r28	; 0x12
 6b2:	1f a2       	std	Y+39, r1	; 0x27
 6b4:	18 a6       	std	Y+40, r1	; 0x28
 6b6:	19 a6       	std	Y+41, r1	; 0x29
 6b8:	1a a6       	std	Y+42, r1	; 0x2a
 6ba:	1b a6       	std	Y+43, r1	; 0x2b
 6bc:	a2 01       	movw	r20, r4
 6be:	b4 01       	movw	r22, r8
 6c0:	c5 01       	movw	r24, r10
 6c2:	0e 94 37 01 	call	0x26e	; 0x26e <pxPortInitialiseStack>
 6c6:	99 83       	std	Y+1, r25	; 0x01
 6c8:	88 83       	st	Y, r24
 6ca:	e1 14       	cp	r14, r1
 6cc:	f1 04       	cpc	r15, r1
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <xTaskCreate+0xfe>
 6d0:	f7 01       	movw	r30, r14
 6d2:	d1 83       	std	Z+1, r29	; 0x01
 6d4:	c0 83       	st	Z, r28
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	0f 92       	push	r0
 6dc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 6e0:	8f 5f       	subi	r24, 0xFF	; 255
 6e2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 6e6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
 6ea:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 6ee:	89 2b       	or	r24, r25
 6f0:	a9 f5       	brne	.+106    	; 0x75c <xTaskCreate+0x184>
 6f2:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
 6f6:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
 6fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	e9 f5       	brne	.+122    	; 0x77c <xTaskCreate+0x1a4>
 702:	89 e4       	ldi	r24, 0x49	; 73
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 70a:	82 e5       	ldi	r24, 0x52	; 82
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 712:	8b e5       	ldi	r24, 0x5B	; 91
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 71a:	84 e6       	ldi	r24, 0x64	; 100
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 722:	80 e4       	ldi	r24, 0x40	; 64
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 72a:	87 e3       	ldi	r24, 0x37	; 55
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 732:	8a e2       	ldi	r24, 0x2A	; 42
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 73a:	81 e2       	ldi	r24, 0x21	; 33
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialise>
 742:	80 e4       	ldi	r24, 0x40	; 64
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <pxDelayedTaskList+0x1>
 74a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <pxDelayedTaskList>
 74e:	87 e3       	ldi	r24, 0x37	; 55
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 756:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
 75a:	10 c0       	rjmp	.+32     	; 0x77c <xTaskCreate+0x1a4>
 75c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 760:	81 11       	cpse	r24, r1
 762:	0c c0       	rjmp	.+24     	; 0x77c <xTaskCreate+0x1a4>
 764:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 768:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 76c:	96 89       	ldd	r25, Z+22	; 0x16
 76e:	8e 89       	ldd	r24, Y+22	; 0x16
 770:	89 17       	cp	r24, r25
 772:	20 f0       	brcs	.+8      	; 0x77c <xTaskCreate+0x1a4>
 774:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
 778:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
 77c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 780:	8f 5f       	subi	r24, 0xFF	; 255
 782:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 786:	e0 90 6d 01 	lds	r14, 0x016D	; 0x80016d <pxCurrentTCB>
 78a:	f0 90 6e 01 	lds	r15, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 78e:	6b a1       	ldd	r22, Y+35	; 0x23
 790:	7c a1       	ldd	r23, Y+36	; 0x24
 792:	88 81       	ld	r24, Y
 794:	99 81       	ldd	r25, Y+1	; 0x01
 796:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 79a:	d7 01       	movw	r26, r14
 79c:	92 96       	adiw	r26, 0x22	; 34
 79e:	9c 93       	st	X, r25
 7a0:	8e 93       	st	-X, r24
 7a2:	91 97       	sbiw	r26, 0x21	; 33
 7a4:	8e 89       	ldd	r24, Y+22	; 0x16
 7a6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 7aa:	98 17       	cp	r25, r24
 7ac:	10 f4       	brcc	.+4      	; 0x7b2 <xTaskCreate+0x1da>
 7ae:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	9c 01       	movw	r18, r24
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	22 0f       	add	r18, r18
 7c0:	33 1f       	adc	r19, r19
 7c2:	82 0f       	add	r24, r18
 7c4:	93 1f       	adc	r25, r19
 7c6:	b6 01       	movw	r22, r12
 7c8:	87 5b       	subi	r24, 0xB7	; 183
 7ca:	9e 4f       	sbci	r25, 0xFE	; 254
 7cc:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 7d8:	88 23       	and	r24, r24
 7da:	61 f0       	breq	.+24     	; 0x7f4 <xTaskCreate+0x21c>
 7dc:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 7e0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 7e4:	96 89       	ldd	r25, Z+22	; 0x16
 7e6:	8e 89       	ldd	r24, Y+22	; 0x16
 7e8:	98 17       	cp	r25, r24
 7ea:	30 f4       	brcc	.+12     	; 0x7f8 <xTaskCreate+0x220>
 7ec:	0e 94 dd 01 	call	0x3ba	; 0x3ba <vPortYield>
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	05 c0       	rjmp	.+10     	; 0x7fe <xTaskCreate+0x226>
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	03 c0       	rjmp	.+6      	; 0x7fe <xTaskCreate+0x226>
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <xTaskCreate+0x226>
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	0f 91       	pop	r16
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	df 90       	pop	r13
 80a:	cf 90       	pop	r12
 80c:	bf 90       	pop	r11
 80e:	af 90       	pop	r10
 810:	9f 90       	pop	r9
 812:	8f 90       	pop	r8
 814:	7f 90       	pop	r7
 816:	6f 90       	pop	r6
 818:	5f 90       	pop	r5
 81a:	4f 90       	pop	r4
 81c:	08 95       	ret

0000081e <vTaskStartScheduler>:
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	0f 2e       	mov	r0, r31
 826:	f3 e1       	ldi	r31, 0x13	; 19
 828:	ef 2e       	mov	r14, r31
 82a:	f1 e0       	ldi	r31, 0x01	; 1
 82c:	ff 2e       	mov	r15, r31
 82e:	f0 2d       	mov	r31, r0
 830:	00 e0       	ldi	r16, 0x00	; 0
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	44 e6       	ldi	r20, 0x64	; 100
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	66 e0       	ldi	r22, 0x06	; 6
 83c:	71 e0       	ldi	r23, 0x01	; 1
 83e:	84 eb       	ldi	r24, 0xB4	; 180
 840:	92 e0       	ldi	r25, 0x02	; 2
 842:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <xTaskCreate>
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	81 f4       	brne	.+32     	; 0x86a <vTaskStartScheduler+0x4c>
 84a:	f8 94       	cli
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	9f ef       	ldi	r25, 0xFF	; 255
 850:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 854:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 85e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 862:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 866:	0e 94 a3 01 	call	0x346	; 0x346 <xPortStartScheduler>
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	08 95       	ret

00000872 <vTaskSuspendAll>:
 872:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 876:	8f 5f       	subi	r24, 0xFF	; 255
 878:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 87c:	08 95       	ret

0000087e <xTaskIncrementTick>:
 87e:	cf 92       	push	r12
 880:	df 92       	push	r13
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 892:	81 11       	cpse	r24, r1
 894:	99 c0       	rjmp	.+306    	; 0x9c8 <__stack+0xc9>
 896:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 89a:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	e8 1a       	sub	r14, r24
 8a2:	f8 0a       	sbc	r15, r24
 8a4:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 8a8:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 8ac:	e1 14       	cp	r14, r1
 8ae:	f1 04       	cpc	r15, r1
 8b0:	b9 f4       	brne	.+46     	; 0x8e0 <xTaskIncrementTick+0x62>
 8b2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <pxDelayedTaskList>
 8b6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 8ba:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pxOverflowDelayedTaskList>
 8be:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 8c2:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <pxDelayedTaskList+0x1>
 8c6:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <pxDelayedTaskList>
 8ca:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 8ce:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
 8d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 8d6:	8f 5f       	subi	r24, 0xFF	; 255
 8d8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 8dc:	0e 94 95 02 	call	0x52a	; 0x52a <prvResetNextTaskUnblockTime>
 8e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 8e4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 8e8:	e8 16       	cp	r14, r24
 8ea:	f9 06       	cpc	r15, r25
 8ec:	10 f4       	brcc	.+4      	; 0x8f2 <xTaskIncrementTick+0x74>
 8ee:	d1 2c       	mov	r13, r1
 8f0:	53 c0       	rjmp	.+166    	; 0x998 <__stack+0x99>
 8f2:	d1 2c       	mov	r13, r1
 8f4:	cc 24       	eor	r12, r12
 8f6:	c3 94       	inc	r12
 8f8:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 8fc:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 900:	80 81       	ld	r24, Z
 902:	81 11       	cpse	r24, r1
 904:	07 c0       	rjmp	.+14     	; 0x914 <__stack+0x15>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 90e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 912:	42 c0       	rjmp	.+132    	; 0x998 <__stack+0x99>
 914:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 918:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 91c:	05 80       	ldd	r0, Z+5	; 0x05
 91e:	f6 81       	ldd	r31, Z+6	; 0x06
 920:	e0 2d       	mov	r30, r0
 922:	c6 81       	ldd	r28, Z+6	; 0x06
 924:	d7 81       	ldd	r29, Z+7	; 0x07
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	9b 81       	ldd	r25, Y+3	; 0x03
 92a:	e8 16       	cp	r14, r24
 92c:	f9 06       	cpc	r15, r25
 92e:	28 f4       	brcc	.+10     	; 0x93a <__stack+0x3b>
 930:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 934:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 938:	2f c0       	rjmp	.+94     	; 0x998 <__stack+0x99>
 93a:	8e 01       	movw	r16, r28
 93c:	0e 5f       	subi	r16, 0xFE	; 254
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	c8 01       	movw	r24, r16
 942:	0e 94 10 01 	call	0x220	; 0x220 <uxListRemove>
 946:	8c 89       	ldd	r24, Y+20	; 0x14
 948:	9d 89       	ldd	r25, Y+21	; 0x15
 94a:	89 2b       	or	r24, r25
 94c:	21 f0       	breq	.+8      	; 0x956 <__stack+0x57>
 94e:	ce 01       	movw	r24, r28
 950:	0c 96       	adiw	r24, 0x0c	; 12
 952:	0e 94 10 01 	call	0x220	; 0x220 <uxListRemove>
 956:	8e 89       	ldd	r24, Y+22	; 0x16
 958:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 95c:	98 17       	cp	r25, r24
 95e:	10 f4       	brcc	.+4      	; 0x964 <__stack+0x65>
 960:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	9c 01       	movw	r18, r24
 968:	22 0f       	add	r18, r18
 96a:	33 1f       	adc	r19, r19
 96c:	22 0f       	add	r18, r18
 96e:	33 1f       	adc	r19, r19
 970:	22 0f       	add	r18, r18
 972:	33 1f       	adc	r19, r19
 974:	82 0f       	add	r24, r18
 976:	93 1f       	adc	r25, r19
 978:	b8 01       	movw	r22, r16
 97a:	87 5b       	subi	r24, 0xB7	; 183
 97c:	9e 4f       	sbci	r25, 0xFE	; 254
 97e:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
 982:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 986:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 98a:	9e 89       	ldd	r25, Y+22	; 0x16
 98c:	86 89       	ldd	r24, Z+22	; 0x16
 98e:	98 17       	cp	r25, r24
 990:	08 f4       	brcc	.+2      	; 0x994 <__stack+0x95>
 992:	b2 cf       	rjmp	.-156    	; 0x8f8 <xTaskIncrementTick+0x7a>
 994:	dc 2c       	mov	r13, r12
 996:	b0 cf       	rjmp	.-160    	; 0x8f8 <xTaskIncrementTick+0x7a>
 998:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 99c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 9a0:	86 89       	ldd	r24, Z+22	; 0x16
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	fc 01       	movw	r30, r24
 9a6:	ee 0f       	add	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	ee 0f       	add	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	8e 0f       	add	r24, r30
 9b4:	9f 1f       	adc	r25, r31
 9b6:	fc 01       	movw	r30, r24
 9b8:	e7 5b       	subi	r30, 0xB7	; 183
 9ba:	fe 4f       	sbci	r31, 0xFE	; 254
 9bc:	80 81       	ld	r24, Z
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	48 f0       	brcs	.+18     	; 0x9d4 <__stack+0xd5>
 9c2:	dd 24       	eor	r13, r13
 9c4:	d3 94       	inc	r13
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__stack+0xd5>
 9c8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
 9ce:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 9d2:	d1 2c       	mov	r13, r1
 9d4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 9d8:	88 23       	and	r24, r24
 9da:	11 f0       	breq	.+4      	; 0x9e0 <__stack+0xe1>
 9dc:	dd 24       	eor	r13, r13
 9de:	d3 94       	inc	r13
 9e0:	8d 2d       	mov	r24, r13
 9e2:	df 91       	pop	r29
 9e4:	cf 91       	pop	r28
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	ff 90       	pop	r15
 9ec:	ef 90       	pop	r14
 9ee:	df 90       	pop	r13
 9f0:	cf 90       	pop	r12
 9f2:	08 95       	ret

000009f4 <xTaskResumeAll>:
 9f4:	df 92       	push	r13
 9f6:	ef 92       	push	r14
 9f8:	ff 92       	push	r15
 9fa:	0f 93       	push	r16
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	f8 94       	cli
 a06:	0f 92       	push	r0
 a08:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a0c:	81 50       	subi	r24, 0x01	; 1
 a0e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 a12:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a16:	81 11       	cpse	r24, r1
 a18:	5f c0       	rjmp	.+190    	; 0xad8 <xTaskResumeAll+0xe4>
 a1a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 a1e:	81 11       	cpse	r24, r1
 a20:	33 c0       	rjmp	.+102    	; 0xa88 <xTaskResumeAll+0x94>
 a22:	5d c0       	rjmp	.+186    	; 0xade <xTaskResumeAll+0xea>
 a24:	d7 01       	movw	r26, r14
 a26:	15 96       	adiw	r26, 0x05	; 5
 a28:	ed 91       	ld	r30, X+
 a2a:	fc 91       	ld	r31, X
 a2c:	16 97       	sbiw	r26, 0x06	; 6
 a2e:	c6 81       	ldd	r28, Z+6	; 0x06
 a30:	d7 81       	ldd	r29, Z+7	; 0x07
 a32:	ce 01       	movw	r24, r28
 a34:	0c 96       	adiw	r24, 0x0c	; 12
 a36:	0e 94 10 01 	call	0x220	; 0x220 <uxListRemove>
 a3a:	8e 01       	movw	r16, r28
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	c8 01       	movw	r24, r16
 a42:	0e 94 10 01 	call	0x220	; 0x220 <uxListRemove>
 a46:	8e 89       	ldd	r24, Y+22	; 0x16
 a48:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 a4c:	98 17       	cp	r25, r24
 a4e:	10 f4       	brcc	.+4      	; 0xa54 <xTaskResumeAll+0x60>
 a50:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	9c 01       	movw	r18, r24
 a58:	22 0f       	add	r18, r18
 a5a:	33 1f       	adc	r19, r19
 a5c:	22 0f       	add	r18, r18
 a5e:	33 1f       	adc	r19, r19
 a60:	22 0f       	add	r18, r18
 a62:	33 1f       	adc	r19, r19
 a64:	82 0f       	add	r24, r18
 a66:	93 1f       	adc	r25, r19
 a68:	b8 01       	movw	r22, r16
 a6a:	87 5b       	subi	r24, 0xB7	; 183
 a6c:	9e 4f       	sbci	r25, 0xFE	; 254
 a6e:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
 a72:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 a76:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 a7a:	9e 89       	ldd	r25, Y+22	; 0x16
 a7c:	86 89       	ldd	r24, Z+22	; 0x16
 a7e:	98 17       	cp	r25, r24
 a80:	68 f0       	brcs	.+26     	; 0xa9c <xTaskResumeAll+0xa8>
 a82:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 a86:	0a c0       	rjmp	.+20     	; 0xa9c <xTaskResumeAll+0xa8>
 a88:	c0 e0       	ldi	r28, 0x00	; 0
 a8a:	d0 e0       	ldi	r29, 0x00	; 0
 a8c:	0f 2e       	mov	r0, r31
 a8e:	fa e2       	ldi	r31, 0x2A	; 42
 a90:	ef 2e       	mov	r14, r31
 a92:	f1 e0       	ldi	r31, 0x01	; 1
 a94:	ff 2e       	mov	r15, r31
 a96:	f0 2d       	mov	r31, r0
 a98:	dd 24       	eor	r13, r13
 a9a:	d3 94       	inc	r13
 a9c:	f7 01       	movw	r30, r14
 a9e:	80 81       	ld	r24, Z
 aa0:	81 11       	cpse	r24, r1
 aa2:	c0 cf       	rjmp	.-128    	; 0xa24 <xTaskResumeAll+0x30>
 aa4:	cd 2b       	or	r28, r29
 aa6:	11 f0       	breq	.+4      	; 0xaac <xTaskResumeAll+0xb8>
 aa8:	0e 94 95 02 	call	0x52a	; 0x52a <prvResetNextTaskUnblockTime>
 aac:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 ab0:	cc 23       	and	r28, r28
 ab2:	51 f0       	breq	.+20     	; 0xac8 <xTaskResumeAll+0xd4>
 ab4:	d1 e0       	ldi	r29, 0x01	; 1
 ab6:	0e 94 3f 04 	call	0x87e	; 0x87e <xTaskIncrementTick>
 aba:	81 11       	cpse	r24, r1
 abc:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 ac0:	c1 50       	subi	r28, 0x01	; 1
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <xTaskResumeAll+0xc2>
 ac4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 ac8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 acc:	88 23       	and	r24, r24
 ace:	31 f0       	breq	.+12     	; 0xadc <xTaskResumeAll+0xe8>
 ad0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <vPortYield>
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	03 c0       	rjmp	.+6      	; 0xade <xTaskResumeAll+0xea>
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	01 c0       	rjmp	.+2      	; 0xade <xTaskResumeAll+0xea>
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	0f 90       	pop	r0
 ae0:	0f be       	out	0x3f, r0	; 63
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	ff 90       	pop	r15
 aec:	ef 90       	pop	r14
 aee:	df 90       	pop	r13
 af0:	08 95       	ret

00000af2 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 af6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 afa:	88 23       	and	r24, r24
 afc:	21 f0       	breq	.+8      	; 0xb06 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 b04:	91 c0       	rjmp	.+290    	; 0xc28 <vTaskSwitchContext+0x136>
	}
	else
	{
		xYieldPending = pdFALSE;
 b06:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 b0a:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
 b0e:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 b12:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 b16:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 b1a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 b1e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 b22:	93 96       	adiw	r26, 0x23	; 35
 b24:	6d 91       	ld	r22, X+
 b26:	7c 91       	ld	r23, X
 b28:	94 97       	sbiw	r26, 0x24	; 36
 b2a:	80 81       	ld	r24, Z
 b2c:	91 81       	ldd	r25, Z+1	; 0x01
 b2e:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 b32:	9a a3       	std	Y+34, r25	; 0x22
 b34:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 b36:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 b3a:	82 2f       	mov	r24, r18
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	fc 01       	movw	r30, r24
 b40:	ee 0f       	add	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	ee 0f       	add	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	ee 0f       	add	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	e8 0f       	add	r30, r24
 b4e:	f9 1f       	adc	r31, r25
 b50:	e7 5b       	subi	r30, 0xB7	; 183
 b52:	fe 4f       	sbci	r31, 0xFE	; 254
 b54:	30 81       	ld	r19, Z
 b56:	31 11       	cpse	r19, r1
 b58:	11 c0       	rjmp	.+34     	; 0xb7c <vTaskSwitchContext+0x8a>
 b5a:	21 50       	subi	r18, 0x01	; 1
 b5c:	82 2f       	mov	r24, r18
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	fc 01       	movw	r30, r24
 b62:	ee 0f       	add	r30, r30
 b64:	ff 1f       	adc	r31, r31
 b66:	ee 0f       	add	r30, r30
 b68:	ff 1f       	adc	r31, r31
 b6a:	ee 0f       	add	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	e8 0f       	add	r30, r24
 b70:	f9 1f       	adc	r31, r25
 b72:	e7 5b       	subi	r30, 0xB7	; 183
 b74:	fe 4f       	sbci	r31, 0xFE	; 254
 b76:	30 81       	ld	r19, Z
 b78:	33 23       	and	r19, r19
 b7a:	79 f3       	breq	.-34     	; 0xb5a <vTaskSwitchContext+0x68>
 b7c:	ac 01       	movw	r20, r24
 b7e:	44 0f       	add	r20, r20
 b80:	55 1f       	adc	r21, r21
 b82:	44 0f       	add	r20, r20
 b84:	55 1f       	adc	r21, r21
 b86:	44 0f       	add	r20, r20
 b88:	55 1f       	adc	r21, r21
 b8a:	48 0f       	add	r20, r24
 b8c:	59 1f       	adc	r21, r25
 b8e:	da 01       	movw	r26, r20
 b90:	a7 5b       	subi	r26, 0xB7	; 183
 b92:	be 4f       	sbci	r27, 0xFE	; 254
 b94:	11 96       	adiw	r26, 0x01	; 1
 b96:	ed 91       	ld	r30, X+
 b98:	fc 91       	ld	r31, X
 b9a:	12 97       	sbiw	r26, 0x02	; 2
 b9c:	02 80       	ldd	r0, Z+2	; 0x02
 b9e:	f3 81       	ldd	r31, Z+3	; 0x03
 ba0:	e0 2d       	mov	r30, r0
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	fc 93       	st	X, r31
 ba6:	ee 93       	st	-X, r30
 ba8:	11 97       	sbiw	r26, 0x01	; 1
 baa:	44 5b       	subi	r20, 0xB4	; 180
 bac:	5e 4f       	sbci	r21, 0xFE	; 254
 bae:	e4 17       	cp	r30, r20
 bb0:	f5 07       	cpc	r31, r21
 bb2:	29 f4       	brne	.+10     	; 0xbbe <vTaskSwitchContext+0xcc>
 bb4:	42 81       	ldd	r20, Z+2	; 0x02
 bb6:	53 81       	ldd	r21, Z+3	; 0x03
 bb8:	fd 01       	movw	r30, r26
 bba:	52 83       	std	Z+2, r21	; 0x02
 bbc:	41 83       	std	Z+1, r20	; 0x01
 bbe:	fc 01       	movw	r30, r24
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	ee 0f       	add	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	8e 0f       	add	r24, r30
 bce:	9f 1f       	adc	r25, r31
 bd0:	fc 01       	movw	r30, r24
 bd2:	e7 5b       	subi	r30, 0xB7	; 183
 bd4:	fe 4f       	sbci	r31, 0xFE	; 254
 bd6:	01 80       	ldd	r0, Z+1	; 0x01
 bd8:	f2 81       	ldd	r31, Z+2	; 0x02
 bda:	e0 2d       	mov	r30, r0
 bdc:	86 81       	ldd	r24, Z+6	; 0x06
 bde:	97 81       	ldd	r25, Z+7	; 0x07
 be0:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <pxCurrentTCB+0x1>
 be4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <pxCurrentTCB>
 be8:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 bec:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 bf0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 bf4:	c1 a1       	ldd	r28, Z+33	; 0x21
 bf6:	d2 a1       	ldd	r29, Z+34	; 0x22
 bf8:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 bfc:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 c00:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 c04:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 c08:	93 96       	adiw	r26, 0x23	; 35
 c0a:	6d 91       	ld	r22, X+
 c0c:	7c 91       	ld	r23, X
 c0e:	94 97       	sbiw	r26, 0x24	; 36
 c10:	80 81       	ld	r24, Z
 c12:	91 81       	ldd	r25, Z+1	; 0x01
 c14:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 c18:	c8 17       	cp	r28, r24
 c1a:	d9 07       	cpc	r29, r25
 c1c:	19 f4       	brne	.+6      	; 0xc24 <vTaskSwitchContext+0x132>
 c1e:	0e 94 b3 00 	call	0x166	; 0x166 <vApplicationTaskChecksumSucceedHook>
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <vTaskSwitchContext+0x136>
 c24:	0e 94 be 00 	call	0x17c	; 0x17c <vApplicationTaskChecksumFailedHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	08 95       	ret

00000c2e <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 c2e:	cf 93       	push	r28
 c30:	df 93       	push	r29
 c32:	00 d0       	rcall	.+0      	; 0xc34 <_Z7task_txPv+0x6>
 c34:	cd b7       	in	r28, 0x3d	; 61
 c36:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
 c38:	8d e2       	ldi	r24, 0x2D	; 45
 c3a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 c3c:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
 c3e:	82 e3       	ldi	r24, 0x32	; 50
 c40:	89 83       	std	Y+1, r24	; 0x01
 c42:	fe cf       	rjmp	.-4      	; 0xc40 <_Z7task_txPv+0x12>

00000c44 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
 c44:	cf 93       	push	r28
 c46:	df 93       	push	r29
 c48:	00 d0       	rcall	.+0      	; 0xc4a <_Z7task_rxPv+0x6>
 c4a:	cd b7       	in	r28, 0x3d	; 61
 c4c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
 c4e:	85 e5       	ldi	r24, 0x55	; 85
 c50:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 c52:	8d e2       	ldi	r24, 0x2D	; 45
 c54:	8a 83       	std	Y+2, r24	; 0x02
 c56:	ff cf       	rjmp	.-2      	; 0xc56 <_Z7task_rxPv+0x12>

00000c58 <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
 c58:	ef 92       	push	r14
 c5a:	ff 92       	push	r15
 c5c:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 c5e:	8f ef       	ldi	r24, 0xFF	; 255
 c60:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 c62:	e1 2c       	mov	r14, r1
 c64:	f1 2c       	mov	r15, r1
 c66:	01 e0       	ldi	r16, 0x01	; 1
 c68:	20 e0       	ldi	r18, 0x00	; 0
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	44 e6       	ldi	r20, 0x64	; 100
 c6e:	50 e0       	ldi	r21, 0x00	; 0
 c70:	6b e0       	ldi	r22, 0x0B	; 11
 c72:	71 e0       	ldi	r23, 0x01	; 1
 c74:	87 e1       	ldi	r24, 0x17	; 23
 c76:	96 e0       	ldi	r25, 0x06	; 6
 c78:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 c7c:	20 e0       	ldi	r18, 0x00	; 0
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	44 e6       	ldi	r20, 0x64	; 100
 c82:	50 e0       	ldi	r21, 0x00	; 0
 c84:	6e e0       	ldi	r22, 0x0E	; 14
 c86:	71 e0       	ldi	r23, 0x01	; 1
 c88:	82 e2       	ldi	r24, 0x22	; 34
 c8a:	96 e0       	ldi	r25, 0x06	; 6
 c8c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <xTaskCreate>
	vTaskStartScheduler();
 c90:	0e 94 0f 04 	call	0x81e	; 0x81e <vTaskStartScheduler>
	
	return 0;
}
 c94:	80 e0       	ldi	r24, 0x00	; 0
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	0f 91       	pop	r16
 c9a:	ff 90       	pop	r15
 c9c:	ef 90       	pop	r14
 c9e:	08 95       	ret

00000ca0 <malloc>:
 ca0:	0f 93       	push	r16
 ca2:	1f 93       	push	r17
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	82 30       	cpi	r24, 0x02	; 2
 caa:	91 05       	cpc	r25, r1
 cac:	10 f4       	brcc	.+4      	; 0xcb2 <malloc+0x12>
 cae:	82 e0       	ldi	r24, 0x02	; 2
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__flp>
 cb6:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__flp+0x1>
 cba:	20 e0       	ldi	r18, 0x00	; 0
 cbc:	30 e0       	ldi	r19, 0x00	; 0
 cbe:	a0 e0       	ldi	r26, 0x00	; 0
 cc0:	b0 e0       	ldi	r27, 0x00	; 0
 cc2:	30 97       	sbiw	r30, 0x00	; 0
 cc4:	19 f1       	breq	.+70     	; 0xd0c <malloc+0x6c>
 cc6:	40 81       	ld	r20, Z
 cc8:	51 81       	ldd	r21, Z+1	; 0x01
 cca:	02 81       	ldd	r16, Z+2	; 0x02
 ccc:	13 81       	ldd	r17, Z+3	; 0x03
 cce:	48 17       	cp	r20, r24
 cd0:	59 07       	cpc	r21, r25
 cd2:	c8 f0       	brcs	.+50     	; 0xd06 <malloc+0x66>
 cd4:	84 17       	cp	r24, r20
 cd6:	95 07       	cpc	r25, r21
 cd8:	69 f4       	brne	.+26     	; 0xcf4 <malloc+0x54>
 cda:	10 97       	sbiw	r26, 0x00	; 0
 cdc:	31 f0       	breq	.+12     	; 0xcea <malloc+0x4a>
 cde:	12 96       	adiw	r26, 0x02	; 2
 ce0:	0c 93       	st	X, r16
 ce2:	12 97       	sbiw	r26, 0x02	; 2
 ce4:	13 96       	adiw	r26, 0x03	; 3
 ce6:	1c 93       	st	X, r17
 ce8:	27 c0       	rjmp	.+78     	; 0xd38 <malloc+0x98>
 cea:	00 93 71 01 	sts	0x0171, r16	; 0x800171 <__flp>
 cee:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <__flp+0x1>
 cf2:	22 c0       	rjmp	.+68     	; 0xd38 <malloc+0x98>
 cf4:	21 15       	cp	r18, r1
 cf6:	31 05       	cpc	r19, r1
 cf8:	19 f0       	breq	.+6      	; 0xd00 <malloc+0x60>
 cfa:	42 17       	cp	r20, r18
 cfc:	53 07       	cpc	r21, r19
 cfe:	18 f4       	brcc	.+6      	; 0xd06 <malloc+0x66>
 d00:	9a 01       	movw	r18, r20
 d02:	bd 01       	movw	r22, r26
 d04:	ef 01       	movw	r28, r30
 d06:	df 01       	movw	r26, r30
 d08:	f8 01       	movw	r30, r16
 d0a:	db cf       	rjmp	.-74     	; 0xcc2 <malloc+0x22>
 d0c:	21 15       	cp	r18, r1
 d0e:	31 05       	cpc	r19, r1
 d10:	f9 f0       	breq	.+62     	; 0xd50 <malloc+0xb0>
 d12:	28 1b       	sub	r18, r24
 d14:	39 0b       	sbc	r19, r25
 d16:	24 30       	cpi	r18, 0x04	; 4
 d18:	31 05       	cpc	r19, r1
 d1a:	80 f4       	brcc	.+32     	; 0xd3c <malloc+0x9c>
 d1c:	8a 81       	ldd	r24, Y+2	; 0x02
 d1e:	9b 81       	ldd	r25, Y+3	; 0x03
 d20:	61 15       	cp	r22, r1
 d22:	71 05       	cpc	r23, r1
 d24:	21 f0       	breq	.+8      	; 0xd2e <malloc+0x8e>
 d26:	fb 01       	movw	r30, r22
 d28:	93 83       	std	Z+3, r25	; 0x03
 d2a:	82 83       	std	Z+2, r24	; 0x02
 d2c:	04 c0       	rjmp	.+8      	; 0xd36 <malloc+0x96>
 d2e:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__flp+0x1>
 d32:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__flp>
 d36:	fe 01       	movw	r30, r28
 d38:	32 96       	adiw	r30, 0x02	; 2
 d3a:	44 c0       	rjmp	.+136    	; 0xdc4 <malloc+0x124>
 d3c:	fe 01       	movw	r30, r28
 d3e:	e2 0f       	add	r30, r18
 d40:	f3 1f       	adc	r31, r19
 d42:	81 93       	st	Z+, r24
 d44:	91 93       	st	Z+, r25
 d46:	22 50       	subi	r18, 0x02	; 2
 d48:	31 09       	sbc	r19, r1
 d4a:	39 83       	std	Y+1, r19	; 0x01
 d4c:	28 83       	st	Y, r18
 d4e:	3a c0       	rjmp	.+116    	; 0xdc4 <malloc+0x124>
 d50:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
 d54:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
 d58:	23 2b       	or	r18, r19
 d5a:	41 f4       	brne	.+16     	; 0xd6c <malloc+0xcc>
 d5c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d60:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 d64:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <__brkval+0x1>
 d68:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <__brkval>
 d6c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 d70:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 d74:	21 15       	cp	r18, r1
 d76:	31 05       	cpc	r19, r1
 d78:	41 f4       	brne	.+16     	; 0xd8a <malloc+0xea>
 d7a:	2d b7       	in	r18, 0x3d	; 61
 d7c:	3e b7       	in	r19, 0x3e	; 62
 d7e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d82:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d86:	24 1b       	sub	r18, r20
 d88:	35 0b       	sbc	r19, r21
 d8a:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <__brkval>
 d8e:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <__brkval+0x1>
 d92:	e2 17       	cp	r30, r18
 d94:	f3 07       	cpc	r31, r19
 d96:	a0 f4       	brcc	.+40     	; 0xdc0 <malloc+0x120>
 d98:	2e 1b       	sub	r18, r30
 d9a:	3f 0b       	sbc	r19, r31
 d9c:	28 17       	cp	r18, r24
 d9e:	39 07       	cpc	r19, r25
 da0:	78 f0       	brcs	.+30     	; 0xdc0 <malloc+0x120>
 da2:	ac 01       	movw	r20, r24
 da4:	4e 5f       	subi	r20, 0xFE	; 254
 da6:	5f 4f       	sbci	r21, 0xFF	; 255
 da8:	24 17       	cp	r18, r20
 daa:	35 07       	cpc	r19, r21
 dac:	48 f0       	brcs	.+18     	; 0xdc0 <malloc+0x120>
 dae:	4e 0f       	add	r20, r30
 db0:	5f 1f       	adc	r21, r31
 db2:	50 93 70 01 	sts	0x0170, r21	; 0x800170 <__brkval+0x1>
 db6:	40 93 6f 01 	sts	0x016F, r20	; 0x80016f <__brkval>
 dba:	81 93       	st	Z+, r24
 dbc:	91 93       	st	Z+, r25
 dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <malloc+0x124>
 dc0:	e0 e0       	ldi	r30, 0x00	; 0
 dc2:	f0 e0       	ldi	r31, 0x00	; 0
 dc4:	cf 01       	movw	r24, r30
 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	1f 91       	pop	r17
 dcc:	0f 91       	pop	r16
 dce:	08 95       	ret

00000dd0 <free>:
 dd0:	cf 93       	push	r28
 dd2:	df 93       	push	r29
 dd4:	00 97       	sbiw	r24, 0x00	; 0
 dd6:	09 f4       	brne	.+2      	; 0xdda <free+0xa>
 dd8:	81 c0       	rjmp	.+258    	; 0xedc <free+0x10c>
 dda:	fc 01       	movw	r30, r24
 ddc:	32 97       	sbiw	r30, 0x02	; 2
 dde:	13 82       	std	Z+3, r1	; 0x03
 de0:	12 82       	std	Z+2, r1	; 0x02
 de2:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <__flp>
 de6:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <__flp+0x1>
 dea:	10 97       	sbiw	r26, 0x00	; 0
 dec:	81 f4       	brne	.+32     	; 0xe0e <free+0x3e>
 dee:	20 81       	ld	r18, Z
 df0:	31 81       	ldd	r19, Z+1	; 0x01
 df2:	82 0f       	add	r24, r18
 df4:	93 1f       	adc	r25, r19
 df6:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
 dfa:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
 dfe:	28 17       	cp	r18, r24
 e00:	39 07       	cpc	r19, r25
 e02:	51 f5       	brne	.+84     	; 0xe58 <free+0x88>
 e04:	f0 93 70 01 	sts	0x0170, r31	; 0x800170 <__brkval+0x1>
 e08:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <__brkval>
 e0c:	67 c0       	rjmp	.+206    	; 0xedc <free+0x10c>
 e0e:	ed 01       	movw	r28, r26
 e10:	20 e0       	ldi	r18, 0x00	; 0
 e12:	30 e0       	ldi	r19, 0x00	; 0
 e14:	ce 17       	cp	r28, r30
 e16:	df 07       	cpc	r29, r31
 e18:	40 f4       	brcc	.+16     	; 0xe2a <free+0x5a>
 e1a:	4a 81       	ldd	r20, Y+2	; 0x02
 e1c:	5b 81       	ldd	r21, Y+3	; 0x03
 e1e:	9e 01       	movw	r18, r28
 e20:	41 15       	cp	r20, r1
 e22:	51 05       	cpc	r21, r1
 e24:	f1 f0       	breq	.+60     	; 0xe62 <free+0x92>
 e26:	ea 01       	movw	r28, r20
 e28:	f5 cf       	rjmp	.-22     	; 0xe14 <free+0x44>
 e2a:	d3 83       	std	Z+3, r29	; 0x03
 e2c:	c2 83       	std	Z+2, r28	; 0x02
 e2e:	40 81       	ld	r20, Z
 e30:	51 81       	ldd	r21, Z+1	; 0x01
 e32:	84 0f       	add	r24, r20
 e34:	95 1f       	adc	r25, r21
 e36:	c8 17       	cp	r28, r24
 e38:	d9 07       	cpc	r29, r25
 e3a:	59 f4       	brne	.+22     	; 0xe52 <free+0x82>
 e3c:	88 81       	ld	r24, Y
 e3e:	99 81       	ldd	r25, Y+1	; 0x01
 e40:	84 0f       	add	r24, r20
 e42:	95 1f       	adc	r25, r21
 e44:	02 96       	adiw	r24, 0x02	; 2
 e46:	91 83       	std	Z+1, r25	; 0x01
 e48:	80 83       	st	Z, r24
 e4a:	8a 81       	ldd	r24, Y+2	; 0x02
 e4c:	9b 81       	ldd	r25, Y+3	; 0x03
 e4e:	93 83       	std	Z+3, r25	; 0x03
 e50:	82 83       	std	Z+2, r24	; 0x02
 e52:	21 15       	cp	r18, r1
 e54:	31 05       	cpc	r19, r1
 e56:	29 f4       	brne	.+10     	; 0xe62 <free+0x92>
 e58:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__flp+0x1>
 e5c:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__flp>
 e60:	3d c0       	rjmp	.+122    	; 0xedc <free+0x10c>
 e62:	e9 01       	movw	r28, r18
 e64:	fb 83       	std	Y+3, r31	; 0x03
 e66:	ea 83       	std	Y+2, r30	; 0x02
 e68:	49 91       	ld	r20, Y+
 e6a:	59 91       	ld	r21, Y+
 e6c:	c4 0f       	add	r28, r20
 e6e:	d5 1f       	adc	r29, r21
 e70:	ec 17       	cp	r30, r28
 e72:	fd 07       	cpc	r31, r29
 e74:	61 f4       	brne	.+24     	; 0xe8e <free+0xbe>
 e76:	80 81       	ld	r24, Z
 e78:	91 81       	ldd	r25, Z+1	; 0x01
 e7a:	84 0f       	add	r24, r20
 e7c:	95 1f       	adc	r25, r21
 e7e:	02 96       	adiw	r24, 0x02	; 2
 e80:	e9 01       	movw	r28, r18
 e82:	99 83       	std	Y+1, r25	; 0x01
 e84:	88 83       	st	Y, r24
 e86:	82 81       	ldd	r24, Z+2	; 0x02
 e88:	93 81       	ldd	r25, Z+3	; 0x03
 e8a:	9b 83       	std	Y+3, r25	; 0x03
 e8c:	8a 83       	std	Y+2, r24	; 0x02
 e8e:	e0 e0       	ldi	r30, 0x00	; 0
 e90:	f0 e0       	ldi	r31, 0x00	; 0
 e92:	12 96       	adiw	r26, 0x02	; 2
 e94:	8d 91       	ld	r24, X+
 e96:	9c 91       	ld	r25, X
 e98:	13 97       	sbiw	r26, 0x03	; 3
 e9a:	00 97       	sbiw	r24, 0x00	; 0
 e9c:	19 f0       	breq	.+6      	; 0xea4 <free+0xd4>
 e9e:	fd 01       	movw	r30, r26
 ea0:	dc 01       	movw	r26, r24
 ea2:	f7 cf       	rjmp	.-18     	; 0xe92 <free+0xc2>
 ea4:	8d 91       	ld	r24, X+
 ea6:	9c 91       	ld	r25, X
 ea8:	11 97       	sbiw	r26, 0x01	; 1
 eaa:	9d 01       	movw	r18, r26
 eac:	2e 5f       	subi	r18, 0xFE	; 254
 eae:	3f 4f       	sbci	r19, 0xFF	; 255
 eb0:	82 0f       	add	r24, r18
 eb2:	93 1f       	adc	r25, r19
 eb4:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
 eb8:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
 ebc:	28 17       	cp	r18, r24
 ebe:	39 07       	cpc	r19, r25
 ec0:	69 f4       	brne	.+26     	; 0xedc <free+0x10c>
 ec2:	30 97       	sbiw	r30, 0x00	; 0
 ec4:	29 f4       	brne	.+10     	; 0xed0 <free+0x100>
 ec6:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__flp+0x1>
 eca:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <__flp>
 ece:	02 c0       	rjmp	.+4      	; 0xed4 <free+0x104>
 ed0:	13 82       	std	Z+3, r1	; 0x03
 ed2:	12 82       	std	Z+2, r1	; 0x02
 ed4:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <__brkval+0x1>
 ed8:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <__brkval>
 edc:	df 91       	pop	r29
 ede:	cf 91       	pop	r28
 ee0:	08 95       	ret

00000ee2 <memset>:
 ee2:	dc 01       	movw	r26, r24
 ee4:	01 c0       	rjmp	.+2      	; 0xee8 <memset+0x6>
 ee6:	6d 93       	st	X+, r22
 ee8:	41 50       	subi	r20, 0x01	; 1
 eea:	50 40       	sbci	r21, 0x00	; 0
 eec:	e0 f7       	brcc	.-8      	; 0xee6 <memset+0x4>
 eee:	08 95       	ret

00000ef0 <_exit>:
 ef0:	f8 94       	cli

00000ef2 <__stop_program>:
 ef2:	ff cf       	rjmp	.-2      	; 0xef2 <__stop_program>
