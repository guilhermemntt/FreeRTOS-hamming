
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000fb4  00001048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800112  00800112  0000105a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d4b  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dab  00000000  00000000  00004087  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b2  00000000  00000000  00004e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d8  00000000  00000000  000067e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011dd  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026ef  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000a788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 06 	call	0xd0a	; 0xd0a <main>
  9e:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
#include "checksum.h"

#if( configSUPPORT_TASK_CHECKSUM==1 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	ac 01       	movw	r20, r24
  a8:	fb 01       	movw	r30, r22
	volatile StackType_t* i;
	uint16_t usChecksum = 0;
	for(i = pxEndOfStack ;i != pxStartOfStack ;i+=portSTACK_GROWTH)
  aa:	68 17       	cp	r22, r24
  ac:	79 07       	cpc	r23, r25
  ae:	49 f0       	breq	.+18     	; 0xc2 <uxChecksumGetTaskChecksum+0x1c>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
	{
		usChecksum^=*i;
  b4:	20 81       	ld	r18, Z
  b6:	82 27       	eor	r24, r18

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
	volatile StackType_t* i;
	uint16_t usChecksum = 0;
	for(i = pxEndOfStack ;i != pxStartOfStack ;i+=portSTACK_GROWTH)
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	4e 17       	cp	r20, r30
  bc:	5f 07       	cpc	r21, r31
  be:	d1 f7       	brne	.-12     	; 0xb4 <uxChecksumGetTaskChecksum+0xe>
  c0:	08 95       	ret
#if( configSUPPORT_TASK_CHECKSUM==1 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
	volatile StackType_t* i;
	uint16_t usChecksum = 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	for(i = pxEndOfStack ;i != pxStartOfStack ;i+=portSTACK_GROWTH)
	{
		usChecksum^=*i;
	}
	return usChecksum;
}
  c6:	08 95       	ret

000000c8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
  ce:	0e 94 33 04 	call	0x866	; 0x866 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 b0 06 	call	0xd60	; 0xd60 <malloc>
  d8:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  da:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
  de:	ce 01       	movw	r24, r28
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	if( pv )
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	41 f0       	breq	.+16     	; 0xfe <vPortFree+0x18>
  ee:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
  f0:	0e 94 33 04 	call	0x866	; 0x866 <vTaskSuspendAll>
		{
			free( pv );
  f4:	ce 01       	movw	r24, r28
  f6:	0e 94 48 07 	call	0xe90	; 0xe90 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  fa:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <xTaskResumeAll>
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 104:	fc 01       	movw	r30, r24
 106:	03 96       	adiw	r24, 0x03	; 3
 108:	92 83       	std	Z+2, r25	; 0x02
 10a:	81 83       	std	Z+1, r24	; 0x01
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	3f ef       	ldi	r19, 0xFF	; 255
 110:	34 83       	std	Z+4, r19	; 0x04
 112:	23 83       	std	Z+3, r18	; 0x03
 114:	96 83       	std	Z+6, r25	; 0x06
 116:	85 83       	std	Z+5, r24	; 0x05
 118:	90 87       	std	Z+8, r25	; 0x08
 11a:	87 83       	std	Z+7, r24	; 0x07
 11c:	10 82       	st	Z, r1
 11e:	08 95       	ret

00000120 <vListInitialiseItem>:
 120:	fc 01       	movw	r30, r24
 122:	11 86       	std	Z+9, r1	; 0x09
 124:	10 86       	std	Z+8, r1	; 0x08
 126:	08 95       	ret

00000128 <vListInsertEnd>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	9c 01       	movw	r18, r24
 12e:	fb 01       	movw	r30, r22
 130:	dc 01       	movw	r26, r24
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	cd 91       	ld	r28, X+
 136:	dc 91       	ld	r29, X
 138:	12 97       	sbiw	r26, 0x02	; 2
 13a:	d3 83       	std	Z+3, r29	; 0x03
 13c:	c2 83       	std	Z+2, r28	; 0x02
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	9d 81       	ldd	r25, Y+5	; 0x05
 142:	95 83       	std	Z+5, r25	; 0x05
 144:	84 83       	std	Z+4, r24	; 0x04
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	9d 81       	ldd	r25, Y+5	; 0x05
 14a:	dc 01       	movw	r26, r24
 14c:	13 96       	adiw	r26, 0x03	; 3
 14e:	7c 93       	st	X, r23
 150:	6e 93       	st	-X, r22
 152:	12 97       	sbiw	r26, 0x02	; 2
 154:	7d 83       	std	Y+5, r23	; 0x05
 156:	6c 83       	std	Y+4, r22	; 0x04
 158:	31 87       	std	Z+9, r19	; 0x09
 15a:	20 87       	std	Z+8, r18	; 0x08
 15c:	f9 01       	movw	r30, r18
 15e:	80 81       	ld	r24, Z
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 83       	st	Z, r24
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 170:	a0 85       	ldd	r26, Z+8	; 0x08
 172:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 174:	c2 81       	ldd	r28, Z+2	; 0x02
 176:	d3 81       	ldd	r29, Z+3	; 0x03
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	95 81       	ldd	r25, Z+5	; 0x05
 17c:	9d 83       	std	Y+5, r25	; 0x05
 17e:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 180:	c4 81       	ldd	r28, Z+4	; 0x04
 182:	d5 81       	ldd	r29, Z+5	; 0x05
 184:	82 81       	ldd	r24, Z+2	; 0x02
 186:	93 81       	ldd	r25, Z+3	; 0x03
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	12 97       	sbiw	r26, 0x02	; 2
 194:	e8 17       	cp	r30, r24
 196:	f9 07       	cpc	r31, r25
 198:	31 f4       	brne	.+12     	; 0x1a6 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 19a:	84 81       	ldd	r24, Z+4	; 0x04
 19c:	95 81       	ldd	r25, Z+5	; 0x05
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	9c 93       	st	X, r25
 1a2:	8e 93       	st	-X, r24
 1a4:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 1a6:	11 86       	std	Z+9, r1	; 0x09
 1a8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 1aa:	8c 91       	ld	r24, X
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 1b0:	8c 91       	ld	r24, X
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1b8:	31 e1       	ldi	r19, 0x11	; 17
 1ba:	fc 01       	movw	r30, r24
 1bc:	30 83       	st	Z, r19
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	22 e2       	ldi	r18, 0x22	; 34
 1c2:	20 83       	st	Z, r18
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	a3 e3       	ldi	r26, 0x33	; 51
 1c8:	a0 83       	st	Z, r26
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	60 83       	st	Z, r22
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	70 83       	st	Z, r23
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	10 82       	st	Z, r1
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	60 83       	st	Z, r22
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	10 82       	st	Z, r1
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	60 83       	st	Z, r22
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	60 83       	st	Z, r22
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	60 83       	st	Z, r22
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	60 83       	st	Z, r22
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	66 e0       	ldi	r22, 0x06	; 6
 1fc:	60 83       	st	Z, r22
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	60 83       	st	Z, r22
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	68 e0       	ldi	r22, 0x08	; 8
 208:	60 83       	st	Z, r22
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	69 e0       	ldi	r22, 0x09	; 9
 20e:	60 83       	st	Z, r22
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	60 e1       	ldi	r22, 0x10	; 16
 214:	60 83       	st	Z, r22
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	30 83       	st	Z, r19
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	32 e1       	ldi	r19, 0x12	; 18
 21e:	30 83       	st	Z, r19
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	33 e1       	ldi	r19, 0x13	; 19
 224:	30 83       	st	Z, r19
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	34 e1       	ldi	r19, 0x14	; 20
 22a:	30 83       	st	Z, r19
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	35 e1       	ldi	r19, 0x15	; 21
 230:	30 83       	st	Z, r19
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	36 e1       	ldi	r19, 0x16	; 22
 236:	30 83       	st	Z, r19
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	37 e1       	ldi	r19, 0x17	; 23
 23c:	30 83       	st	Z, r19
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	38 e1       	ldi	r19, 0x18	; 24
 242:	30 83       	st	Z, r19
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	39 e1       	ldi	r19, 0x19	; 25
 248:	30 83       	st	Z, r19
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	30 e2       	ldi	r19, 0x20	; 32
 24e:	30 83       	st	Z, r19
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	31 e2       	ldi	r19, 0x21	; 33
 254:	30 83       	st	Z, r19
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	20 83       	st	Z, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	23 e2       	ldi	r18, 0x23	; 35
 25e:	20 83       	st	Z, r18
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	40 83       	st	Z, r20
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	50 83       	st	Z, r21
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	26 e2       	ldi	r18, 0x26	; 38
 26c:	20 83       	st	Z, r18
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	27 e2       	ldi	r18, 0x27	; 39
 272:	20 83       	st	Z, r18
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	28 e2       	ldi	r18, 0x28	; 40
 278:	20 83       	st	Z, r18
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	29 e2       	ldi	r18, 0x29	; 41
 27e:	20 83       	st	Z, r18
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	20 e3       	ldi	r18, 0x30	; 48
 284:	20 83       	st	Z, r18
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	21 e3       	ldi	r18, 0x31	; 49
 28a:	20 83       	st	Z, r18
 28c:	86 97       	sbiw	r24, 0x26	; 38
 28e:	08 95       	ret

00000290 <xPortStartScheduler>:
 290:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 29a:	8b e0       	ldi	r24, 0x0B	; 11
 29c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2a0:	ef e6       	ldi	r30, 0x6F	; 111
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
 2aa:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 2ae:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 2b2:	cd 91       	ld	r28, X+
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	dd 91       	ld	r29, X+
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	5f 90       	pop	r5
 2f0:	4f 90       	pop	r4
 2f2:	3f 90       	pop	r3
 2f4:	2f 90       	pop	r2
 2f6:	1f 90       	pop	r1
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	08 95       	ret
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret

00000304 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	0f 92       	push	r0
 30c:	1f 92       	push	r1
 30e:	11 24       	eor	r1, r1
 310:	2f 92       	push	r2
 312:	3f 92       	push	r3
 314:	4f 92       	push	r4
 316:	5f 92       	push	r5
 318:	6f 92       	push	r6
 31a:	7f 92       	push	r7
 31c:	8f 92       	push	r8
 31e:	9f 92       	push	r9
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
 34c:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 350:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 354:	0d b6       	in	r0, 0x3d	; 61
 356:	0d 92       	st	X+, r0
 358:	0e b6       	in	r0, 0x3e	; 62
 35a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 35c:	0e 94 73 05 	call	0xae6	; 0xae6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 360:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 364:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 368:	cd 91       	ld	r28, X+
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	dd 91       	ld	r29, X+
 36e:	de bf       	out	0x3e, r29	; 62
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	7f 90       	pop	r7
 3a2:	6f 90       	pop	r6
 3a4:	5f 90       	pop	r5
 3a6:	4f 90       	pop	r4
 3a8:	3f 90       	pop	r3
 3aa:	2f 90       	pop	r2
 3ac:	1f 90       	pop	r1
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0

	asm volatile ( "ret" );
 3b4:	08 95       	ret

000003b6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	0f 92       	push	r0
 3be:	1f 92       	push	r1
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 92       	push	r2
 3c4:	3f 92       	push	r3
 3c6:	4f 92       	push	r4
 3c8:	5f 92       	push	r5
 3ca:	6f 92       	push	r6
 3cc:	7f 92       	push	r7
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
 3fe:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 402:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 406:	0d b6       	in	r0, 0x3d	; 61
 408:	0d 92       	st	X+, r0
 40a:	0e b6       	in	r0, 0x3e	; 62
 40c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 40e:	0e 94 39 04 	call	0x872	; 0x872 <xTaskIncrementTick>
 412:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 414:	0e 94 73 05 	call	0xae6	; 0xae6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 418:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 41c:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 420:	cd 91       	ld	r28, X+
 422:	cd bf       	out	0x3d, r28	; 61
 424:	dd 91       	ld	r29, X+
 426:	de bf       	out	0x3e, r29	; 62
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	8f 90       	pop	r8
 458:	7f 90       	pop	r7
 45a:	6f 90       	pop	r6
 45c:	5f 90       	pop	r5
 45e:	4f 90       	pop	r4
 460:	3f 90       	pop	r3
 462:	2f 90       	pop	r2
 464:	1f 90       	pop	r1
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0

	asm volatile ( "ret" );
 46c:	08 95       	ret

0000046e <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 46e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <vPortYieldFromTick>
		asm volatile ( "reti" );
 472:	18 95       	reti

00000474 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 474:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 478:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 47c:	80 81       	ld	r24, Z
 47e:	81 11       	cpse	r24, r1
 480:	07 c0       	rjmp	.+14     	; 0x490 <prvResetNextTaskUnblockTime+0x1c>
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 48a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 48e:	08 95       	ret
 490:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 494:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 498:	05 80       	ldd	r0, Z+5	; 0x05
 49a:	f6 81       	ldd	r31, Z+6	; 0x06
 49c:	e0 2d       	mov	r30, r0
 49e:	06 80       	ldd	r0, Z+6	; 0x06
 4a0:	f7 81       	ldd	r31, Z+7	; 0x07
 4a2:	e0 2d       	mov	r30, r0
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	93 81       	ldd	r25, Z+3	; 0x03
 4a8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 4ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 4b0:	08 95       	ret

000004b2 <prvIdleTask>:
 4b2:	01 e2       	ldi	r16, 0x21	; 33
 4b4:	11 e0       	ldi	r17, 0x01	; 1
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f9 e4       	ldi	r31, 0x49	; 73
 4ba:	ef 2e       	mov	r14, r31
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	ff 2e       	mov	r15, r31
 4c0:	f0 2d       	mov	r31, r0
 4c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 4c6:	88 23       	and	r24, r24
 4c8:	29 f1       	breq	.+74     	; 0x514 <prvIdleTask+0x62>
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	0f 92       	push	r0
 4d0:	d8 01       	movw	r26, r16
 4d2:	15 96       	adiw	r26, 0x05	; 5
 4d4:	ed 91       	ld	r30, X+
 4d6:	fc 91       	ld	r31, X
 4d8:	16 97       	sbiw	r26, 0x06	; 6
 4da:	c6 81       	ldd	r28, Z+6	; 0x06
 4dc:	d7 81       	ldd	r29, Z+7	; 0x07
 4de:	ce 01       	movw	r24, r28
 4e0:	02 96       	adiw	r24, 0x02	; 2
 4e2:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 4e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 4ea:	81 50       	subi	r24, 0x01	; 1
 4ec:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 4f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 4f4:	81 50       	subi	r24, 0x01	; 1
 4f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	8f 89       	ldd	r24, Y+23	; 0x17
 500:	98 8d       	ldd	r25, Y+24	; 0x18
 502:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 506:	ce 01       	movw	r24, r28
 508:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 50c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 510:	81 11       	cpse	r24, r1
 512:	db cf       	rjmp	.-74     	; 0x4ca <prvIdleTask+0x18>
 514:	f7 01       	movw	r30, r14
 516:	80 81       	ld	r24, Z
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	98 f2       	brcs	.-90     	; 0x4c2 <prvIdleTask+0x10>
 51c:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 520:	d0 cf       	rjmp	.-96     	; 0x4c2 <prvIdleTask+0x10>

00000522 <xTaskCreate>:
 522:	4f 92       	push	r4
 524:	5f 92       	push	r5
 526:	6f 92       	push	r6
 528:	7f 92       	push	r7
 52a:	8f 92       	push	r8
 52c:	9f 92       	push	r9
 52e:	af 92       	push	r10
 530:	bf 92       	push	r11
 532:	cf 92       	push	r12
 534:	df 92       	push	r13
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	4c 01       	movw	r8, r24
 542:	6b 01       	movw	r12, r22
 544:	5a 01       	movw	r10, r20
 546:	29 01       	movw	r4, r18
 548:	ca 01       	movw	r24, r20
 54a:	0e 94 64 00 	call	0xc8	; 0xc8 <pvPortMalloc>
 54e:	3c 01       	movw	r6, r24
 550:	89 2b       	or	r24, r25
 552:	09 f4       	brne	.+2      	; 0x556 <xTaskCreate+0x34>
 554:	f8 c0       	rjmp	.+496    	; 0x746 <xTaskCreate+0x224>
 556:	8c e2       	ldi	r24, 0x2C	; 44
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 64 00 	call	0xc8	; 0xc8 <pvPortMalloc>
 55e:	ec 01       	movw	r28, r24
 560:	89 2b       	or	r24, r25
 562:	c1 f0       	breq	.+48     	; 0x594 <xTaskCreate+0x72>
 564:	78 8e       	std	Y+24, r7	; 0x18
 566:	6f 8a       	std	Y+23, r6	; 0x17
 568:	a5 01       	movw	r20, r10
 56a:	65 ea       	ldi	r22, 0xA5	; 165
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	c3 01       	movw	r24, r6
 570:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <memset>
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	a8 1a       	sub	r10, r24
 578:	b1 08       	sbc	r11, r1
 57a:	8f 89       	ldd	r24, Y+23	; 0x17
 57c:	98 8d       	ldd	r25, Y+24	; 0x18
 57e:	a8 0e       	add	r10, r24
 580:	b9 1e       	adc	r11, r25
 582:	bc a2       	std	Y+36, r11	; 0x24
 584:	ab a2       	std	Y+35, r10	; 0x23
 586:	d6 01       	movw	r26, r12
 588:	8c 91       	ld	r24, X
 58a:	89 8f       	std	Y+25, r24	; 0x19
 58c:	8c 91       	ld	r24, X
 58e:	81 11       	cpse	r24, r1
 590:	05 c0       	rjmp	.+10     	; 0x59c <xTaskCreate+0x7a>
 592:	18 c0       	rjmp	.+48     	; 0x5c4 <xTaskCreate+0xa2>
 594:	c3 01       	movw	r24, r6
 596:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 59a:	d5 c0       	rjmp	.+426    	; 0x746 <xTaskCreate+0x224>
 59c:	ae 01       	movw	r20, r28
 59e:	46 5e       	subi	r20, 0xE6	; 230
 5a0:	5f 4f       	sbci	r21, 0xFF	; 255
 5a2:	f6 01       	movw	r30, r12
 5a4:	31 96       	adiw	r30, 0x01	; 1
 5a6:	b8 e0       	ldi	r27, 0x08	; 8
 5a8:	cb 0e       	add	r12, r27
 5aa:	d1 1c       	adc	r13, r1
 5ac:	cf 01       	movw	r24, r30
 5ae:	21 91       	ld	r18, Z+
 5b0:	da 01       	movw	r26, r20
 5b2:	2d 93       	st	X+, r18
 5b4:	ad 01       	movw	r20, r26
 5b6:	dc 01       	movw	r26, r24
 5b8:	8c 91       	ld	r24, X
 5ba:	88 23       	and	r24, r24
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <xTaskCreate+0xa2>
 5be:	ec 15       	cp	r30, r12
 5c0:	fd 05       	cpc	r31, r13
 5c2:	a1 f7       	brne	.-24     	; 0x5ac <xTaskCreate+0x8a>
 5c4:	18 a2       	std	Y+32, r1	; 0x20
 5c6:	04 30       	cpi	r16, 0x04	; 4
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <xTaskCreate+0xaa>
 5ca:	03 e0       	ldi	r16, 0x03	; 3
 5cc:	0e 8b       	std	Y+22, r16	; 0x16
 5ce:	0d a3       	std	Y+37, r16	; 0x25
 5d0:	1e a2       	std	Y+38, r1	; 0x26
 5d2:	6e 01       	movw	r12, r28
 5d4:	b2 e0       	ldi	r27, 0x02	; 2
 5d6:	cb 0e       	add	r12, r27
 5d8:	d1 1c       	adc	r13, r1
 5da:	c6 01       	movw	r24, r12
 5dc:	0e 94 90 00 	call	0x120	; 0x120 <vListInitialiseItem>
 5e0:	ce 01       	movw	r24, r28
 5e2:	0c 96       	adiw	r24, 0x0c	; 12
 5e4:	0e 94 90 00 	call	0x120	; 0x120 <vListInitialiseItem>
 5e8:	d9 87       	std	Y+9, r29	; 0x09
 5ea:	c8 87       	std	Y+8, r28	; 0x08
 5ec:	84 e0       	ldi	r24, 0x04	; 4
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	80 1b       	sub	r24, r16
 5f2:	91 09       	sbc	r25, r1
 5f4:	9d 87       	std	Y+13, r25	; 0x0d
 5f6:	8c 87       	std	Y+12, r24	; 0x0c
 5f8:	db 8b       	std	Y+19, r29	; 0x13
 5fa:	ca 8b       	std	Y+18, r28	; 0x12
 5fc:	1f a2       	std	Y+39, r1	; 0x27
 5fe:	18 a6       	std	Y+40, r1	; 0x28
 600:	19 a6       	std	Y+41, r1	; 0x29
 602:	1a a6       	std	Y+42, r1	; 0x2a
 604:	1b a6       	std	Y+43, r1	; 0x2b
 606:	a2 01       	movw	r20, r4
 608:	b4 01       	movw	r22, r8
 60a:	c5 01       	movw	r24, r10
 60c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pxPortInitialiseStack>
 610:	99 83       	std	Y+1, r25	; 0x01
 612:	88 83       	st	Y, r24
 614:	e1 14       	cp	r14, r1
 616:	f1 04       	cpc	r15, r1
 618:	19 f0       	breq	.+6      	; 0x620 <xTaskCreate+0xfe>
 61a:	f7 01       	movw	r30, r14
 61c:	d1 83       	std	Z+1, r29	; 0x01
 61e:	c0 83       	st	Z, r28
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	0f 92       	push	r0
 626:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 630:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
 634:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 638:	89 2b       	or	r24, r25
 63a:	a9 f5       	brne	.+106    	; 0x6a6 <xTaskCreate+0x184>
 63c:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
 640:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
 644:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	e9 f5       	brne	.+122    	; 0x6c6 <xTaskCreate+0x1a4>
 64c:	89 e4       	ldi	r24, 0x49	; 73
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 654:	82 e5       	ldi	r24, 0x52	; 82
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 65c:	8b e5       	ldi	r24, 0x5B	; 91
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 664:	84 e6       	ldi	r24, 0x64	; 100
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 66c:	80 e4       	ldi	r24, 0x40	; 64
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 674:	87 e3       	ldi	r24, 0x37	; 55
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 67c:	8a e2       	ldi	r24, 0x2A	; 42
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 684:	81 e2       	ldi	r24, 0x21	; 33
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 68c:	80 e4       	ldi	r24, 0x40	; 64
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <pxDelayedTaskList+0x1>
 694:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <pxDelayedTaskList>
 698:	87 e3       	ldi	r24, 0x37	; 55
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 6a0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
 6a4:	10 c0       	rjmp	.+32     	; 0x6c6 <xTaskCreate+0x1a4>
 6a6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 6aa:	81 11       	cpse	r24, r1
 6ac:	0c c0       	rjmp	.+24     	; 0x6c6 <xTaskCreate+0x1a4>
 6ae:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 6b2:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 6b6:	96 89       	ldd	r25, Z+22	; 0x16
 6b8:	8e 89       	ldd	r24, Y+22	; 0x16
 6ba:	89 17       	cp	r24, r25
 6bc:	20 f0       	brcs	.+8      	; 0x6c6 <xTaskCreate+0x1a4>
 6be:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
 6c2:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
 6c6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 6ca:	8f 5f       	subi	r24, 0xFF	; 255
 6cc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 6d0:	e0 90 6d 01 	lds	r14, 0x016D	; 0x80016d <pxCurrentTCB>
 6d4:	f0 90 6e 01 	lds	r15, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 6d8:	6b a1       	ldd	r22, Y+35	; 0x23
 6da:	7c a1       	ldd	r23, Y+36	; 0x24
 6dc:	88 81       	ld	r24, Y
 6de:	99 81       	ldd	r25, Y+1	; 0x01
 6e0:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 6e4:	d7 01       	movw	r26, r14
 6e6:	92 96       	adiw	r26, 0x22	; 34
 6e8:	9c 93       	st	X, r25
 6ea:	8e 93       	st	-X, r24
 6ec:	91 97       	sbiw	r26, 0x21	; 33
 6ee:	8e 89       	ldd	r24, Y+22	; 0x16
 6f0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 6f4:	98 17       	cp	r25, r24
 6f6:	10 f4       	brcc	.+4      	; 0x6fc <xTaskCreate+0x1da>
 6f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	9c 01       	movw	r18, r24
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	82 0f       	add	r24, r18
 70e:	93 1f       	adc	r25, r19
 710:	b6 01       	movw	r22, r12
 712:	87 5b       	subi	r24, 0xB7	; 183
 714:	9e 4f       	sbci	r25, 0xFE	; 254
 716:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 722:	88 23       	and	r24, r24
 724:	61 f0       	breq	.+24     	; 0x73e <xTaskCreate+0x21c>
 726:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 72a:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 72e:	96 89       	ldd	r25, Z+22	; 0x16
 730:	8e 89       	ldd	r24, Y+22	; 0x16
 732:	98 17       	cp	r25, r24
 734:	30 f4       	brcc	.+12     	; 0x742 <xTaskCreate+0x220>
 736:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	05 c0       	rjmp	.+10     	; 0x748 <xTaskCreate+0x226>
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	03 c0       	rjmp	.+6      	; 0x748 <xTaskCreate+0x226>
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	01 c0       	rjmp	.+2      	; 0x748 <xTaskCreate+0x226>
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	df 90       	pop	r13
 754:	cf 90       	pop	r12
 756:	bf 90       	pop	r11
 758:	af 90       	pop	r10
 75a:	9f 90       	pop	r9
 75c:	8f 90       	pop	r8
 75e:	7f 90       	pop	r7
 760:	6f 90       	pop	r6
 762:	5f 90       	pop	r5
 764:	4f 90       	pop	r4
 766:	08 95       	ret

00000768 <vTaskDelete>:
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	ec 01       	movw	r28, r24
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	0f 92       	push	r0
 778:	89 2b       	or	r24, r25
 77a:	21 f4       	brne	.+8      	; 0x784 <vTaskDelete+0x1c>
 77c:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
 780:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 784:	8e 01       	movw	r16, r28
 786:	0e 5f       	subi	r16, 0xFE	; 254
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	c8 01       	movw	r24, r16
 78c:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 790:	8c 89       	ldd	r24, Y+20	; 0x14
 792:	9d 89       	ldd	r25, Y+21	; 0x15
 794:	89 2b       	or	r24, r25
 796:	21 f0       	breq	.+8      	; 0x7a0 <vTaskDelete+0x38>
 798:	ce 01       	movw	r24, r28
 79a:	0c 96       	adiw	r24, 0x0c	; 12
 79c:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 7a0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 7a4:	8f 5f       	subi	r24, 0xFF	; 255
 7a6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 7aa:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
 7ae:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 7b2:	c8 17       	cp	r28, r24
 7b4:	d9 07       	cpc	r29, r25
 7b6:	59 f4       	brne	.+22     	; 0x7ce <vTaskDelete+0x66>
 7b8:	b8 01       	movw	r22, r16
 7ba:	81 e2       	ldi	r24, 0x21	; 33
 7bc:	91 e0       	ldi	r25, 0x01	; 1
 7be:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 7c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 7c6:	8f 5f       	subi	r24, 0xFF	; 255
 7c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 7cc:	0e c0       	rjmp	.+28     	; 0x7ea <vTaskDelete+0x82>
 7ce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 7d2:	81 50       	subi	r24, 0x01	; 1
 7d4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 7d8:	8f 89       	ldd	r24, Y+23	; 0x17
 7da:	98 8d       	ldd	r25, Y+24	; 0x18
 7dc:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 7e0:	ce 01       	movw	r24, r28
 7e2:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 7e6:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 7f2:	88 23       	and	r24, r24
 7f4:	49 f0       	breq	.+18     	; 0x808 <vTaskDelete+0xa0>
 7f6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
 7fa:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 7fe:	c8 17       	cp	r28, r24
 800:	d9 07       	cpc	r29, r25
 802:	11 f4       	brne	.+4      	; 0x808 <vTaskDelete+0xa0>
 804:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	0f 91       	pop	r16
 810:	08 95       	ret

00000812 <vTaskStartScheduler>:
 812:	ef 92       	push	r14
 814:	ff 92       	push	r15
 816:	0f 93       	push	r16
 818:	0f 2e       	mov	r0, r31
 81a:	f3 e1       	ldi	r31, 0x13	; 19
 81c:	ef 2e       	mov	r14, r31
 81e:	f1 e0       	ldi	r31, 0x01	; 1
 820:	ff 2e       	mov	r15, r31
 822:	f0 2d       	mov	r31, r0
 824:	00 e0       	ldi	r16, 0x00	; 0
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	44 e6       	ldi	r20, 0x64	; 100
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	66 e0       	ldi	r22, 0x06	; 6
 830:	71 e0       	ldi	r23, 0x01	; 1
 832:	89 e5       	ldi	r24, 0x59	; 89
 834:	92 e0       	ldi	r25, 0x02	; 2
 836:	0e 94 91 02 	call	0x522	; 0x522 <xTaskCreate>
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	81 f4       	brne	.+32     	; 0x85e <vTaskStartScheduler+0x4c>
 83e:	f8 94       	cli
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 848:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 852:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 856:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 85a:	0e 94 48 01 	call	0x290	; 0x290 <xPortStartScheduler>
 85e:	0f 91       	pop	r16
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	08 95       	ret

00000866 <vTaskSuspendAll>:
 866:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 870:	08 95       	ret

00000872 <xTaskIncrementTick>:
 872:	cf 92       	push	r12
 874:	df 92       	push	r13
 876:	ef 92       	push	r14
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 886:	81 11       	cpse	r24, r1
 888:	99 c0       	rjmp	.+306    	; 0x9bc <__stack+0xbd>
 88a:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 88e:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	e8 1a       	sub	r14, r24
 896:	f8 0a       	sbc	r15, r24
 898:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 89c:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 8a0:	e1 14       	cp	r14, r1
 8a2:	f1 04       	cpc	r15, r1
 8a4:	b9 f4       	brne	.+46     	; 0x8d4 <xTaskIncrementTick+0x62>
 8a6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <pxDelayedTaskList>
 8aa:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 8ae:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pxOverflowDelayedTaskList>
 8b2:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 8b6:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <pxDelayedTaskList+0x1>
 8ba:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <pxDelayedTaskList>
 8be:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 8c2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
 8c6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 8ca:	8f 5f       	subi	r24, 0xFF	; 255
 8cc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 8d0:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 8d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 8d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 8dc:	e8 16       	cp	r14, r24
 8de:	f9 06       	cpc	r15, r25
 8e0:	10 f4       	brcc	.+4      	; 0x8e6 <xTaskIncrementTick+0x74>
 8e2:	d1 2c       	mov	r13, r1
 8e4:	53 c0       	rjmp	.+166    	; 0x98c <__stack+0x8d>
 8e6:	d1 2c       	mov	r13, r1
 8e8:	cc 24       	eor	r12, r12
 8ea:	c3 94       	inc	r12
 8ec:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 8f0:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 8f4:	80 81       	ld	r24, Z
 8f6:	81 11       	cpse	r24, r1
 8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 902:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 906:	42 c0       	rjmp	.+132    	; 0x98c <__stack+0x8d>
 908:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 90c:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 910:	05 80       	ldd	r0, Z+5	; 0x05
 912:	f6 81       	ldd	r31, Z+6	; 0x06
 914:	e0 2d       	mov	r30, r0
 916:	c6 81       	ldd	r28, Z+6	; 0x06
 918:	d7 81       	ldd	r29, Z+7	; 0x07
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	9b 81       	ldd	r25, Y+3	; 0x03
 91e:	e8 16       	cp	r14, r24
 920:	f9 06       	cpc	r15, r25
 922:	28 f4       	brcc	.+10     	; 0x92e <__stack+0x2f>
 924:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 928:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 92c:	2f c0       	rjmp	.+94     	; 0x98c <__stack+0x8d>
 92e:	8e 01       	movw	r16, r28
 930:	0e 5f       	subi	r16, 0xFE	; 254
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	c8 01       	movw	r24, r16
 936:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 93a:	8c 89       	ldd	r24, Y+20	; 0x14
 93c:	9d 89       	ldd	r25, Y+21	; 0x15
 93e:	89 2b       	or	r24, r25
 940:	21 f0       	breq	.+8      	; 0x94a <__stack+0x4b>
 942:	ce 01       	movw	r24, r28
 944:	0c 96       	adiw	r24, 0x0c	; 12
 946:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 94a:	8e 89       	ldd	r24, Y+22	; 0x16
 94c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 950:	98 17       	cp	r25, r24
 952:	10 f4       	brcc	.+4      	; 0x958 <__stack+0x59>
 954:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	9c 01       	movw	r18, r24
 95c:	22 0f       	add	r18, r18
 95e:	33 1f       	adc	r19, r19
 960:	22 0f       	add	r18, r18
 962:	33 1f       	adc	r19, r19
 964:	22 0f       	add	r18, r18
 966:	33 1f       	adc	r19, r19
 968:	82 0f       	add	r24, r18
 96a:	93 1f       	adc	r25, r19
 96c:	b8 01       	movw	r22, r16
 96e:	87 5b       	subi	r24, 0xB7	; 183
 970:	9e 4f       	sbci	r25, 0xFE	; 254
 972:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 976:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 97a:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 97e:	9e 89       	ldd	r25, Y+22	; 0x16
 980:	86 89       	ldd	r24, Z+22	; 0x16
 982:	98 17       	cp	r25, r24
 984:	08 f4       	brcc	.+2      	; 0x988 <__stack+0x89>
 986:	b2 cf       	rjmp	.-156    	; 0x8ec <xTaskIncrementTick+0x7a>
 988:	dc 2c       	mov	r13, r12
 98a:	b0 cf       	rjmp	.-160    	; 0x8ec <xTaskIncrementTick+0x7a>
 98c:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 990:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 994:	86 89       	ldd	r24, Z+22	; 0x16
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	fc 01       	movw	r30, r24
 99a:	ee 0f       	add	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	ee 0f       	add	r30, r30
 9a4:	ff 1f       	adc	r31, r31
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	fc 01       	movw	r30, r24
 9ac:	e7 5b       	subi	r30, 0xB7	; 183
 9ae:	fe 4f       	sbci	r31, 0xFE	; 254
 9b0:	80 81       	ld	r24, Z
 9b2:	82 30       	cpi	r24, 0x02	; 2
 9b4:	48 f0       	brcs	.+18     	; 0x9c8 <__stack+0xc9>
 9b6:	dd 24       	eor	r13, r13
 9b8:	d3 94       	inc	r13
 9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <__stack+0xc9>
 9bc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 9c0:	8f 5f       	subi	r24, 0xFF	; 255
 9c2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 9c6:	d1 2c       	mov	r13, r1
 9c8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 9cc:	88 23       	and	r24, r24
 9ce:	11 f0       	breq	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	dd 24       	eor	r13, r13
 9d2:	d3 94       	inc	r13
 9d4:	8d 2d       	mov	r24, r13
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	08 95       	ret

000009e8 <xTaskResumeAll>:
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	0f b6       	in	r0, 0x3f	; 63
 9f8:	f8 94       	cli
 9fa:	0f 92       	push	r0
 9fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a00:	81 50       	subi	r24, 0x01	; 1
 a02:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 a06:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a0a:	81 11       	cpse	r24, r1
 a0c:	5f c0       	rjmp	.+190    	; 0xacc <xTaskResumeAll+0xe4>
 a0e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 a12:	81 11       	cpse	r24, r1
 a14:	33 c0       	rjmp	.+102    	; 0xa7c <xTaskResumeAll+0x94>
 a16:	5d c0       	rjmp	.+186    	; 0xad2 <xTaskResumeAll+0xea>
 a18:	d7 01       	movw	r26, r14
 a1a:	15 96       	adiw	r26, 0x05	; 5
 a1c:	ed 91       	ld	r30, X+
 a1e:	fc 91       	ld	r31, X
 a20:	16 97       	sbiw	r26, 0x06	; 6
 a22:	c6 81       	ldd	r28, Z+6	; 0x06
 a24:	d7 81       	ldd	r29, Z+7	; 0x07
 a26:	ce 01       	movw	r24, r28
 a28:	0c 96       	adiw	r24, 0x0c	; 12
 a2a:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 a2e:	8e 01       	movw	r16, r28
 a30:	0e 5f       	subi	r16, 0xFE	; 254
 a32:	1f 4f       	sbci	r17, 0xFF	; 255
 a34:	c8 01       	movw	r24, r16
 a36:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 a3a:	8e 89       	ldd	r24, Y+22	; 0x16
 a3c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 a40:	98 17       	cp	r25, r24
 a42:	10 f4       	brcc	.+4      	; 0xa48 <xTaskResumeAll+0x60>
 a44:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	9c 01       	movw	r18, r24
 a4c:	22 0f       	add	r18, r18
 a4e:	33 1f       	adc	r19, r19
 a50:	22 0f       	add	r18, r18
 a52:	33 1f       	adc	r19, r19
 a54:	22 0f       	add	r18, r18
 a56:	33 1f       	adc	r19, r19
 a58:	82 0f       	add	r24, r18
 a5a:	93 1f       	adc	r25, r19
 a5c:	b8 01       	movw	r22, r16
 a5e:	87 5b       	subi	r24, 0xB7	; 183
 a60:	9e 4f       	sbci	r25, 0xFE	; 254
 a62:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 a66:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 a6a:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 a6e:	9e 89       	ldd	r25, Y+22	; 0x16
 a70:	86 89       	ldd	r24, Z+22	; 0x16
 a72:	98 17       	cp	r25, r24
 a74:	68 f0       	brcs	.+26     	; 0xa90 <xTaskResumeAll+0xa8>
 a76:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 a7a:	0a c0       	rjmp	.+20     	; 0xa90 <xTaskResumeAll+0xa8>
 a7c:	c0 e0       	ldi	r28, 0x00	; 0
 a7e:	d0 e0       	ldi	r29, 0x00	; 0
 a80:	0f 2e       	mov	r0, r31
 a82:	fa e2       	ldi	r31, 0x2A	; 42
 a84:	ef 2e       	mov	r14, r31
 a86:	f1 e0       	ldi	r31, 0x01	; 1
 a88:	ff 2e       	mov	r15, r31
 a8a:	f0 2d       	mov	r31, r0
 a8c:	dd 24       	eor	r13, r13
 a8e:	d3 94       	inc	r13
 a90:	f7 01       	movw	r30, r14
 a92:	80 81       	ld	r24, Z
 a94:	81 11       	cpse	r24, r1
 a96:	c0 cf       	rjmp	.-128    	; 0xa18 <xTaskResumeAll+0x30>
 a98:	cd 2b       	or	r28, r29
 a9a:	11 f0       	breq	.+4      	; 0xaa0 <xTaskResumeAll+0xb8>
 a9c:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 aa0:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 aa4:	cc 23       	and	r28, r28
 aa6:	51 f0       	breq	.+20     	; 0xabc <xTaskResumeAll+0xd4>
 aa8:	d1 e0       	ldi	r29, 0x01	; 1
 aaa:	0e 94 39 04 	call	0x872	; 0x872 <xTaskIncrementTick>
 aae:	81 11       	cpse	r24, r1
 ab0:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 ab4:	c1 50       	subi	r28, 0x01	; 1
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <xTaskResumeAll+0xc2>
 ab8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 abc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 ac0:	88 23       	and	r24, r24
 ac2:	31 f0       	breq	.+12     	; 0xad0 <xTaskResumeAll+0xe8>
 ac4:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	03 c0       	rjmp	.+6      	; 0xad2 <xTaskResumeAll+0xea>
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	01 c0       	rjmp	.+2      	; 0xad2 <xTaskResumeAll+0xea>
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	0f 90       	pop	r0
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	ff 90       	pop	r15
 ae0:	ef 90       	pop	r14
 ae2:	df 90       	pop	r13
 ae4:	08 95       	ret

00000ae6 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 aea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 aee:	88 23       	and	r24, r24
 af0:	21 f0       	breq	.+8      	; 0xafa <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 af8:	f0 c0       	rjmp	.+480    	; 0xcda <vTaskSwitchContext+0x1f4>
	}
	else
	{
		xYieldPending = pdFALSE;
 afa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 afe:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
 b02:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 b06:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 b0a:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 b0e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 b12:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 b16:	93 96       	adiw	r26, 0x23	; 35
 b18:	6d 91       	ld	r22, X+
 b1a:	7c 91       	ld	r23, X
 b1c:	94 97       	sbiw	r26, 0x24	; 36
 b1e:	80 81       	ld	r24, Z
 b20:	91 81       	ldd	r25, Z+1	; 0x01
 b22:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 b26:	9a a3       	std	Y+34, r25	; 0x22
 b28:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 b2a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 b2e:	82 2f       	mov	r24, r18
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	fc 01       	movw	r30, r24
 b34:	ee 0f       	add	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	ee 0f       	add	r30, r30
 b3a:	ff 1f       	adc	r31, r31
 b3c:	ee 0f       	add	r30, r30
 b3e:	ff 1f       	adc	r31, r31
 b40:	e8 0f       	add	r30, r24
 b42:	f9 1f       	adc	r31, r25
 b44:	e7 5b       	subi	r30, 0xB7	; 183
 b46:	fe 4f       	sbci	r31, 0xFE	; 254
 b48:	30 81       	ld	r19, Z
 b4a:	31 11       	cpse	r19, r1
 b4c:	11 c0       	rjmp	.+34     	; 0xb70 <vTaskSwitchContext+0x8a>
 b4e:	21 50       	subi	r18, 0x01	; 1
 b50:	82 2f       	mov	r24, r18
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	fc 01       	movw	r30, r24
 b56:	ee 0f       	add	r30, r30
 b58:	ff 1f       	adc	r31, r31
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	ee 0f       	add	r30, r30
 b60:	ff 1f       	adc	r31, r31
 b62:	e8 0f       	add	r30, r24
 b64:	f9 1f       	adc	r31, r25
 b66:	e7 5b       	subi	r30, 0xB7	; 183
 b68:	fe 4f       	sbci	r31, 0xFE	; 254
 b6a:	30 81       	ld	r19, Z
 b6c:	33 23       	and	r19, r19
 b6e:	79 f3       	breq	.-34     	; 0xb4e <vTaskSwitchContext+0x68>
 b70:	ac 01       	movw	r20, r24
 b72:	44 0f       	add	r20, r20
 b74:	55 1f       	adc	r21, r21
 b76:	44 0f       	add	r20, r20
 b78:	55 1f       	adc	r21, r21
 b7a:	44 0f       	add	r20, r20
 b7c:	55 1f       	adc	r21, r21
 b7e:	48 0f       	add	r20, r24
 b80:	59 1f       	adc	r21, r25
 b82:	da 01       	movw	r26, r20
 b84:	a7 5b       	subi	r26, 0xB7	; 183
 b86:	be 4f       	sbci	r27, 0xFE	; 254
 b88:	11 96       	adiw	r26, 0x01	; 1
 b8a:	ed 91       	ld	r30, X+
 b8c:	fc 91       	ld	r31, X
 b8e:	12 97       	sbiw	r26, 0x02	; 2
 b90:	02 80       	ldd	r0, Z+2	; 0x02
 b92:	f3 81       	ldd	r31, Z+3	; 0x03
 b94:	e0 2d       	mov	r30, r0
 b96:	12 96       	adiw	r26, 0x02	; 2
 b98:	fc 93       	st	X, r31
 b9a:	ee 93       	st	-X, r30
 b9c:	11 97       	sbiw	r26, 0x01	; 1
 b9e:	44 5b       	subi	r20, 0xB4	; 180
 ba0:	5e 4f       	sbci	r21, 0xFE	; 254
 ba2:	e4 17       	cp	r30, r20
 ba4:	f5 07       	cpc	r31, r21
 ba6:	29 f4       	brne	.+10     	; 0xbb2 <vTaskSwitchContext+0xcc>
 ba8:	42 81       	ldd	r20, Z+2	; 0x02
 baa:	53 81       	ldd	r21, Z+3	; 0x03
 bac:	fd 01       	movw	r30, r26
 bae:	52 83       	std	Z+2, r21	; 0x02
 bb0:	41 83       	std	Z+1, r20	; 0x01
 bb2:	fc 01       	movw	r30, r24
 bb4:	ee 0f       	add	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	8e 0f       	add	r24, r30
 bc2:	9f 1f       	adc	r25, r31
 bc4:	fc 01       	movw	r30, r24
 bc6:	e7 5b       	subi	r30, 0xB7	; 183
 bc8:	fe 4f       	sbci	r31, 0xFE	; 254
 bca:	01 80       	ldd	r0, Z+1	; 0x01
 bcc:	f2 81       	ldd	r31, Z+2	; 0x02
 bce:	e0 2d       	mov	r30, r0
 bd0:	86 81       	ldd	r24, Z+6	; 0x06
 bd2:	97 81       	ldd	r25, Z+7	; 0x07
 bd4:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <pxCurrentTCB+0x1>
 bd8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <pxCurrentTCB>
 bdc:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 be0:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 be4:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 be8:	c1 a1       	ldd	r28, Z+33	; 0x21
 bea:	d2 a1       	ldd	r29, Z+34	; 0x22
 bec:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 bf0:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 bf4:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 bf8:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 bfc:	93 96       	adiw	r26, 0x23	; 35
 bfe:	6d 91       	ld	r22, X+
 c00:	7c 91       	ld	r23, X
 c02:	94 97       	sbiw	r26, 0x24	; 36
 c04:	80 81       	ld	r24, Z
 c06:	91 81       	ldd	r25, Z+1	; 0x01
 c08:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 c0c:	c8 17       	cp	r28, r24
 c0e:	d9 07       	cpc	r29, r25
 c10:	19 f4       	brne	.+6      	; 0xc18 <vTaskSwitchContext+0x132>
 c12:	0e 94 a9 06 	call	0xd52	; 0xd52 <vApplicationTaskChecksumHook>
 c16:	61 c0       	rjmp	.+194    	; 0xcda <vTaskSwitchContext+0x1f4>
 c18:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
 c1c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 c20:	0e 94 b4 03 	call	0x768	; 0x768 <vTaskDelete>
 c24:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 c28:	82 2f       	mov	r24, r18
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	fc 01       	movw	r30, r24
 c2e:	ee 0f       	add	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	ee 0f       	add	r30, r30
 c34:	ff 1f       	adc	r31, r31
 c36:	ee 0f       	add	r30, r30
 c38:	ff 1f       	adc	r31, r31
 c3a:	e8 0f       	add	r30, r24
 c3c:	f9 1f       	adc	r31, r25
 c3e:	e7 5b       	subi	r30, 0xB7	; 183
 c40:	fe 4f       	sbci	r31, 0xFE	; 254
 c42:	30 81       	ld	r19, Z
 c44:	31 11       	cpse	r19, r1
 c46:	11 c0       	rjmp	.+34     	; 0xc6a <vTaskSwitchContext+0x184>
 c48:	21 50       	subi	r18, 0x01	; 1
 c4a:	82 2f       	mov	r24, r18
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	fc 01       	movw	r30, r24
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	ee 0f       	add	r30, r30
 c56:	ff 1f       	adc	r31, r31
 c58:	ee 0f       	add	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	e8 0f       	add	r30, r24
 c5e:	f9 1f       	adc	r31, r25
 c60:	e7 5b       	subi	r30, 0xB7	; 183
 c62:	fe 4f       	sbci	r31, 0xFE	; 254
 c64:	30 81       	ld	r19, Z
 c66:	33 23       	and	r19, r19
 c68:	79 f3       	breq	.-34     	; 0xc48 <vTaskSwitchContext+0x162>
 c6a:	ac 01       	movw	r20, r24
 c6c:	44 0f       	add	r20, r20
 c6e:	55 1f       	adc	r21, r21
 c70:	44 0f       	add	r20, r20
 c72:	55 1f       	adc	r21, r21
 c74:	44 0f       	add	r20, r20
 c76:	55 1f       	adc	r21, r21
 c78:	48 0f       	add	r20, r24
 c7a:	59 1f       	adc	r21, r25
 c7c:	da 01       	movw	r26, r20
 c7e:	a7 5b       	subi	r26, 0xB7	; 183
 c80:	be 4f       	sbci	r27, 0xFE	; 254
 c82:	11 96       	adiw	r26, 0x01	; 1
 c84:	ed 91       	ld	r30, X+
 c86:	fc 91       	ld	r31, X
 c88:	12 97       	sbiw	r26, 0x02	; 2
 c8a:	02 80       	ldd	r0, Z+2	; 0x02
 c8c:	f3 81       	ldd	r31, Z+3	; 0x03
 c8e:	e0 2d       	mov	r30, r0
 c90:	12 96       	adiw	r26, 0x02	; 2
 c92:	fc 93       	st	X, r31
 c94:	ee 93       	st	-X, r30
 c96:	11 97       	sbiw	r26, 0x01	; 1
 c98:	44 5b       	subi	r20, 0xB4	; 180
 c9a:	5e 4f       	sbci	r21, 0xFE	; 254
 c9c:	e4 17       	cp	r30, r20
 c9e:	f5 07       	cpc	r31, r21
 ca0:	29 f4       	brne	.+10     	; 0xcac <vTaskSwitchContext+0x1c6>
 ca2:	42 81       	ldd	r20, Z+2	; 0x02
 ca4:	53 81       	ldd	r21, Z+3	; 0x03
 ca6:	fd 01       	movw	r30, r26
 ca8:	52 83       	std	Z+2, r21	; 0x02
 caa:	41 83       	std	Z+1, r20	; 0x01
 cac:	fc 01       	movw	r30, r24
 cae:	ee 0f       	add	r30, r30
 cb0:	ff 1f       	adc	r31, r31
 cb2:	ee 0f       	add	r30, r30
 cb4:	ff 1f       	adc	r31, r31
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	8e 0f       	add	r24, r30
 cbc:	9f 1f       	adc	r25, r31
 cbe:	fc 01       	movw	r30, r24
 cc0:	e7 5b       	subi	r30, 0xB7	; 183
 cc2:	fe 4f       	sbci	r31, 0xFE	; 254
 cc4:	01 80       	ldd	r0, Z+1	; 0x01
 cc6:	f2 81       	ldd	r31, Z+2	; 0x02
 cc8:	e0 2d       	mov	r30, r0
 cca:	86 81       	ldd	r24, Z+6	; 0x06
 ccc:	97 81       	ldd	r25, Z+7	; 0x07
 cce:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <pxCurrentTCB+0x1>
 cd2:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <pxCurrentTCB>
 cd6:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	08 95       	ret

00000ce0 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	00 d0       	rcall	.+0      	; 0xce6 <_Z7task_txPv+0x6>
 ce6:	cd b7       	in	r28, 0x3d	; 61
 ce8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
 cea:	8d e2       	ldi	r24, 0x2D	; 45
 cec:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 cee:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
 cf0:	82 e3       	ldi	r24, 0x32	; 50
 cf2:	89 83       	std	Y+1, r24	; 0x01
 cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <_Z7task_txPv+0x12>

00000cf6 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
 cf6:	cf 93       	push	r28
 cf8:	df 93       	push	r29
 cfa:	00 d0       	rcall	.+0      	; 0xcfc <_Z7task_rxPv+0x6>
 cfc:	cd b7       	in	r28, 0x3d	; 61
 cfe:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
 d00:	85 e5       	ldi	r24, 0x55	; 85
 d02:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 d04:	8d e2       	ldi	r24, 0x2D	; 45
 d06:	8a 83       	std	Y+2, r24	; 0x02
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <_Z7task_rxPv+0x12>

00000d0a <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
 d0a:	ef 92       	push	r14
 d0c:	ff 92       	push	r15
 d0e:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 d10:	8f ef       	ldi	r24, 0xFF	; 255
 d12:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 d14:	e1 2c       	mov	r14, r1
 d16:	f1 2c       	mov	r15, r1
 d18:	01 e0       	ldi	r16, 0x01	; 1
 d1a:	20 e0       	ldi	r18, 0x00	; 0
 d1c:	30 e0       	ldi	r19, 0x00	; 0
 d1e:	44 e6       	ldi	r20, 0x64	; 100
 d20:	50 e0       	ldi	r21, 0x00	; 0
 d22:	6b e0       	ldi	r22, 0x0B	; 11
 d24:	71 e0       	ldi	r23, 0x01	; 1
 d26:	80 e7       	ldi	r24, 0x70	; 112
 d28:	96 e0       	ldi	r25, 0x06	; 6
 d2a:	0e 94 91 02 	call	0x522	; 0x522 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 d2e:	20 e0       	ldi	r18, 0x00	; 0
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	44 e6       	ldi	r20, 0x64	; 100
 d34:	50 e0       	ldi	r21, 0x00	; 0
 d36:	6e e0       	ldi	r22, 0x0E	; 14
 d38:	71 e0       	ldi	r23, 0x01	; 1
 d3a:	8b e7       	ldi	r24, 0x7B	; 123
 d3c:	96 e0       	ldi	r25, 0x06	; 6
 d3e:	0e 94 91 02 	call	0x522	; 0x522 <xTaskCreate>
	vTaskStartScheduler();
 d42:	0e 94 09 04 	call	0x812	; 0x812 <vTaskStartScheduler>
	
	return 0;
}
 d46:	80 e0       	ldi	r24, 0x00	; 0
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	0f 91       	pop	r16
 d4c:	ff 90       	pop	r15
 d4e:	ef 90       	pop	r14
 d50:	08 95       	ret

00000d52 <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
 d52:	81 e0       	ldi	r24, 0x01	; 1
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <globa+0x1>
 d5a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <globa>
 d5e:	08 95       	ret

00000d60 <malloc>:
 d60:	0f 93       	push	r16
 d62:	1f 93       	push	r17
 d64:	cf 93       	push	r28
 d66:	df 93       	push	r29
 d68:	82 30       	cpi	r24, 0x02	; 2
 d6a:	91 05       	cpc	r25, r1
 d6c:	10 f4       	brcc	.+4      	; 0xd72 <malloc+0x12>
 d6e:	82 e0       	ldi	r24, 0x02	; 2
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <__flp>
 d76:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <__flp+0x1>
 d7a:	20 e0       	ldi	r18, 0x00	; 0
 d7c:	30 e0       	ldi	r19, 0x00	; 0
 d7e:	a0 e0       	ldi	r26, 0x00	; 0
 d80:	b0 e0       	ldi	r27, 0x00	; 0
 d82:	30 97       	sbiw	r30, 0x00	; 0
 d84:	19 f1       	breq	.+70     	; 0xdcc <malloc+0x6c>
 d86:	40 81       	ld	r20, Z
 d88:	51 81       	ldd	r21, Z+1	; 0x01
 d8a:	02 81       	ldd	r16, Z+2	; 0x02
 d8c:	13 81       	ldd	r17, Z+3	; 0x03
 d8e:	48 17       	cp	r20, r24
 d90:	59 07       	cpc	r21, r25
 d92:	c8 f0       	brcs	.+50     	; 0xdc6 <malloc+0x66>
 d94:	84 17       	cp	r24, r20
 d96:	95 07       	cpc	r25, r21
 d98:	69 f4       	brne	.+26     	; 0xdb4 <malloc+0x54>
 d9a:	10 97       	sbiw	r26, 0x00	; 0
 d9c:	31 f0       	breq	.+12     	; 0xdaa <malloc+0x4a>
 d9e:	12 96       	adiw	r26, 0x02	; 2
 da0:	0c 93       	st	X, r16
 da2:	12 97       	sbiw	r26, 0x02	; 2
 da4:	13 96       	adiw	r26, 0x03	; 3
 da6:	1c 93       	st	X, r17
 da8:	27 c0       	rjmp	.+78     	; 0xdf8 <malloc+0x98>
 daa:	00 93 73 01 	sts	0x0173, r16	; 0x800173 <__flp>
 dae:	10 93 74 01 	sts	0x0174, r17	; 0x800174 <__flp+0x1>
 db2:	22 c0       	rjmp	.+68     	; 0xdf8 <malloc+0x98>
 db4:	21 15       	cp	r18, r1
 db6:	31 05       	cpc	r19, r1
 db8:	19 f0       	breq	.+6      	; 0xdc0 <malloc+0x60>
 dba:	42 17       	cp	r20, r18
 dbc:	53 07       	cpc	r21, r19
 dbe:	18 f4       	brcc	.+6      	; 0xdc6 <malloc+0x66>
 dc0:	9a 01       	movw	r18, r20
 dc2:	bd 01       	movw	r22, r26
 dc4:	ef 01       	movw	r28, r30
 dc6:	df 01       	movw	r26, r30
 dc8:	f8 01       	movw	r30, r16
 dca:	db cf       	rjmp	.-74     	; 0xd82 <malloc+0x22>
 dcc:	21 15       	cp	r18, r1
 dce:	31 05       	cpc	r19, r1
 dd0:	f9 f0       	breq	.+62     	; 0xe10 <malloc+0xb0>
 dd2:	28 1b       	sub	r18, r24
 dd4:	39 0b       	sbc	r19, r25
 dd6:	24 30       	cpi	r18, 0x04	; 4
 dd8:	31 05       	cpc	r19, r1
 dda:	80 f4       	brcc	.+32     	; 0xdfc <malloc+0x9c>
 ddc:	8a 81       	ldd	r24, Y+2	; 0x02
 dde:	9b 81       	ldd	r25, Y+3	; 0x03
 de0:	61 15       	cp	r22, r1
 de2:	71 05       	cpc	r23, r1
 de4:	21 f0       	breq	.+8      	; 0xdee <malloc+0x8e>
 de6:	fb 01       	movw	r30, r22
 de8:	93 83       	std	Z+3, r25	; 0x03
 dea:	82 83       	std	Z+2, r24	; 0x02
 dec:	04 c0       	rjmp	.+8      	; 0xdf6 <malloc+0x96>
 dee:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <__flp+0x1>
 df2:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <__flp>
 df6:	fe 01       	movw	r30, r28
 df8:	32 96       	adiw	r30, 0x02	; 2
 dfa:	44 c0       	rjmp	.+136    	; 0xe84 <malloc+0x124>
 dfc:	fe 01       	movw	r30, r28
 dfe:	e2 0f       	add	r30, r18
 e00:	f3 1f       	adc	r31, r19
 e02:	81 93       	st	Z+, r24
 e04:	91 93       	st	Z+, r25
 e06:	22 50       	subi	r18, 0x02	; 2
 e08:	31 09       	sbc	r19, r1
 e0a:	39 83       	std	Y+1, r19	; 0x01
 e0c:	28 83       	st	Y, r18
 e0e:	3a c0       	rjmp	.+116    	; 0xe84 <malloc+0x124>
 e10:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
 e14:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
 e18:	23 2b       	or	r18, r19
 e1a:	41 f4       	brne	.+16     	; 0xe2c <malloc+0xcc>
 e1c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 e20:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 e24:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <__brkval+0x1>
 e28:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <__brkval>
 e2c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 e30:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 e34:	21 15       	cp	r18, r1
 e36:	31 05       	cpc	r19, r1
 e38:	41 f4       	brne	.+16     	; 0xe4a <malloc+0xea>
 e3a:	2d b7       	in	r18, 0x3d	; 61
 e3c:	3e b7       	in	r19, 0x3e	; 62
 e3e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 e42:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 e46:	24 1b       	sub	r18, r20
 e48:	35 0b       	sbc	r19, r21
 e4a:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__brkval>
 e4e:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__brkval+0x1>
 e52:	e2 17       	cp	r30, r18
 e54:	f3 07       	cpc	r31, r19
 e56:	a0 f4       	brcc	.+40     	; 0xe80 <malloc+0x120>
 e58:	2e 1b       	sub	r18, r30
 e5a:	3f 0b       	sbc	r19, r31
 e5c:	28 17       	cp	r18, r24
 e5e:	39 07       	cpc	r19, r25
 e60:	78 f0       	brcs	.+30     	; 0xe80 <malloc+0x120>
 e62:	ac 01       	movw	r20, r24
 e64:	4e 5f       	subi	r20, 0xFE	; 254
 e66:	5f 4f       	sbci	r21, 0xFF	; 255
 e68:	24 17       	cp	r18, r20
 e6a:	35 07       	cpc	r19, r21
 e6c:	48 f0       	brcs	.+18     	; 0xe80 <malloc+0x120>
 e6e:	4e 0f       	add	r20, r30
 e70:	5f 1f       	adc	r21, r31
 e72:	50 93 72 01 	sts	0x0172, r21	; 0x800172 <__brkval+0x1>
 e76:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <__brkval>
 e7a:	81 93       	st	Z+, r24
 e7c:	91 93       	st	Z+, r25
 e7e:	02 c0       	rjmp	.+4      	; 0xe84 <malloc+0x124>
 e80:	e0 e0       	ldi	r30, 0x00	; 0
 e82:	f0 e0       	ldi	r31, 0x00	; 0
 e84:	cf 01       	movw	r24, r30
 e86:	df 91       	pop	r29
 e88:	cf 91       	pop	r28
 e8a:	1f 91       	pop	r17
 e8c:	0f 91       	pop	r16
 e8e:	08 95       	ret

00000e90 <free>:
 e90:	cf 93       	push	r28
 e92:	df 93       	push	r29
 e94:	00 97       	sbiw	r24, 0x00	; 0
 e96:	09 f4       	brne	.+2      	; 0xe9a <free+0xa>
 e98:	81 c0       	rjmp	.+258    	; 0xf9c <free+0x10c>
 e9a:	fc 01       	movw	r30, r24
 e9c:	32 97       	sbiw	r30, 0x02	; 2
 e9e:	13 82       	std	Z+3, r1	; 0x03
 ea0:	12 82       	std	Z+2, r1	; 0x02
 ea2:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <__flp>
 ea6:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <__flp+0x1>
 eaa:	10 97       	sbiw	r26, 0x00	; 0
 eac:	81 f4       	brne	.+32     	; 0xece <free+0x3e>
 eae:	20 81       	ld	r18, Z
 eb0:	31 81       	ldd	r19, Z+1	; 0x01
 eb2:	82 0f       	add	r24, r18
 eb4:	93 1f       	adc	r25, r19
 eb6:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
 eba:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
 ebe:	28 17       	cp	r18, r24
 ec0:	39 07       	cpc	r19, r25
 ec2:	51 f5       	brne	.+84     	; 0xf18 <free+0x88>
 ec4:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__brkval+0x1>
 ec8:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__brkval>
 ecc:	67 c0       	rjmp	.+206    	; 0xf9c <free+0x10c>
 ece:	ed 01       	movw	r28, r26
 ed0:	20 e0       	ldi	r18, 0x00	; 0
 ed2:	30 e0       	ldi	r19, 0x00	; 0
 ed4:	ce 17       	cp	r28, r30
 ed6:	df 07       	cpc	r29, r31
 ed8:	40 f4       	brcc	.+16     	; 0xeea <free+0x5a>
 eda:	4a 81       	ldd	r20, Y+2	; 0x02
 edc:	5b 81       	ldd	r21, Y+3	; 0x03
 ede:	9e 01       	movw	r18, r28
 ee0:	41 15       	cp	r20, r1
 ee2:	51 05       	cpc	r21, r1
 ee4:	f1 f0       	breq	.+60     	; 0xf22 <free+0x92>
 ee6:	ea 01       	movw	r28, r20
 ee8:	f5 cf       	rjmp	.-22     	; 0xed4 <free+0x44>
 eea:	d3 83       	std	Z+3, r29	; 0x03
 eec:	c2 83       	std	Z+2, r28	; 0x02
 eee:	40 81       	ld	r20, Z
 ef0:	51 81       	ldd	r21, Z+1	; 0x01
 ef2:	84 0f       	add	r24, r20
 ef4:	95 1f       	adc	r25, r21
 ef6:	c8 17       	cp	r28, r24
 ef8:	d9 07       	cpc	r29, r25
 efa:	59 f4       	brne	.+22     	; 0xf12 <free+0x82>
 efc:	88 81       	ld	r24, Y
 efe:	99 81       	ldd	r25, Y+1	; 0x01
 f00:	84 0f       	add	r24, r20
 f02:	95 1f       	adc	r25, r21
 f04:	02 96       	adiw	r24, 0x02	; 2
 f06:	91 83       	std	Z+1, r25	; 0x01
 f08:	80 83       	st	Z, r24
 f0a:	8a 81       	ldd	r24, Y+2	; 0x02
 f0c:	9b 81       	ldd	r25, Y+3	; 0x03
 f0e:	93 83       	std	Z+3, r25	; 0x03
 f10:	82 83       	std	Z+2, r24	; 0x02
 f12:	21 15       	cp	r18, r1
 f14:	31 05       	cpc	r19, r1
 f16:	29 f4       	brne	.+10     	; 0xf22 <free+0x92>
 f18:	f0 93 74 01 	sts	0x0174, r31	; 0x800174 <__flp+0x1>
 f1c:	e0 93 73 01 	sts	0x0173, r30	; 0x800173 <__flp>
 f20:	3d c0       	rjmp	.+122    	; 0xf9c <free+0x10c>
 f22:	e9 01       	movw	r28, r18
 f24:	fb 83       	std	Y+3, r31	; 0x03
 f26:	ea 83       	std	Y+2, r30	; 0x02
 f28:	49 91       	ld	r20, Y+
 f2a:	59 91       	ld	r21, Y+
 f2c:	c4 0f       	add	r28, r20
 f2e:	d5 1f       	adc	r29, r21
 f30:	ec 17       	cp	r30, r28
 f32:	fd 07       	cpc	r31, r29
 f34:	61 f4       	brne	.+24     	; 0xf4e <free+0xbe>
 f36:	80 81       	ld	r24, Z
 f38:	91 81       	ldd	r25, Z+1	; 0x01
 f3a:	84 0f       	add	r24, r20
 f3c:	95 1f       	adc	r25, r21
 f3e:	02 96       	adiw	r24, 0x02	; 2
 f40:	e9 01       	movw	r28, r18
 f42:	99 83       	std	Y+1, r25	; 0x01
 f44:	88 83       	st	Y, r24
 f46:	82 81       	ldd	r24, Z+2	; 0x02
 f48:	93 81       	ldd	r25, Z+3	; 0x03
 f4a:	9b 83       	std	Y+3, r25	; 0x03
 f4c:	8a 83       	std	Y+2, r24	; 0x02
 f4e:	e0 e0       	ldi	r30, 0x00	; 0
 f50:	f0 e0       	ldi	r31, 0x00	; 0
 f52:	12 96       	adiw	r26, 0x02	; 2
 f54:	8d 91       	ld	r24, X+
 f56:	9c 91       	ld	r25, X
 f58:	13 97       	sbiw	r26, 0x03	; 3
 f5a:	00 97       	sbiw	r24, 0x00	; 0
 f5c:	19 f0       	breq	.+6      	; 0xf64 <free+0xd4>
 f5e:	fd 01       	movw	r30, r26
 f60:	dc 01       	movw	r26, r24
 f62:	f7 cf       	rjmp	.-18     	; 0xf52 <free+0xc2>
 f64:	8d 91       	ld	r24, X+
 f66:	9c 91       	ld	r25, X
 f68:	11 97       	sbiw	r26, 0x01	; 1
 f6a:	9d 01       	movw	r18, r26
 f6c:	2e 5f       	subi	r18, 0xFE	; 254
 f6e:	3f 4f       	sbci	r19, 0xFF	; 255
 f70:	82 0f       	add	r24, r18
 f72:	93 1f       	adc	r25, r19
 f74:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
 f78:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
 f7c:	28 17       	cp	r18, r24
 f7e:	39 07       	cpc	r19, r25
 f80:	69 f4       	brne	.+26     	; 0xf9c <free+0x10c>
 f82:	30 97       	sbiw	r30, 0x00	; 0
 f84:	29 f4       	brne	.+10     	; 0xf90 <free+0x100>
 f86:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__flp+0x1>
 f8a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__flp>
 f8e:	02 c0       	rjmp	.+4      	; 0xf94 <free+0x104>
 f90:	13 82       	std	Z+3, r1	; 0x03
 f92:	12 82       	std	Z+2, r1	; 0x02
 f94:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <__brkval+0x1>
 f98:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <__brkval>
 f9c:	df 91       	pop	r29
 f9e:	cf 91       	pop	r28
 fa0:	08 95       	ret

00000fa2 <memset>:
 fa2:	dc 01       	movw	r26, r24
 fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <memset+0x6>
 fa6:	6d 93       	st	X+, r22
 fa8:	41 50       	subi	r20, 0x01	; 1
 faa:	50 40       	sbci	r21, 0x00	; 0
 fac:	e0 f7       	brcc	.-8      	; 0xfa6 <memset+0x4>
 fae:	08 95       	ret

00000fb0 <_exit>:
 fb0:	f8 94       	cli

00000fb2 <__stop_program>:
 fb2:	ff cf       	rjmp	.-2      	; 0xfb2 <__stop_program>
