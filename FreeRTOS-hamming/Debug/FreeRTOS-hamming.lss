
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ee0  00000f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800112  00800112  00000f86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d8a  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e03  00000000  00000000  00003ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e7  00000000  00000000  00004dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  000067e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001215  00000000  00000000  00006efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002798  00000000  00000000  00008111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000a8a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 37       	cpi	r26, 0x73	; 115
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 18 06 	call	0xc30	; 0xc30 <main>
  9e:	0c 94 6e 07 	jmp	0xedc	; 0xedc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
}

#elif( configSUPPORT_TASK_CHECKSUM==2 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <uxChecksumGetTaskChecksum+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	fc 01       	movw	r30, r24
	uint16_t	usPolinomio=0x8408;
	uint8_t	i;
	uint16_t	usData;
	volatile uint16_t	usCrc;
	usCrc=0xffff;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
	
	if(pxStartOfStack==pxEndOfStack){
  ba:	e6 17       	cp	r30, r22
  bc:	f7 07       	cpc	r31, r23
  be:	29 f4       	brne	.+10     	; 0xca <uxChecksumGetTaskChecksum+0x24>
		return	(~usCrc);
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	80 95       	com	r24
  c6:	90 95       	com	r25
  c8:	36 c0       	rjmp	.+108    	; 0x136 <uxChecksumGetTaskChecksum+0x90>
	}
	do{
		for (i = 0, usData = (uint16_t)0xff & *pxStartOfStack; i < 8; i++, usData >>= 1) {
  ca:	40 81       	ld	r20, Z
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	98 e0       	ldi	r25, 0x08	; 8
			if((usCrc & 0x0001)^(usData & 0x0001)){
  d0:	29 81       	ldd	r18, Y+1	; 0x01
  d2:	3a 81       	ldd	r19, Y+2	; 0x02
  d4:	24 27       	eor	r18, r20
  d6:	35 27       	eor	r19, r21
  d8:	20 ff       	sbrs	r18, 0
  da:	0b c0       	rjmp	.+22     	; 0xf2 <uxChecksumGetTaskChecksum+0x4c>
				usCrc = (usCrc >> 1)^usPolinomio;
  dc:	29 81       	ldd	r18, Y+1	; 0x01
  de:	3a 81       	ldd	r19, Y+2	; 0x02
  e0:	36 95       	lsr	r19
  e2:	27 95       	ror	r18
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	28 27       	eor	r18, r24
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	38 27       	eor	r19, r24
  ec:	3a 83       	std	Y+2, r19	; 0x02
  ee:	29 83       	std	Y+1, r18	; 0x01
  f0:	06 c0       	rjmp	.+12     	; 0xfe <uxChecksumGetTaskChecksum+0x58>
			}
			else{
				usCrc >>= 1;
  f2:	29 81       	ldd	r18, Y+1	; 0x01
  f4:	3a 81       	ldd	r19, Y+2	; 0x02
  f6:	36 95       	lsr	r19
  f8:	27 95       	ror	r18
  fa:	3a 83       	std	Y+2, r19	; 0x02
  fc:	29 83       	std	Y+1, r18	; 0x01
	
	if(pxStartOfStack==pxEndOfStack){
		return	(~usCrc);
	}
	do{
		for (i = 0, usData = (uint16_t)0xff & *pxStartOfStack; i < 8; i++, usData >>= 1) {
  fe:	56 95       	lsr	r21
 100:	47 95       	ror	r20
 102:	91 50       	subi	r25, 0x01	; 1
 104:	29 f7       	brne	.-54     	; 0xd0 <uxChecksumGetTaskChecksum+0x2a>
			}
			else{
				usCrc >>= 1;
			}
		}
		pxStartOfStack-=portSTACK_GROWTH;
 106:	31 96       	adiw	r30, 0x01	; 1
	} while (pxEndOfStack != pxStartOfStack);
 108:	6e 17       	cp	r22, r30
 10a:	7f 07       	cpc	r23, r31
 10c:	f1 f6       	brne	.-68     	; 0xca <uxChecksumGetTaskChecksum+0x24>
	usCrc = ~usCrc;
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
 112:	80 95       	com	r24
 114:	90 95       	com	r25
 116:	9a 83       	std	Y+2, r25	; 0x02
 118:	89 83       	std	Y+1, r24	; 0x01
	usData = usCrc;
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
	usCrc = (usCrc << 8)|(usData >> 8 & 0xff);
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	3a 81       	ldd	r19, Y+2	; 0x02
 122:	32 2f       	mov	r19, r18
 124:	22 27       	eor	r18, r18
 126:	89 2f       	mov	r24, r25
 128:	99 27       	eor	r25, r25
 12a:	82 2b       	or	r24, r18
 12c:	93 2b       	or	r25, r19
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
	return usCrc;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <vApplicationTaskChecksumSucceedHook>:
	
#endif

#if ( configUSE_TASK_CHECKSUM_HOOK == 1 )

	vApplicationTaskChecksumSucceedHook(){
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	1f 92       	push	r1
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
		volatile char a=10;
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	89 83       	std	Y+1, r24	; 0x01
	}
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
 15c:	0e 94 25 04 	call	0x84a	; 0x84a <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 160:	ce 01       	movw	r24, r28
 162:	0e 94 46 06 	call	0xc8c	; 0xc8c <malloc>
 166:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 168:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 16c:	ce 01       	movw	r24, r28
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	if( pv )
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	41 f0       	breq	.+16     	; 0x18c <vPortFree+0x18>
 17c:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
 17e:	0e 94 25 04 	call	0x84a	; 0x84a <vTaskSuspendAll>
		{
			free( pv );
 182:	ce 01       	movw	r24, r28
 184:	0e 94 de 06 	call	0xdbc	; 0xdbc <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 188:	0e 94 e6 04 	call	0x9cc	; 0x9cc <xTaskResumeAll>
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 192:	fc 01       	movw	r30, r24
 194:	03 96       	adiw	r24, 0x03	; 3
 196:	92 83       	std	Z+2, r25	; 0x02
 198:	81 83       	std	Z+1, r24	; 0x01
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	3f ef       	ldi	r19, 0xFF	; 255
 19e:	34 83       	std	Z+4, r19	; 0x04
 1a0:	23 83       	std	Z+3, r18	; 0x03
 1a2:	96 83       	std	Z+6, r25	; 0x06
 1a4:	85 83       	std	Z+5, r24	; 0x05
 1a6:	90 87       	std	Z+8, r25	; 0x08
 1a8:	87 83       	std	Z+7, r24	; 0x07
 1aa:	10 82       	st	Z, r1
 1ac:	08 95       	ret

000001ae <vListInitialiseItem>:
 1ae:	fc 01       	movw	r30, r24
 1b0:	11 86       	std	Z+9, r1	; 0x09
 1b2:	10 86       	std	Z+8, r1	; 0x08
 1b4:	08 95       	ret

000001b6 <vListInsertEnd>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	9c 01       	movw	r18, r24
 1bc:	fb 01       	movw	r30, r22
 1be:	dc 01       	movw	r26, r24
 1c0:	11 96       	adiw	r26, 0x01	; 1
 1c2:	cd 91       	ld	r28, X+
 1c4:	dc 91       	ld	r29, X
 1c6:	12 97       	sbiw	r26, 0x02	; 2
 1c8:	d3 83       	std	Z+3, r29	; 0x03
 1ca:	c2 83       	std	Z+2, r28	; 0x02
 1cc:	8c 81       	ldd	r24, Y+4	; 0x04
 1ce:	9d 81       	ldd	r25, Y+5	; 0x05
 1d0:	95 83       	std	Z+5, r25	; 0x05
 1d2:	84 83       	std	Z+4, r24	; 0x04
 1d4:	8c 81       	ldd	r24, Y+4	; 0x04
 1d6:	9d 81       	ldd	r25, Y+5	; 0x05
 1d8:	dc 01       	movw	r26, r24
 1da:	13 96       	adiw	r26, 0x03	; 3
 1dc:	7c 93       	st	X, r23
 1de:	6e 93       	st	-X, r22
 1e0:	12 97       	sbiw	r26, 0x02	; 2
 1e2:	7d 83       	std	Y+5, r23	; 0x05
 1e4:	6c 83       	std	Y+4, r22	; 0x04
 1e6:	31 87       	std	Z+9, r19	; 0x09
 1e8:	20 87       	std	Z+8, r18	; 0x08
 1ea:	f9 01       	movw	r30, r18
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 83       	st	Z, r24
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 246:	31 e1       	ldi	r19, 0x11	; 17
 248:	fc 01       	movw	r30, r24
 24a:	30 83       	st	Z, r19
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	22 e2       	ldi	r18, 0x22	; 34
 250:	20 83       	st	Z, r18
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	a3 e3       	ldi	r26, 0x33	; 51
 256:	a0 83       	st	Z, r26
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	60 83       	st	Z, r22
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	70 83       	st	Z, r23
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	10 82       	st	Z, r1
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	60 e8       	ldi	r22, 0x80	; 128
 268:	60 83       	st	Z, r22
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	10 82       	st	Z, r1
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	60 83       	st	Z, r22
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	60 83       	st	Z, r22
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	60 83       	st	Z, r22
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	60 83       	st	Z, r22
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	66 e0       	ldi	r22, 0x06	; 6
 28a:	60 83       	st	Z, r22
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	60 83       	st	Z, r22
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	68 e0       	ldi	r22, 0x08	; 8
 296:	60 83       	st	Z, r22
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	69 e0       	ldi	r22, 0x09	; 9
 29c:	60 83       	st	Z, r22
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	60 e1       	ldi	r22, 0x10	; 16
 2a2:	60 83       	st	Z, r22
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	30 83       	st	Z, r19
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	32 e1       	ldi	r19, 0x12	; 18
 2ac:	30 83       	st	Z, r19
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	33 e1       	ldi	r19, 0x13	; 19
 2b2:	30 83       	st	Z, r19
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	34 e1       	ldi	r19, 0x14	; 20
 2b8:	30 83       	st	Z, r19
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	35 e1       	ldi	r19, 0x15	; 21
 2be:	30 83       	st	Z, r19
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	36 e1       	ldi	r19, 0x16	; 22
 2c4:	30 83       	st	Z, r19
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	37 e1       	ldi	r19, 0x17	; 23
 2ca:	30 83       	st	Z, r19
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	38 e1       	ldi	r19, 0x18	; 24
 2d0:	30 83       	st	Z, r19
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	39 e1       	ldi	r19, 0x19	; 25
 2d6:	30 83       	st	Z, r19
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	30 e2       	ldi	r19, 0x20	; 32
 2dc:	30 83       	st	Z, r19
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	31 e2       	ldi	r19, 0x21	; 33
 2e2:	30 83       	st	Z, r19
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	20 83       	st	Z, r18
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	23 e2       	ldi	r18, 0x23	; 35
 2ec:	20 83       	st	Z, r18
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	40 83       	st	Z, r20
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	50 83       	st	Z, r21
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	26 e2       	ldi	r18, 0x26	; 38
 2fa:	20 83       	st	Z, r18
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	27 e2       	ldi	r18, 0x27	; 39
 300:	20 83       	st	Z, r18
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	28 e2       	ldi	r18, 0x28	; 40
 306:	20 83       	st	Z, r18
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	29 e2       	ldi	r18, 0x29	; 41
 30c:	20 83       	st	Z, r18
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	20 e3       	ldi	r18, 0x30	; 48
 312:	20 83       	st	Z, r18
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	21 e3       	ldi	r18, 0x31	; 49
 318:	20 83       	st	Z, r18
 31a:	86 97       	sbiw	r24, 0x26	; 38
 31c:	08 95       	ret

0000031e <xPortStartScheduler>:
 31e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 322:	89 ef       	ldi	r24, 0xF9	; 249
 324:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 328:	8b e0       	ldi	r24, 0x0B	; 11
 32a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 32e:	ef e6       	ldi	r30, 0x6F	; 111
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	82 60       	ori	r24, 0x02	; 2
 336:	80 83       	st	Z, r24
 338:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 33c:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 340:	cd 91       	ld	r28, X+
 342:	cd bf       	out	0x3d, r28	; 61
 344:	dd 91       	ld	r29, X+
 346:	de bf       	out	0x3e, r29	; 62
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	bf 90       	pop	r11
 372:	af 90       	pop	r10
 374:	9f 90       	pop	r9
 376:	8f 90       	pop	r8
 378:	7f 90       	pop	r7
 37a:	6f 90       	pop	r6
 37c:	5f 90       	pop	r5
 37e:	4f 90       	pop	r4
 380:	3f 90       	pop	r3
 382:	2f 90       	pop	r2
 384:	1f 90       	pop	r1
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	08 95       	ret
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	08 95       	ret

00000392 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	0f 92       	push	r0
 39a:	1f 92       	push	r1
 39c:	11 24       	eor	r1, r1
 39e:	2f 92       	push	r2
 3a0:	3f 92       	push	r3
 3a2:	4f 92       	push	r4
 3a4:	5f 92       	push	r5
 3a6:	6f 92       	push	r6
 3a8:	7f 92       	push	r7
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	af 92       	push	r10
 3b0:	bf 92       	push	r11
 3b2:	cf 92       	push	r12
 3b4:	df 92       	push	r13
 3b6:	ef 92       	push	r14
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
 3da:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 3de:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 3e2:	0d b6       	in	r0, 0x3d	; 61
 3e4:	0d 92       	st	X+, r0
 3e6:	0e b6       	in	r0, 0x3e	; 62
 3e8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 3ea:	0e 94 65 05 	call	0xaca	; 0xaca <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 3ee:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 3f2:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 3f6:	cd 91       	ld	r28, X+
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	dd 91       	ld	r29, X+
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	9f 90       	pop	r9
 42c:	8f 90       	pop	r8
 42e:	7f 90       	pop	r7
 430:	6f 90       	pop	r6
 432:	5f 90       	pop	r5
 434:	4f 90       	pop	r4
 436:	3f 90       	pop	r3
 438:	2f 90       	pop	r2
 43a:	1f 90       	pop	r1
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0

	asm volatile ( "ret" );
 442:	08 95       	ret

00000444 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	0f 92       	push	r0
 44c:	1f 92       	push	r1
 44e:	11 24       	eor	r1, r1
 450:	2f 92       	push	r2
 452:	3f 92       	push	r3
 454:	4f 92       	push	r4
 456:	5f 92       	push	r5
 458:	6f 92       	push	r6
 45a:	7f 92       	push	r7
 45c:	8f 92       	push	r8
 45e:	9f 92       	push	r9
 460:	af 92       	push	r10
 462:	bf 92       	push	r11
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 490:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 494:	0d b6       	in	r0, 0x3d	; 61
 496:	0d 92       	st	X+, r0
 498:	0e b6       	in	r0, 0x3e	; 62
 49a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 49c:	0e 94 2b 04 	call	0x856	; 0x856 <xTaskIncrementTick>
 4a0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 4a2:	0e 94 65 05 	call	0xaca	; 0xaca <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 4a6:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 4aa:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 4ae:	cd 91       	ld	r28, X+
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	dd 91       	ld	r29, X+
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	bf 91       	pop	r27
 4c0:	af 91       	pop	r26
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	7f 91       	pop	r23
 4c8:	6f 91       	pop	r22
 4ca:	5f 91       	pop	r21
 4cc:	4f 91       	pop	r20
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	9f 90       	pop	r9
 4e4:	8f 90       	pop	r8
 4e6:	7f 90       	pop	r7
 4e8:	6f 90       	pop	r6
 4ea:	5f 90       	pop	r5
 4ec:	4f 90       	pop	r4
 4ee:	3f 90       	pop	r3
 4f0:	2f 90       	pop	r2
 4f2:	1f 90       	pop	r1
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4fa:	08 95       	ret

000004fc <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 4fc:	0e 94 22 02 	call	0x444	; 0x444 <vPortYieldFromTick>
		asm volatile ( "reti" );
 500:	18 95       	reti

00000502 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 502:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 506:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 50a:	80 81       	ld	r24, Z
 50c:	81 11       	cpse	r24, r1
 50e:	07 c0       	rjmp	.+14     	; 0x51e <prvResetNextTaskUnblockTime+0x1c>
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 518:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 51c:	08 95       	ret
 51e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 522:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 526:	05 80       	ldd	r0, Z+5	; 0x05
 528:	f6 81       	ldd	r31, Z+6	; 0x06
 52a:	e0 2d       	mov	r30, r0
 52c:	06 80       	ldd	r0, Z+6	; 0x06
 52e:	f7 81       	ldd	r31, Z+7	; 0x07
 530:	e0 2d       	mov	r30, r0
 532:	82 81       	ldd	r24, Z+2	; 0x02
 534:	93 81       	ldd	r25, Z+3	; 0x03
 536:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 53a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 53e:	08 95       	ret

00000540 <prvIdleTask>:
 540:	01 e2       	ldi	r16, 0x21	; 33
 542:	11 e0       	ldi	r17, 0x01	; 1
 544:	0f 2e       	mov	r0, r31
 546:	f9 e4       	ldi	r31, 0x49	; 73
 548:	ef 2e       	mov	r14, r31
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	ff 2e       	mov	r15, r31
 54e:	f0 2d       	mov	r31, r0
 550:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 554:	88 23       	and	r24, r24
 556:	29 f1       	breq	.+74     	; 0x5a2 <prvIdleTask+0x62>
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	0f 92       	push	r0
 55e:	d8 01       	movw	r26, r16
 560:	15 96       	adiw	r26, 0x05	; 5
 562:	ed 91       	ld	r30, X+
 564:	fc 91       	ld	r31, X
 566:	16 97       	sbiw	r26, 0x06	; 6
 568:	c6 81       	ldd	r28, Z+6	; 0x06
 56a:	d7 81       	ldd	r29, Z+7	; 0x07
 56c:	ce 01       	movw	r24, r28
 56e:	02 96       	adiw	r24, 0x02	; 2
 570:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uxListRemove>
 574:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 578:	81 50       	subi	r24, 0x01	; 1
 57a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 57e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 582:	81 50       	subi	r24, 0x01	; 1
 584:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	8f 89       	ldd	r24, Y+23	; 0x17
 58e:	98 8d       	ldd	r25, Y+24	; 0x18
 590:	0e 94 ba 00 	call	0x174	; 0x174 <vPortFree>
 594:	ce 01       	movw	r24, r28
 596:	0e 94 ba 00 	call	0x174	; 0x174 <vPortFree>
 59a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
 59e:	81 11       	cpse	r24, r1
 5a0:	db cf       	rjmp	.-74     	; 0x558 <prvIdleTask+0x18>
 5a2:	f7 01       	movw	r30, r14
 5a4:	80 81       	ld	r24, Z
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	98 f2       	brcs	.-90     	; 0x550 <prvIdleTask+0x10>
 5aa:	0e 94 c9 01 	call	0x392	; 0x392 <vPortYield>
 5ae:	d0 cf       	rjmp	.-96     	; 0x550 <prvIdleTask+0x10>

000005b0 <xTaskCreate>:
 5b0:	4f 92       	push	r4
 5b2:	5f 92       	push	r5
 5b4:	6f 92       	push	r6
 5b6:	7f 92       	push	r7
 5b8:	8f 92       	push	r8
 5ba:	9f 92       	push	r9
 5bc:	af 92       	push	r10
 5be:	bf 92       	push	r11
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	4c 01       	movw	r8, r24
 5d0:	6b 01       	movw	r12, r22
 5d2:	5a 01       	movw	r10, r20
 5d4:	29 01       	movw	r4, r18
 5d6:	ca 01       	movw	r24, r20
 5d8:	0e 94 ab 00 	call	0x156	; 0x156 <pvPortMalloc>
 5dc:	3c 01       	movw	r6, r24
 5de:	89 2b       	or	r24, r25
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <xTaskCreate+0x34>
 5e2:	f8 c0       	rjmp	.+496    	; 0x7d4 <xTaskCreate+0x224>
 5e4:	8c e2       	ldi	r24, 0x2C	; 44
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 ab 00 	call	0x156	; 0x156 <pvPortMalloc>
 5ec:	ec 01       	movw	r28, r24
 5ee:	89 2b       	or	r24, r25
 5f0:	c1 f0       	breq	.+48     	; 0x622 <xTaskCreate+0x72>
 5f2:	78 8e       	std	Y+24, r7	; 0x18
 5f4:	6f 8a       	std	Y+23, r6	; 0x17
 5f6:	a5 01       	movw	r20, r10
 5f8:	65 ea       	ldi	r22, 0xA5	; 165
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	c3 01       	movw	r24, r6
 5fe:	0e 94 67 07 	call	0xece	; 0xece <memset>
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	a8 1a       	sub	r10, r24
 606:	b1 08       	sbc	r11, r1
 608:	8f 89       	ldd	r24, Y+23	; 0x17
 60a:	98 8d       	ldd	r25, Y+24	; 0x18
 60c:	a8 0e       	add	r10, r24
 60e:	b9 1e       	adc	r11, r25
 610:	bc a2       	std	Y+36, r11	; 0x24
 612:	ab a2       	std	Y+35, r10	; 0x23
 614:	d6 01       	movw	r26, r12
 616:	8c 91       	ld	r24, X
 618:	89 8f       	std	Y+25, r24	; 0x19
 61a:	8c 91       	ld	r24, X
 61c:	81 11       	cpse	r24, r1
 61e:	05 c0       	rjmp	.+10     	; 0x62a <xTaskCreate+0x7a>
 620:	18 c0       	rjmp	.+48     	; 0x652 <xTaskCreate+0xa2>
 622:	c3 01       	movw	r24, r6
 624:	0e 94 ba 00 	call	0x174	; 0x174 <vPortFree>
 628:	d5 c0       	rjmp	.+426    	; 0x7d4 <xTaskCreate+0x224>
 62a:	ae 01       	movw	r20, r28
 62c:	46 5e       	subi	r20, 0xE6	; 230
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	f6 01       	movw	r30, r12
 632:	31 96       	adiw	r30, 0x01	; 1
 634:	b8 e0       	ldi	r27, 0x08	; 8
 636:	cb 0e       	add	r12, r27
 638:	d1 1c       	adc	r13, r1
 63a:	cf 01       	movw	r24, r30
 63c:	21 91       	ld	r18, Z+
 63e:	da 01       	movw	r26, r20
 640:	2d 93       	st	X+, r18
 642:	ad 01       	movw	r20, r26
 644:	dc 01       	movw	r26, r24
 646:	8c 91       	ld	r24, X
 648:	88 23       	and	r24, r24
 64a:	19 f0       	breq	.+6      	; 0x652 <xTaskCreate+0xa2>
 64c:	ec 15       	cp	r30, r12
 64e:	fd 05       	cpc	r31, r13
 650:	a1 f7       	brne	.-24     	; 0x63a <xTaskCreate+0x8a>
 652:	18 a2       	std	Y+32, r1	; 0x20
 654:	04 30       	cpi	r16, 0x04	; 4
 656:	08 f0       	brcs	.+2      	; 0x65a <xTaskCreate+0xaa>
 658:	03 e0       	ldi	r16, 0x03	; 3
 65a:	0e 8b       	std	Y+22, r16	; 0x16
 65c:	0d a3       	std	Y+37, r16	; 0x25
 65e:	1e a2       	std	Y+38, r1	; 0x26
 660:	6e 01       	movw	r12, r28
 662:	b2 e0       	ldi	r27, 0x02	; 2
 664:	cb 0e       	add	r12, r27
 666:	d1 1c       	adc	r13, r1
 668:	c6 01       	movw	r24, r12
 66a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialiseItem>
 66e:	ce 01       	movw	r24, r28
 670:	0c 96       	adiw	r24, 0x0c	; 12
 672:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialiseItem>
 676:	d9 87       	std	Y+9, r29	; 0x09
 678:	c8 87       	std	Y+8, r28	; 0x08
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	80 1b       	sub	r24, r16
 680:	91 09       	sbc	r25, r1
 682:	9d 87       	std	Y+13, r25	; 0x0d
 684:	8c 87       	std	Y+12, r24	; 0x0c
 686:	db 8b       	std	Y+19, r29	; 0x13
 688:	ca 8b       	std	Y+18, r28	; 0x12
 68a:	1f a2       	std	Y+39, r1	; 0x27
 68c:	18 a6       	std	Y+40, r1	; 0x28
 68e:	19 a6       	std	Y+41, r1	; 0x29
 690:	1a a6       	std	Y+42, r1	; 0x2a
 692:	1b a6       	std	Y+43, r1	; 0x2b
 694:	a2 01       	movw	r20, r4
 696:	b4 01       	movw	r22, r8
 698:	c5 01       	movw	r24, r10
 69a:	0e 94 23 01 	call	0x246	; 0x246 <pxPortInitialiseStack>
 69e:	99 83       	std	Y+1, r25	; 0x01
 6a0:	88 83       	st	Y, r24
 6a2:	e1 14       	cp	r14, r1
 6a4:	f1 04       	cpc	r15, r1
 6a6:	19 f0       	breq	.+6      	; 0x6ae <xTaskCreate+0xfe>
 6a8:	f7 01       	movw	r30, r14
 6aa:	d1 83       	std	Z+1, r29	; 0x01
 6ac:	c0 83       	st	Z, r28
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	0f 92       	push	r0
 6b4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 6be:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
 6c2:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 6c6:	89 2b       	or	r24, r25
 6c8:	a9 f5       	brne	.+106    	; 0x734 <xTaskCreate+0x184>
 6ca:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
 6ce:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
 6d2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	e9 f5       	brne	.+122    	; 0x754 <xTaskCreate+0x1a4>
 6da:	89 e4       	ldi	r24, 0x49	; 73
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 6e2:	82 e5       	ldi	r24, 0x52	; 82
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 6ea:	8b e5       	ldi	r24, 0x5B	; 91
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 6f2:	84 e6       	ldi	r24, 0x64	; 100
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 6fa:	80 e4       	ldi	r24, 0x40	; 64
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 702:	87 e3       	ldi	r24, 0x37	; 55
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 70a:	8a e2       	ldi	r24, 0x2A	; 42
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 712:	81 e2       	ldi	r24, 0x21	; 33
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	0e 94 c9 00 	call	0x192	; 0x192 <vListInitialise>
 71a:	80 e4       	ldi	r24, 0x40	; 64
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <pxDelayedTaskList+0x1>
 722:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <pxDelayedTaskList>
 726:	87 e3       	ldi	r24, 0x37	; 55
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 72e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
 732:	10 c0       	rjmp	.+32     	; 0x754 <xTaskCreate+0x1a4>
 734:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 738:	81 11       	cpse	r24, r1
 73a:	0c c0       	rjmp	.+24     	; 0x754 <xTaskCreate+0x1a4>
 73c:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 740:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 744:	96 89       	ldd	r25, Z+22	; 0x16
 746:	8e 89       	ldd	r24, Y+22	; 0x16
 748:	89 17       	cp	r24, r25
 74a:	20 f0       	brcs	.+8      	; 0x754 <xTaskCreate+0x1a4>
 74c:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
 750:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
 754:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 758:	8f 5f       	subi	r24, 0xFF	; 255
 75a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 75e:	e0 90 6d 01 	lds	r14, 0x016D	; 0x80016d <pxCurrentTCB>
 762:	f0 90 6e 01 	lds	r15, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 766:	6b a1       	ldd	r22, Y+35	; 0x23
 768:	7c a1       	ldd	r23, Y+36	; 0x24
 76a:	88 81       	ld	r24, Y
 76c:	99 81       	ldd	r25, Y+1	; 0x01
 76e:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 772:	d7 01       	movw	r26, r14
 774:	92 96       	adiw	r26, 0x22	; 34
 776:	9c 93       	st	X, r25
 778:	8e 93       	st	-X, r24
 77a:	91 97       	sbiw	r26, 0x21	; 33
 77c:	8e 89       	ldd	r24, Y+22	; 0x16
 77e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 782:	98 17       	cp	r25, r24
 784:	10 f4       	brcc	.+4      	; 0x78a <xTaskCreate+0x1da>
 786:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	9c 01       	movw	r18, r24
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	82 0f       	add	r24, r18
 79c:	93 1f       	adc	r25, r19
 79e:	b6 01       	movw	r22, r12
 7a0:	87 5b       	subi	r24, 0xB7	; 183
 7a2:	9e 4f       	sbci	r25, 0xFE	; 254
 7a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <vListInsertEnd>
 7a8:	0f 90       	pop	r0
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 7b0:	88 23       	and	r24, r24
 7b2:	61 f0       	breq	.+24     	; 0x7cc <xTaskCreate+0x21c>
 7b4:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 7b8:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 7bc:	96 89       	ldd	r25, Z+22	; 0x16
 7be:	8e 89       	ldd	r24, Y+22	; 0x16
 7c0:	98 17       	cp	r25, r24
 7c2:	30 f4       	brcc	.+12     	; 0x7d0 <xTaskCreate+0x220>
 7c4:	0e 94 c9 01 	call	0x392	; 0x392 <vPortYield>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <xTaskCreate+0x226>
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <xTaskCreate+0x226>
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <xTaskCreate+0x226>
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	df 90       	pop	r13
 7e2:	cf 90       	pop	r12
 7e4:	bf 90       	pop	r11
 7e6:	af 90       	pop	r10
 7e8:	9f 90       	pop	r9
 7ea:	8f 90       	pop	r8
 7ec:	7f 90       	pop	r7
 7ee:	6f 90       	pop	r6
 7f0:	5f 90       	pop	r5
 7f2:	4f 90       	pop	r4
 7f4:	08 95       	ret

000007f6 <vTaskStartScheduler>:
 7f6:	ef 92       	push	r14
 7f8:	ff 92       	push	r15
 7fa:	0f 93       	push	r16
 7fc:	0f 2e       	mov	r0, r31
 7fe:	f3 e1       	ldi	r31, 0x13	; 19
 800:	ef 2e       	mov	r14, r31
 802:	f1 e0       	ldi	r31, 0x01	; 1
 804:	ff 2e       	mov	r15, r31
 806:	f0 2d       	mov	r31, r0
 808:	00 e0       	ldi	r16, 0x00	; 0
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	44 e6       	ldi	r20, 0x64	; 100
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	66 e0       	ldi	r22, 0x06	; 6
 814:	71 e0       	ldi	r23, 0x01	; 1
 816:	80 ea       	ldi	r24, 0xA0	; 160
 818:	92 e0       	ldi	r25, 0x02	; 2
 81a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <xTaskCreate>
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	81 f4       	brne	.+32     	; 0x842 <vTaskStartScheduler+0x4c>
 822:	f8 94       	cli
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	9f ef       	ldi	r25, 0xFF	; 255
 828:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 82c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 836:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 83a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 83e:	0e 94 8f 01 	call	0x31e	; 0x31e <xPortStartScheduler>
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	08 95       	ret

0000084a <vTaskSuspendAll>:
 84a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 854:	08 95       	ret

00000856 <xTaskIncrementTick>:
 856:	cf 92       	push	r12
 858:	df 92       	push	r13
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 86a:	81 11       	cpse	r24, r1
 86c:	99 c0       	rjmp	.+306    	; 0x9a0 <__stack+0xa1>
 86e:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 872:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	e8 1a       	sub	r14, r24
 87a:	f8 0a       	sbc	r15, r24
 87c:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 880:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 884:	e1 14       	cp	r14, r1
 886:	f1 04       	cpc	r15, r1
 888:	b9 f4       	brne	.+46     	; 0x8b8 <xTaskIncrementTick+0x62>
 88a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <pxDelayedTaskList>
 88e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 892:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pxOverflowDelayedTaskList>
 896:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 89a:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <pxDelayedTaskList+0x1>
 89e:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <pxDelayedTaskList>
 8a2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
 8a6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
 8aa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 8b4:	0e 94 81 02 	call	0x502	; 0x502 <prvResetNextTaskUnblockTime>
 8b8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 8bc:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 8c0:	e8 16       	cp	r14, r24
 8c2:	f9 06       	cpc	r15, r25
 8c4:	10 f4       	brcc	.+4      	; 0x8ca <xTaskIncrementTick+0x74>
 8c6:	d1 2c       	mov	r13, r1
 8c8:	53 c0       	rjmp	.+166    	; 0x970 <__stack+0x71>
 8ca:	d1 2c       	mov	r13, r1
 8cc:	cc 24       	eor	r12, r12
 8ce:	c3 94       	inc	r12
 8d0:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 8d4:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 8d8:	80 81       	ld	r24, Z
 8da:	81 11       	cpse	r24, r1
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <xTaskIncrementTick+0x96>
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	9f ef       	ldi	r25, 0xFF	; 255
 8e2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 8e6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 8ea:	42 c0       	rjmp	.+132    	; 0x970 <__stack+0x71>
 8ec:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
 8f0:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
 8f4:	05 80       	ldd	r0, Z+5	; 0x05
 8f6:	f6 81       	ldd	r31, Z+6	; 0x06
 8f8:	e0 2d       	mov	r30, r0
 8fa:	c6 81       	ldd	r28, Z+6	; 0x06
 8fc:	d7 81       	ldd	r29, Z+7	; 0x07
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	9b 81       	ldd	r25, Y+3	; 0x03
 902:	e8 16       	cp	r14, r24
 904:	f9 06       	cpc	r15, r25
 906:	28 f4       	brcc	.+10     	; 0x912 <__stack+0x13>
 908:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 90c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 910:	2f c0       	rjmp	.+94     	; 0x970 <__stack+0x71>
 912:	8e 01       	movw	r16, r28
 914:	0e 5f       	subi	r16, 0xFE	; 254
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	c8 01       	movw	r24, r16
 91a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uxListRemove>
 91e:	8c 89       	ldd	r24, Y+20	; 0x14
 920:	9d 89       	ldd	r25, Y+21	; 0x15
 922:	89 2b       	or	r24, r25
 924:	21 f0       	breq	.+8      	; 0x92e <__stack+0x2f>
 926:	ce 01       	movw	r24, r28
 928:	0c 96       	adiw	r24, 0x0c	; 12
 92a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uxListRemove>
 92e:	8e 89       	ldd	r24, Y+22	; 0x16
 930:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 934:	98 17       	cp	r25, r24
 936:	10 f4       	brcc	.+4      	; 0x93c <__stack+0x3d>
 938:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	9c 01       	movw	r18, r24
 940:	22 0f       	add	r18, r18
 942:	33 1f       	adc	r19, r19
 944:	22 0f       	add	r18, r18
 946:	33 1f       	adc	r19, r19
 948:	22 0f       	add	r18, r18
 94a:	33 1f       	adc	r19, r19
 94c:	82 0f       	add	r24, r18
 94e:	93 1f       	adc	r25, r19
 950:	b8 01       	movw	r22, r16
 952:	87 5b       	subi	r24, 0xB7	; 183
 954:	9e 4f       	sbci	r25, 0xFE	; 254
 956:	0e 94 db 00 	call	0x1b6	; 0x1b6 <vListInsertEnd>
 95a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 95e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 962:	9e 89       	ldd	r25, Y+22	; 0x16
 964:	86 89       	ldd	r24, Z+22	; 0x16
 966:	98 17       	cp	r25, r24
 968:	08 f4       	brcc	.+2      	; 0x96c <__stack+0x6d>
 96a:	b2 cf       	rjmp	.-156    	; 0x8d0 <xTaskIncrementTick+0x7a>
 96c:	dc 2c       	mov	r13, r12
 96e:	b0 cf       	rjmp	.-160    	; 0x8d0 <xTaskIncrementTick+0x7a>
 970:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 974:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 978:	86 89       	ldd	r24, Z+22	; 0x16
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	fc 01       	movw	r30, r24
 97e:	ee 0f       	add	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	ee 0f       	add	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	8e 0f       	add	r24, r30
 98c:	9f 1f       	adc	r25, r31
 98e:	fc 01       	movw	r30, r24
 990:	e7 5b       	subi	r30, 0xB7	; 183
 992:	fe 4f       	sbci	r31, 0xFE	; 254
 994:	80 81       	ld	r24, Z
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	48 f0       	brcs	.+18     	; 0x9ac <__stack+0xad>
 99a:	dd 24       	eor	r13, r13
 99c:	d3 94       	inc	r13
 99e:	06 c0       	rjmp	.+12     	; 0x9ac <__stack+0xad>
 9a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 9aa:	d1 2c       	mov	r13, r1
 9ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 9b0:	88 23       	and	r24, r24
 9b2:	11 f0       	breq	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	dd 24       	eor	r13, r13
 9b6:	d3 94       	inc	r13
 9b8:	8d 2d       	mov	r24, r13
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	ff 90       	pop	r15
 9c4:	ef 90       	pop	r14
 9c6:	df 90       	pop	r13
 9c8:	cf 90       	pop	r12
 9ca:	08 95       	ret

000009cc <xTaskResumeAll>:
 9cc:	df 92       	push	r13
 9ce:	ef 92       	push	r14
 9d0:	ff 92       	push	r15
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	0f 92       	push	r0
 9e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 9e4:	81 50       	subi	r24, 0x01	; 1
 9e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 9ea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 9ee:	81 11       	cpse	r24, r1
 9f0:	5f c0       	rjmp	.+190    	; 0xab0 <xTaskResumeAll+0xe4>
 9f2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 9f6:	81 11       	cpse	r24, r1
 9f8:	33 c0       	rjmp	.+102    	; 0xa60 <xTaskResumeAll+0x94>
 9fa:	5d c0       	rjmp	.+186    	; 0xab6 <xTaskResumeAll+0xea>
 9fc:	d7 01       	movw	r26, r14
 9fe:	15 96       	adiw	r26, 0x05	; 5
 a00:	ed 91       	ld	r30, X+
 a02:	fc 91       	ld	r31, X
 a04:	16 97       	sbiw	r26, 0x06	; 6
 a06:	c6 81       	ldd	r28, Z+6	; 0x06
 a08:	d7 81       	ldd	r29, Z+7	; 0x07
 a0a:	ce 01       	movw	r24, r28
 a0c:	0c 96       	adiw	r24, 0x0c	; 12
 a0e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uxListRemove>
 a12:	8e 01       	movw	r16, r28
 a14:	0e 5f       	subi	r16, 0xFE	; 254
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	c8 01       	movw	r24, r16
 a1a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uxListRemove>
 a1e:	8e 89       	ldd	r24, Y+22	; 0x16
 a20:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 a24:	98 17       	cp	r25, r24
 a26:	10 f4       	brcc	.+4      	; 0xa2c <xTaskResumeAll+0x60>
 a28:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	9c 01       	movw	r18, r24
 a30:	22 0f       	add	r18, r18
 a32:	33 1f       	adc	r19, r19
 a34:	22 0f       	add	r18, r18
 a36:	33 1f       	adc	r19, r19
 a38:	22 0f       	add	r18, r18
 a3a:	33 1f       	adc	r19, r19
 a3c:	82 0f       	add	r24, r18
 a3e:	93 1f       	adc	r25, r19
 a40:	b8 01       	movw	r22, r16
 a42:	87 5b       	subi	r24, 0xB7	; 183
 a44:	9e 4f       	sbci	r25, 0xFE	; 254
 a46:	0e 94 db 00 	call	0x1b6	; 0x1b6 <vListInsertEnd>
 a4a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 a4e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 a52:	9e 89       	ldd	r25, Y+22	; 0x16
 a54:	86 89       	ldd	r24, Z+22	; 0x16
 a56:	98 17       	cp	r25, r24
 a58:	68 f0       	brcs	.+26     	; 0xa74 <xTaskResumeAll+0xa8>
 a5a:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 a5e:	0a c0       	rjmp	.+20     	; 0xa74 <xTaskResumeAll+0xa8>
 a60:	c0 e0       	ldi	r28, 0x00	; 0
 a62:	d0 e0       	ldi	r29, 0x00	; 0
 a64:	0f 2e       	mov	r0, r31
 a66:	fa e2       	ldi	r31, 0x2A	; 42
 a68:	ef 2e       	mov	r14, r31
 a6a:	f1 e0       	ldi	r31, 0x01	; 1
 a6c:	ff 2e       	mov	r15, r31
 a6e:	f0 2d       	mov	r31, r0
 a70:	dd 24       	eor	r13, r13
 a72:	d3 94       	inc	r13
 a74:	f7 01       	movw	r30, r14
 a76:	80 81       	ld	r24, Z
 a78:	81 11       	cpse	r24, r1
 a7a:	c0 cf       	rjmp	.-128    	; 0x9fc <xTaskResumeAll+0x30>
 a7c:	cd 2b       	or	r28, r29
 a7e:	11 f0       	breq	.+4      	; 0xa84 <xTaskResumeAll+0xb8>
 a80:	0e 94 81 02 	call	0x502	; 0x502 <prvResetNextTaskUnblockTime>
 a84:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 a88:	cc 23       	and	r28, r28
 a8a:	51 f0       	breq	.+20     	; 0xaa0 <xTaskResumeAll+0xd4>
 a8c:	d1 e0       	ldi	r29, 0x01	; 1
 a8e:	0e 94 2b 04 	call	0x856	; 0x856 <xTaskIncrementTick>
 a92:	81 11       	cpse	r24, r1
 a94:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 a98:	c1 50       	subi	r28, 0x01	; 1
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <xTaskResumeAll+0xc2>
 a9c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 aa0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 aa4:	88 23       	and	r24, r24
 aa6:	31 f0       	breq	.+12     	; 0xab4 <xTaskResumeAll+0xe8>
 aa8:	0e 94 c9 01 	call	0x392	; 0x392 <vPortYield>
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <xTaskResumeAll+0xea>
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	01 c0       	rjmp	.+2      	; 0xab6 <xTaskResumeAll+0xea>
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	1f 91       	pop	r17
 ac0:	0f 91       	pop	r16
 ac2:	ff 90       	pop	r15
 ac4:	ef 90       	pop	r14
 ac6:	df 90       	pop	r13
 ac8:	08 95       	ret

00000aca <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 ace:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 ad2:	88 23       	and	r24, r24
 ad4:	21 f0       	breq	.+8      	; 0xade <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 adc:	91 c0       	rjmp	.+290    	; 0xc00 <vTaskSwitchContext+0x136>
	}
	else
	{
		xYieldPending = pdFALSE;
 ade:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 ae2:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
 ae6:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 aea:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 aee:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 af2:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 af6:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 afa:	93 96       	adiw	r26, 0x23	; 35
 afc:	6d 91       	ld	r22, X+
 afe:	7c 91       	ld	r23, X
 b00:	94 97       	sbiw	r26, 0x24	; 36
 b02:	80 81       	ld	r24, Z
 b04:	91 81       	ldd	r25, Z+1	; 0x01
 b06:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 b0a:	9a a3       	std	Y+34, r25	; 0x22
 b0c:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 b0e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 b12:	82 2f       	mov	r24, r18
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	fc 01       	movw	r30, r24
 b18:	ee 0f       	add	r30, r30
 b1a:	ff 1f       	adc	r31, r31
 b1c:	ee 0f       	add	r30, r30
 b1e:	ff 1f       	adc	r31, r31
 b20:	ee 0f       	add	r30, r30
 b22:	ff 1f       	adc	r31, r31
 b24:	e8 0f       	add	r30, r24
 b26:	f9 1f       	adc	r31, r25
 b28:	e7 5b       	subi	r30, 0xB7	; 183
 b2a:	fe 4f       	sbci	r31, 0xFE	; 254
 b2c:	30 81       	ld	r19, Z
 b2e:	31 11       	cpse	r19, r1
 b30:	11 c0       	rjmp	.+34     	; 0xb54 <vTaskSwitchContext+0x8a>
 b32:	21 50       	subi	r18, 0x01	; 1
 b34:	82 2f       	mov	r24, r18
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	fc 01       	movw	r30, r24
 b3a:	ee 0f       	add	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	ee 0f       	add	r30, r30
 b40:	ff 1f       	adc	r31, r31
 b42:	ee 0f       	add	r30, r30
 b44:	ff 1f       	adc	r31, r31
 b46:	e8 0f       	add	r30, r24
 b48:	f9 1f       	adc	r31, r25
 b4a:	e7 5b       	subi	r30, 0xB7	; 183
 b4c:	fe 4f       	sbci	r31, 0xFE	; 254
 b4e:	30 81       	ld	r19, Z
 b50:	33 23       	and	r19, r19
 b52:	79 f3       	breq	.-34     	; 0xb32 <vTaskSwitchContext+0x68>
 b54:	ac 01       	movw	r20, r24
 b56:	44 0f       	add	r20, r20
 b58:	55 1f       	adc	r21, r21
 b5a:	44 0f       	add	r20, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	44 0f       	add	r20, r20
 b60:	55 1f       	adc	r21, r21
 b62:	48 0f       	add	r20, r24
 b64:	59 1f       	adc	r21, r25
 b66:	da 01       	movw	r26, r20
 b68:	a7 5b       	subi	r26, 0xB7	; 183
 b6a:	be 4f       	sbci	r27, 0xFE	; 254
 b6c:	11 96       	adiw	r26, 0x01	; 1
 b6e:	ed 91       	ld	r30, X+
 b70:	fc 91       	ld	r31, X
 b72:	12 97       	sbiw	r26, 0x02	; 2
 b74:	02 80       	ldd	r0, Z+2	; 0x02
 b76:	f3 81       	ldd	r31, Z+3	; 0x03
 b78:	e0 2d       	mov	r30, r0
 b7a:	12 96       	adiw	r26, 0x02	; 2
 b7c:	fc 93       	st	X, r31
 b7e:	ee 93       	st	-X, r30
 b80:	11 97       	sbiw	r26, 0x01	; 1
 b82:	44 5b       	subi	r20, 0xB4	; 180
 b84:	5e 4f       	sbci	r21, 0xFE	; 254
 b86:	e4 17       	cp	r30, r20
 b88:	f5 07       	cpc	r31, r21
 b8a:	29 f4       	brne	.+10     	; 0xb96 <vTaskSwitchContext+0xcc>
 b8c:	42 81       	ldd	r20, Z+2	; 0x02
 b8e:	53 81       	ldd	r21, Z+3	; 0x03
 b90:	fd 01       	movw	r30, r26
 b92:	52 83       	std	Z+2, r21	; 0x02
 b94:	41 83       	std	Z+1, r20	; 0x01
 b96:	fc 01       	movw	r30, r24
 b98:	ee 0f       	add	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	ee 0f       	add	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	ee 0f       	add	r30, r30
 ba2:	ff 1f       	adc	r31, r31
 ba4:	8e 0f       	add	r24, r30
 ba6:	9f 1f       	adc	r25, r31
 ba8:	fc 01       	movw	r30, r24
 baa:	e7 5b       	subi	r30, 0xB7	; 183
 bac:	fe 4f       	sbci	r31, 0xFE	; 254
 bae:	01 80       	ldd	r0, Z+1	; 0x01
 bb0:	f2 81       	ldd	r31, Z+2	; 0x02
 bb2:	e0 2d       	mov	r30, r0
 bb4:	86 81       	ldd	r24, Z+6	; 0x06
 bb6:	97 81       	ldd	r25, Z+7	; 0x07
 bb8:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <pxCurrentTCB+0x1>
 bbc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <pxCurrentTCB>
 bc0:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 bc4:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 bc8:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 bcc:	c1 a1       	ldd	r28, Z+33	; 0x21
 bce:	d2 a1       	ldd	r29, Z+34	; 0x22
 bd0:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
 bd4:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 bd8:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
 bdc:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
 be0:	93 96       	adiw	r26, 0x23	; 35
 be2:	6d 91       	ld	r22, X+
 be4:	7c 91       	ld	r23, X
 be6:	94 97       	sbiw	r26, 0x24	; 36
 be8:	80 81       	ld	r24, Z
 bea:	91 81       	ldd	r25, Z+1	; 0x01
 bec:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 bf0:	c8 17       	cp	r28, r24
 bf2:	d9 07       	cpc	r29, r25
 bf4:	19 f4       	brne	.+6      	; 0xbfc <vTaskSwitchContext+0x132>
 bf6:	0e 94 a0 00 	call	0x140	; 0x140 <vApplicationTaskChecksumSucceedHook>
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vTaskSwitchContext+0x136>
 bfc:	0e 94 3c 06 	call	0xc78	; 0xc78 <vApplicationTaskChecksumFailedHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	08 95       	ret

00000c06 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	00 d0       	rcall	.+0      	; 0xc0c <_Z7task_txPv+0x6>
 c0c:	cd b7       	in	r28, 0x3d	; 61
 c0e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
 c10:	8d e2       	ldi	r24, 0x2D	; 45
 c12:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 c14:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
 c16:	82 e3       	ldi	r24, 0x32	; 50
 c18:	89 83       	std	Y+1, r24	; 0x01
 c1a:	fe cf       	rjmp	.-4      	; 0xc18 <_Z7task_txPv+0x12>

00000c1c <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	00 d0       	rcall	.+0      	; 0xc22 <_Z7task_rxPv+0x6>
 c22:	cd b7       	in	r28, 0x3d	; 61
 c24:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
 c26:	85 e5       	ldi	r24, 0x55	; 85
 c28:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 c2a:	8d e2       	ldi	r24, 0x2D	; 45
 c2c:	8a 83       	std	Y+2, r24	; 0x02
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <_Z7task_rxPv+0x12>

00000c30 <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
 c30:	ef 92       	push	r14
 c32:	ff 92       	push	r15
 c34:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 c36:	8f ef       	ldi	r24, 0xFF	; 255
 c38:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 c3a:	e1 2c       	mov	r14, r1
 c3c:	f1 2c       	mov	r15, r1
 c3e:	01 e0       	ldi	r16, 0x01	; 1
 c40:	20 e0       	ldi	r18, 0x00	; 0
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	44 e6       	ldi	r20, 0x64	; 100
 c46:	50 e0       	ldi	r21, 0x00	; 0
 c48:	6b e0       	ldi	r22, 0x0B	; 11
 c4a:	71 e0       	ldi	r23, 0x01	; 1
 c4c:	83 e0       	ldi	r24, 0x03	; 3
 c4e:	96 e0       	ldi	r25, 0x06	; 6
 c50:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 c54:	20 e0       	ldi	r18, 0x00	; 0
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	44 e6       	ldi	r20, 0x64	; 100
 c5a:	50 e0       	ldi	r21, 0x00	; 0
 c5c:	6e e0       	ldi	r22, 0x0E	; 14
 c5e:	71 e0       	ldi	r23, 0x01	; 1
 c60:	8e e0       	ldi	r24, 0x0E	; 14
 c62:	96 e0       	ldi	r25, 0x06	; 6
 c64:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <xTaskCreate>
	vTaskStartScheduler();
 c68:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <vTaskStartScheduler>
	
	return 0;
}
 c6c:	80 e0       	ldi	r24, 0x00	; 0
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	0f 91       	pop	r16
 c72:	ff 90       	pop	r15
 c74:	ef 90       	pop	r14
 c76:	08 95       	ret

00000c78 <vApplicationTaskChecksumFailedHook>:

extern "C"{
	
	void vApplicationTaskChecksumFailedHook(){
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	1f 92       	push	r1
 c7e:	cd b7       	in	r28, 0x3d	; 61
 c80:	de b7       	in	r29, 0x3e	; 62
		volatile char b=0;		
 c82:	19 82       	std	Y+1, r1	; 0x01
		}
 c84:	0f 90       	pop	r0
 c86:	df 91       	pop	r29
 c88:	cf 91       	pop	r28
 c8a:	08 95       	ret

00000c8c <malloc>:
 c8c:	0f 93       	push	r16
 c8e:	1f 93       	push	r17
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	82 30       	cpi	r24, 0x02	; 2
 c96:	91 05       	cpc	r25, r1
 c98:	10 f4       	brcc	.+4      	; 0xc9e <malloc+0x12>
 c9a:	82 e0       	ldi	r24, 0x02	; 2
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__flp>
 ca2:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__flp+0x1>
 ca6:	20 e0       	ldi	r18, 0x00	; 0
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	a0 e0       	ldi	r26, 0x00	; 0
 cac:	b0 e0       	ldi	r27, 0x00	; 0
 cae:	30 97       	sbiw	r30, 0x00	; 0
 cb0:	19 f1       	breq	.+70     	; 0xcf8 <malloc+0x6c>
 cb2:	40 81       	ld	r20, Z
 cb4:	51 81       	ldd	r21, Z+1	; 0x01
 cb6:	02 81       	ldd	r16, Z+2	; 0x02
 cb8:	13 81       	ldd	r17, Z+3	; 0x03
 cba:	48 17       	cp	r20, r24
 cbc:	59 07       	cpc	r21, r25
 cbe:	c8 f0       	brcs	.+50     	; 0xcf2 <malloc+0x66>
 cc0:	84 17       	cp	r24, r20
 cc2:	95 07       	cpc	r25, r21
 cc4:	69 f4       	brne	.+26     	; 0xce0 <malloc+0x54>
 cc6:	10 97       	sbiw	r26, 0x00	; 0
 cc8:	31 f0       	breq	.+12     	; 0xcd6 <malloc+0x4a>
 cca:	12 96       	adiw	r26, 0x02	; 2
 ccc:	0c 93       	st	X, r16
 cce:	12 97       	sbiw	r26, 0x02	; 2
 cd0:	13 96       	adiw	r26, 0x03	; 3
 cd2:	1c 93       	st	X, r17
 cd4:	27 c0       	rjmp	.+78     	; 0xd24 <malloc+0x98>
 cd6:	00 93 71 01 	sts	0x0171, r16	; 0x800171 <__flp>
 cda:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <__flp+0x1>
 cde:	22 c0       	rjmp	.+68     	; 0xd24 <malloc+0x98>
 ce0:	21 15       	cp	r18, r1
 ce2:	31 05       	cpc	r19, r1
 ce4:	19 f0       	breq	.+6      	; 0xcec <malloc+0x60>
 ce6:	42 17       	cp	r20, r18
 ce8:	53 07       	cpc	r21, r19
 cea:	18 f4       	brcc	.+6      	; 0xcf2 <malloc+0x66>
 cec:	9a 01       	movw	r18, r20
 cee:	bd 01       	movw	r22, r26
 cf0:	ef 01       	movw	r28, r30
 cf2:	df 01       	movw	r26, r30
 cf4:	f8 01       	movw	r30, r16
 cf6:	db cf       	rjmp	.-74     	; 0xcae <malloc+0x22>
 cf8:	21 15       	cp	r18, r1
 cfa:	31 05       	cpc	r19, r1
 cfc:	f9 f0       	breq	.+62     	; 0xd3c <malloc+0xb0>
 cfe:	28 1b       	sub	r18, r24
 d00:	39 0b       	sbc	r19, r25
 d02:	24 30       	cpi	r18, 0x04	; 4
 d04:	31 05       	cpc	r19, r1
 d06:	80 f4       	brcc	.+32     	; 0xd28 <malloc+0x9c>
 d08:	8a 81       	ldd	r24, Y+2	; 0x02
 d0a:	9b 81       	ldd	r25, Y+3	; 0x03
 d0c:	61 15       	cp	r22, r1
 d0e:	71 05       	cpc	r23, r1
 d10:	21 f0       	breq	.+8      	; 0xd1a <malloc+0x8e>
 d12:	fb 01       	movw	r30, r22
 d14:	93 83       	std	Z+3, r25	; 0x03
 d16:	82 83       	std	Z+2, r24	; 0x02
 d18:	04 c0       	rjmp	.+8      	; 0xd22 <malloc+0x96>
 d1a:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <__flp+0x1>
 d1e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <__flp>
 d22:	fe 01       	movw	r30, r28
 d24:	32 96       	adiw	r30, 0x02	; 2
 d26:	44 c0       	rjmp	.+136    	; 0xdb0 <malloc+0x124>
 d28:	fe 01       	movw	r30, r28
 d2a:	e2 0f       	add	r30, r18
 d2c:	f3 1f       	adc	r31, r19
 d2e:	81 93       	st	Z+, r24
 d30:	91 93       	st	Z+, r25
 d32:	22 50       	subi	r18, 0x02	; 2
 d34:	31 09       	sbc	r19, r1
 d36:	39 83       	std	Y+1, r19	; 0x01
 d38:	28 83       	st	Y, r18
 d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <malloc+0x124>
 d3c:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
 d40:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
 d44:	23 2b       	or	r18, r19
 d46:	41 f4       	brne	.+16     	; 0xd58 <malloc+0xcc>
 d48:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d4c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 d50:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <__brkval+0x1>
 d54:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <__brkval>
 d58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 d5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 d60:	21 15       	cp	r18, r1
 d62:	31 05       	cpc	r19, r1
 d64:	41 f4       	brne	.+16     	; 0xd76 <malloc+0xea>
 d66:	2d b7       	in	r18, 0x3d	; 61
 d68:	3e b7       	in	r19, 0x3e	; 62
 d6a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d6e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d72:	24 1b       	sub	r18, r20
 d74:	35 0b       	sbc	r19, r21
 d76:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <__brkval>
 d7a:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <__brkval+0x1>
 d7e:	e2 17       	cp	r30, r18
 d80:	f3 07       	cpc	r31, r19
 d82:	a0 f4       	brcc	.+40     	; 0xdac <malloc+0x120>
 d84:	2e 1b       	sub	r18, r30
 d86:	3f 0b       	sbc	r19, r31
 d88:	28 17       	cp	r18, r24
 d8a:	39 07       	cpc	r19, r25
 d8c:	78 f0       	brcs	.+30     	; 0xdac <malloc+0x120>
 d8e:	ac 01       	movw	r20, r24
 d90:	4e 5f       	subi	r20, 0xFE	; 254
 d92:	5f 4f       	sbci	r21, 0xFF	; 255
 d94:	24 17       	cp	r18, r20
 d96:	35 07       	cpc	r19, r21
 d98:	48 f0       	brcs	.+18     	; 0xdac <malloc+0x120>
 d9a:	4e 0f       	add	r20, r30
 d9c:	5f 1f       	adc	r21, r31
 d9e:	50 93 70 01 	sts	0x0170, r21	; 0x800170 <__brkval+0x1>
 da2:	40 93 6f 01 	sts	0x016F, r20	; 0x80016f <__brkval>
 da6:	81 93       	st	Z+, r24
 da8:	91 93       	st	Z+, r25
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <malloc+0x124>
 dac:	e0 e0       	ldi	r30, 0x00	; 0
 dae:	f0 e0       	ldi	r31, 0x00	; 0
 db0:	cf 01       	movw	r24, r30
 db2:	df 91       	pop	r29
 db4:	cf 91       	pop	r28
 db6:	1f 91       	pop	r17
 db8:	0f 91       	pop	r16
 dba:	08 95       	ret

00000dbc <free>:
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	00 97       	sbiw	r24, 0x00	; 0
 dc2:	09 f4       	brne	.+2      	; 0xdc6 <free+0xa>
 dc4:	81 c0       	rjmp	.+258    	; 0xec8 <free+0x10c>
 dc6:	fc 01       	movw	r30, r24
 dc8:	32 97       	sbiw	r30, 0x02	; 2
 dca:	13 82       	std	Z+3, r1	; 0x03
 dcc:	12 82       	std	Z+2, r1	; 0x02
 dce:	a0 91 71 01 	lds	r26, 0x0171	; 0x800171 <__flp>
 dd2:	b0 91 72 01 	lds	r27, 0x0172	; 0x800172 <__flp+0x1>
 dd6:	10 97       	sbiw	r26, 0x00	; 0
 dd8:	81 f4       	brne	.+32     	; 0xdfa <free+0x3e>
 dda:	20 81       	ld	r18, Z
 ddc:	31 81       	ldd	r19, Z+1	; 0x01
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
 de6:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
 dea:	28 17       	cp	r18, r24
 dec:	39 07       	cpc	r19, r25
 dee:	51 f5       	brne	.+84     	; 0xe44 <free+0x88>
 df0:	f0 93 70 01 	sts	0x0170, r31	; 0x800170 <__brkval+0x1>
 df4:	e0 93 6f 01 	sts	0x016F, r30	; 0x80016f <__brkval>
 df8:	67 c0       	rjmp	.+206    	; 0xec8 <free+0x10c>
 dfa:	ed 01       	movw	r28, r26
 dfc:	20 e0       	ldi	r18, 0x00	; 0
 dfe:	30 e0       	ldi	r19, 0x00	; 0
 e00:	ce 17       	cp	r28, r30
 e02:	df 07       	cpc	r29, r31
 e04:	40 f4       	brcc	.+16     	; 0xe16 <free+0x5a>
 e06:	4a 81       	ldd	r20, Y+2	; 0x02
 e08:	5b 81       	ldd	r21, Y+3	; 0x03
 e0a:	9e 01       	movw	r18, r28
 e0c:	41 15       	cp	r20, r1
 e0e:	51 05       	cpc	r21, r1
 e10:	f1 f0       	breq	.+60     	; 0xe4e <free+0x92>
 e12:	ea 01       	movw	r28, r20
 e14:	f5 cf       	rjmp	.-22     	; 0xe00 <free+0x44>
 e16:	d3 83       	std	Z+3, r29	; 0x03
 e18:	c2 83       	std	Z+2, r28	; 0x02
 e1a:	40 81       	ld	r20, Z
 e1c:	51 81       	ldd	r21, Z+1	; 0x01
 e1e:	84 0f       	add	r24, r20
 e20:	95 1f       	adc	r25, r21
 e22:	c8 17       	cp	r28, r24
 e24:	d9 07       	cpc	r29, r25
 e26:	59 f4       	brne	.+22     	; 0xe3e <free+0x82>
 e28:	88 81       	ld	r24, Y
 e2a:	99 81       	ldd	r25, Y+1	; 0x01
 e2c:	84 0f       	add	r24, r20
 e2e:	95 1f       	adc	r25, r21
 e30:	02 96       	adiw	r24, 0x02	; 2
 e32:	91 83       	std	Z+1, r25	; 0x01
 e34:	80 83       	st	Z, r24
 e36:	8a 81       	ldd	r24, Y+2	; 0x02
 e38:	9b 81       	ldd	r25, Y+3	; 0x03
 e3a:	93 83       	std	Z+3, r25	; 0x03
 e3c:	82 83       	std	Z+2, r24	; 0x02
 e3e:	21 15       	cp	r18, r1
 e40:	31 05       	cpc	r19, r1
 e42:	29 f4       	brne	.+10     	; 0xe4e <free+0x92>
 e44:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__flp+0x1>
 e48:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__flp>
 e4c:	3d c0       	rjmp	.+122    	; 0xec8 <free+0x10c>
 e4e:	e9 01       	movw	r28, r18
 e50:	fb 83       	std	Y+3, r31	; 0x03
 e52:	ea 83       	std	Y+2, r30	; 0x02
 e54:	49 91       	ld	r20, Y+
 e56:	59 91       	ld	r21, Y+
 e58:	c4 0f       	add	r28, r20
 e5a:	d5 1f       	adc	r29, r21
 e5c:	ec 17       	cp	r30, r28
 e5e:	fd 07       	cpc	r31, r29
 e60:	61 f4       	brne	.+24     	; 0xe7a <free+0xbe>
 e62:	80 81       	ld	r24, Z
 e64:	91 81       	ldd	r25, Z+1	; 0x01
 e66:	84 0f       	add	r24, r20
 e68:	95 1f       	adc	r25, r21
 e6a:	02 96       	adiw	r24, 0x02	; 2
 e6c:	e9 01       	movw	r28, r18
 e6e:	99 83       	std	Y+1, r25	; 0x01
 e70:	88 83       	st	Y, r24
 e72:	82 81       	ldd	r24, Z+2	; 0x02
 e74:	93 81       	ldd	r25, Z+3	; 0x03
 e76:	9b 83       	std	Y+3, r25	; 0x03
 e78:	8a 83       	std	Y+2, r24	; 0x02
 e7a:	e0 e0       	ldi	r30, 0x00	; 0
 e7c:	f0 e0       	ldi	r31, 0x00	; 0
 e7e:	12 96       	adiw	r26, 0x02	; 2
 e80:	8d 91       	ld	r24, X+
 e82:	9c 91       	ld	r25, X
 e84:	13 97       	sbiw	r26, 0x03	; 3
 e86:	00 97       	sbiw	r24, 0x00	; 0
 e88:	19 f0       	breq	.+6      	; 0xe90 <free+0xd4>
 e8a:	fd 01       	movw	r30, r26
 e8c:	dc 01       	movw	r26, r24
 e8e:	f7 cf       	rjmp	.-18     	; 0xe7e <free+0xc2>
 e90:	8d 91       	ld	r24, X+
 e92:	9c 91       	ld	r25, X
 e94:	11 97       	sbiw	r26, 0x01	; 1
 e96:	9d 01       	movw	r18, r26
 e98:	2e 5f       	subi	r18, 0xFE	; 254
 e9a:	3f 4f       	sbci	r19, 0xFF	; 255
 e9c:	82 0f       	add	r24, r18
 e9e:	93 1f       	adc	r25, r19
 ea0:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <__brkval>
 ea4:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <__brkval+0x1>
 ea8:	28 17       	cp	r18, r24
 eaa:	39 07       	cpc	r19, r25
 eac:	69 f4       	brne	.+26     	; 0xec8 <free+0x10c>
 eae:	30 97       	sbiw	r30, 0x00	; 0
 eb0:	29 f4       	brne	.+10     	; 0xebc <free+0x100>
 eb2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__flp+0x1>
 eb6:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <__flp>
 eba:	02 c0       	rjmp	.+4      	; 0xec0 <free+0x104>
 ebc:	13 82       	std	Z+3, r1	; 0x03
 ebe:	12 82       	std	Z+2, r1	; 0x02
 ec0:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <__brkval+0x1>
 ec4:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <__brkval>
 ec8:	df 91       	pop	r29
 eca:	cf 91       	pop	r28
 ecc:	08 95       	ret

00000ece <memset>:
 ece:	dc 01       	movw	r26, r24
 ed0:	01 c0       	rjmp	.+2      	; 0xed4 <memset+0x6>
 ed2:	6d 93       	st	X+, r22
 ed4:	41 50       	subi	r20, 0x01	; 1
 ed6:	50 40       	sbci	r21, 0x00	; 0
 ed8:	e0 f7       	brcc	.-8      	; 0xed2 <memset+0x4>
 eda:	08 95       	ret

00000edc <_exit>:
 edc:	f8 94       	cli

00000ede <__stop_program>:
 ede:	ff cf       	rjmp	.-2      	; 0xede <__stop_program>
