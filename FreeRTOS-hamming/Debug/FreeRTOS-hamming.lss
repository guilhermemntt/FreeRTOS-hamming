
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000010e8  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800112  00800112  0000118e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e51  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  000042c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aca  00000000  00000000  000050ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00006bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001222  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c0b  00000000  00000000  000084f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 37       	cpi	r26, 0x75	; 117
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <main>
      9e:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
    ucR -= 1;
  }
  return ucR;
}

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t *pxEndOfStack) {  // pxStack
      a6:	7f 92       	push	r7
      a8:	8f 92       	push	r8
      aa:	9f 92       	push	r9
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	9c 01       	movw	r18, r24
  uint8_t *pucDataP = pxStartOfStack - portSTACK_GROWTH;
      c2:	fc 01       	movw	r30, r24
      c4:	31 96       	adiw	r30, 0x01	; 1
  uint16_t usLength = pxEndOfStack - pxStartOfStack;
      c6:	68 1b       	sub	r22, r24
      c8:	79 0b       	sbc	r23, r25
  uint16_t usPosBit;
  uint8_t ucPBitMax;

  ucPoolH = 0;
  usPBit = 0;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
      ca:	59 f1       	breq	.+86     	; 0x122 <uxChecksumGetTaskChecksum+0x7c>
      cc:	df 01       	movw	r26, r30
      ce:	8b 01       	movw	r16, r22
      d0:	0f 5f       	subi	r16, 0xFF	; 255
      d2:	1f 4f       	sbci	r17, 0xFF	; 255
      d4:	08 0f       	add	r16, r24
      d6:	19 1f       	adc	r17, r25
      d8:	ef 01       	movw	r28, r30
      da:	80 e0       	ldi	r24, 0x00	; 0
    ucPoolH ^= (*(pucDataP + i) & 0xAA);
      dc:	99 91       	ld	r25, Y+
      de:	9a 7a       	andi	r25, 0xAA	; 170
      e0:	89 27       	eor	r24, r25
  uint16_t usPosBit;
  uint8_t ucPBitMax;

  ucPoolH = 0;
  usPBit = 0;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
      e2:	0c 17       	cp	r16, r28
      e4:	1d 07       	cpc	r17, r29
      e6:	d1 f7       	brne	.-12     	; 0xdc <uxChecksumGetTaskChecksum+0x36>
    ucPoolH ^= (*(pucDataP + i) & 0xAA);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
      e8:	98 2f       	mov	r25, r24
      ea:	92 95       	swap	r25
      ec:	9f 70       	andi	r25, 0x0F	; 15
      ee:	89 27       	eor	r24, r25
      f0:	8f 70       	andi	r24, 0x0F	; 15
      f2:	c6 e9       	ldi	r28, 0x96	; 150
      f4:	d9 e6       	ldi	r29, 0x69	; 105
      f6:	02 c0       	rjmp	.+4      	; 0xfc <uxChecksumGetTaskChecksum+0x56>
      f8:	d5 95       	asr	r29
      fa:	c7 95       	ror	r28
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <uxChecksumGetTaskChecksum+0x52>
     100:	c1 70       	andi	r28, 0x01	; 1
     102:	dd 27       	eor	r29, r29
     104:	40 e0       	ldi	r20, 0x00	; 0

  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xCC);
     106:	9d 91       	ld	r25, X+
     108:	9c 7c       	andi	r25, 0xCC	; 204
     10a:	49 27       	eor	r20, r25
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     10c:	0a 17       	cp	r16, r26
     10e:	1b 07       	cpc	r17, r27
     110:	d1 f7       	brne	.-12     	; 0x106 <uxChecksumGetTaskChecksum+0x60>
     112:	d0 c0       	rjmp	.+416    	; 0x2b4 <uxChecksumGetTaskChecksum+0x20e>
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPoolH = 0;
  usPBit = 2;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xF0);
     114:	91 91       	ld	r25, Z+
     116:	90 7f       	andi	r25, 0xF0	; 240
     118:	49 27       	eor	r20, r25
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPoolH = 0;
  usPBit = 2;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     11a:	ea 17       	cp	r30, r26
     11c:	fb 07       	cpc	r31, r27
     11e:	d1 f7       	brne	.-12     	; 0x114 <uxChecksumGetTaskChecksum+0x6e>
     120:	03 c0       	rjmp	.+6      	; 0x128 <uxChecksumGetTaskChecksum+0x82>
  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xCC);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	10 e0       	ldi	r17, 0x00	; 0

  ucPoolH = 0;
     126:	40 e0       	ldi	r20, 0x00	; 0
  usPBit = 2;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xF0);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     128:	84 2f       	mov	r24, r20
     12a:	82 95       	swap	r24
     12c:	8f 70       	andi	r24, 0x0F	; 15
     12e:	48 27       	eor	r20, r24
     130:	4f 70       	andi	r20, 0x0F	; 15
     132:	86 e9       	ldi	r24, 0x96	; 150
     134:	99 e6       	ldi	r25, 0x69	; 105
     136:	02 c0       	rjmp	.+4      	; 0x13c <uxChecksumGetTaskChecksum+0x96>
     138:	95 95       	asr	r25
     13a:	87 95       	ror	r24
     13c:	4a 95       	dec	r20
     13e:	e2 f7       	brpl	.-8      	; 0x138 <uxChecksumGetTaskChecksum+0x92>
     140:	81 70       	andi	r24, 0x01	; 1
     142:	99 27       	eor	r25, r25
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	ec 01       	movw	r28, r24
     14e:	c0 0f       	add	r28, r16
     150:	d1 1f       	adc	r29, r17
     152:	82 2e       	mov	r8, r18
     154:	73 2e       	mov	r7, r19

  usPBit = 3;
  ucPoolH = 0;
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     156:	f9 01       	movw	r30, r18
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
    ucPoolH ^= (*(pucDataP + i) & 0xF0);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  usPBit = 3;
  ucPoolH = 0;
     15c:	90 e0       	ldi	r25, 0x00	; 0
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     15e:	10 c0       	rjmp	.+32     	; 0x180 <uxChecksumGetTaskChecksum+0xda>
    if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     160:	2f 5f       	subi	r18, 0xFF	; 255
     162:	3f 4f       	sbci	r19, 0xFF	; 255
#elif ( configSUPPORT_TASK_CHECKSUM==3 )

#define checksumPARITY(n) ((0x6996 >> ((n ^ (n >> 4)) & 0x0f)) & 0x01)

static inline uint16_t prvAbs(int16_t sX) {
	int16_t sT = (sX >> 15);
     164:	a9 01       	movw	r20, r18
     166:	55 0f       	add	r21, r21
     168:	44 0b       	sbc	r20, r20
     16a:	54 2f       	mov	r21, r20

  usPBit = 3;
  ucPoolH = 0;
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
    if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     16c:	d9 01       	movw	r26, r18
     16e:	a4 0f       	add	r26, r20
     170:	b5 1f       	adc	r27, r21
     172:	4a 27       	eor	r20, r26
     174:	5b 27       	eor	r21, r27
     176:	40 ff       	sbrs	r20, 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <uxChecksumGetTaskChecksum+0xd8>
      ucPoolH ^= (*(pucDataP + i));
     17a:	81 81       	ldd	r24, Z+1	; 0x01
     17c:	98 27       	eor	r25, r24
     17e:	31 96       	adiw	r30, 0x01	; 1
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  usPBit = 3;
  ucPoolH = 0;
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     180:	26 17       	cp	r18, r22
     182:	37 07       	cpc	r19, r23
     184:	69 f7       	brne	.-38     	; 0x160 <uxChecksumGetTaskChecksum+0xba>
    if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
      ucPoolH ^= (*(pucDataP + i));
    }
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     186:	89 2f       	mov	r24, r25
     188:	82 95       	swap	r24
     18a:	8f 70       	andi	r24, 0x0F	; 15
     18c:	98 27       	eor	r25, r24
     18e:	9f 70       	andi	r25, 0x0F	; 15
     190:	26 e9       	ldi	r18, 0x96	; 150
     192:	39 e6       	ldi	r19, 0x69	; 105
     194:	a9 01       	movw	r20, r18
     196:	02 c0       	rjmp	.+4      	; 0x19c <uxChecksumGetTaskChecksum+0xf6>
     198:	55 95       	asr	r21
     19a:	47 95       	ror	r20
     19c:	9a 95       	dec	r25
     19e:	e2 f7       	brpl	.-8      	; 0x198 <uxChecksumGetTaskChecksum+0xf2>
     1a0:	ca 01       	movw	r24, r20
     1a2:	81 70       	andi	r24, 0x01	; 1
     1a4:	99 27       	eor	r25, r25
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	88 0f       	add	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	8c 0f       	add	r24, r28
     1b4:	9d 1f       	adc	r25, r29

  ucPBitMax = prvFls(usLength * 8 * (-1) * portSTACK_GROWTH);
     1b6:	9b 01       	movw	r18, r22
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
}

static inline uint8_t prvFls(uint16_t usX) {
  uint8_t ucR = 16;

  if (!usX) {
     1c4:	21 15       	cp	r18, r1
     1c6:	31 05       	cpc	r19, r1
     1c8:	09 f4       	brne	.+2      	; 0x1cc <uxChecksumGetTaskChecksum+0x126>
     1ca:	8e c0       	rjmp	.+284    	; 0x2e8 <uxChecksumGetTaskChecksum+0x242>
    return 0;
  }
  if (!(usX & 0xff00u)) {
     1cc:	a9 01       	movw	r20, r18
     1ce:	44 27       	eor	r20, r20
     1d0:	45 2b       	or	r20, r21
     1d2:	21 f4       	brne	.+8      	; 0x1dc <uxChecksumGetTaskChecksum+0x136>
    usX <<= 8;
     1d4:	32 2f       	mov	r19, r18
     1d6:	22 27       	eor	r18, r18
    ucR -= 8;
     1d8:	48 e0       	ldi	r20, 0x08	; 8
     1da:	01 c0       	rjmp	.+2      	; 0x1de <uxChecksumGetTaskChecksum+0x138>
	int16_t sT = (sX >> 15);
	return sT ^ (sX + sT);
}

static inline uint8_t prvFls(uint16_t usX) {
  uint8_t ucR = 16;
     1dc:	40 e1       	ldi	r20, 0x10	; 16
  }
  if (!(usX & 0xff00u)) {
    usX <<= 8;
    ucR -= 8;
  }
  if (!(usX & 0xf000u)) {
     1de:	f9 01       	movw	r30, r18
     1e0:	ee 27       	eor	r30, r30
     1e2:	f0 7f       	andi	r31, 0xF0	; 240
     1e4:	ef 2b       	or	r30, r31
     1e6:	39 f4       	brne	.+14     	; 0x1f6 <uxChecksumGetTaskChecksum+0x150>
    usX <<= 4;
     1e8:	22 95       	swap	r18
     1ea:	32 95       	swap	r19
     1ec:	30 7f       	andi	r19, 0xF0	; 240
     1ee:	32 27       	eor	r19, r18
     1f0:	20 7f       	andi	r18, 0xF0	; 240
     1f2:	32 27       	eor	r19, r18
    ucR -= 4;
     1f4:	44 50       	subi	r20, 0x04	; 4
  }
  if (!(usX & 0xc000u)) {
     1f6:	f9 01       	movw	r30, r18
     1f8:	ee 27       	eor	r30, r30
     1fa:	f0 7c       	andi	r31, 0xC0	; 192
     1fc:	ef 2b       	or	r30, r31
     1fe:	29 f4       	brne	.+10     	; 0x20a <uxChecksumGetTaskChecksum+0x164>
    usX <<= 2;
     200:	22 0f       	add	r18, r18
     202:	33 1f       	adc	r19, r19
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
    ucR -= 2;
     208:	42 50       	subi	r20, 0x02	; 2
  }
  if (!(usX & 0x8000u)) {
     20a:	33 23       	and	r19, r19
     20c:	0c f0       	brlt	.+2      	; 0x210 <uxChecksumGetTaskChecksum+0x16a>
    usX <<= 1;
    ucR -= 1;
     20e:	41 50       	subi	r20, 0x01	; 1
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPBitMax = prvFls(usLength * 8 * (-1) * portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
     210:	a4 2e       	mov	r10, r20
     212:	b1 2c       	mov	r11, r1
     214:	55 e0       	ldi	r21, 0x05	; 5
     216:	a5 16       	cp	r10, r21
     218:	b1 04       	cpc	r11, r1
     21a:	08 f4       	brcc	.+2      	; 0x21e <uxChecksumGetTaskChecksum+0x178>
     21c:	65 c0       	rjmp	.+202    	; 0x2e8 <uxChecksumGetTaskChecksum+0x242>
     21e:	04 e0       	ldi	r16, 0x04	; 4
     220:	10 e0       	ldi	r17, 0x00	; 0
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
     222:	cc 24       	eor	r12, r12
     224:	c3 94       	inc	r12
     226:	d1 2c       	mov	r13, r1
    for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
        ucPoolH ^= (*(pucDataP + i));
      }
    }
    usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     228:	0f 2e       	mov	r0, r31
     22a:	f6 e9       	ldi	r31, 0x96	; 150
     22c:	ef 2e       	mov	r14, r31
     22e:	f9 e6       	ldi	r31, 0x69	; 105
     230:	ff 2e       	mov	r15, r31
     232:	f0 2d       	mov	r31, r0

  ucPBitMax = prvFls(usLength * 8 * (-1) * portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
     234:	98 01       	movw	r18, r16
     236:	23 50       	subi	r18, 0x03	; 3
     238:	31 09       	sbc	r19, r1
     23a:	e6 01       	movw	r28, r12
     23c:	02 c0       	rjmp	.+4      	; 0x242 <uxChecksumGetTaskChecksum+0x19c>
     23e:	cc 0f       	add	r28, r28
     240:	dd 1f       	adc	r29, r29
     242:	2a 95       	dec	r18
     244:	e2 f7       	brpl	.-8      	; 0x23e <uxChecksumGetTaskChecksum+0x198>
    for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     246:	e8 2d       	mov	r30, r8
     248:	f7 2d       	mov	r31, r7
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPBitMax = prvFls(usLength * 8 * (-1) * portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
     24e:	91 2c       	mov	r9, r1
    usPosBit = (1 << (usPBit - 3));
    for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     250:	12 c0       	rjmp	.+36     	; 0x276 <uxChecksumGetTaskChecksum+0x1d0>
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     252:	4f 5f       	subi	r20, 0xFF	; 255
     254:	5f 4f       	sbci	r21, 0xFF	; 255
#elif ( configSUPPORT_TASK_CHECKSUM==3 )

#define checksumPARITY(n) ((0x6996 >> ((n ^ (n >> 4)) & 0x0f)) & 0x01)

static inline uint16_t prvAbs(int16_t sX) {
	int16_t sT = (sX >> 15);
     256:	9a 01       	movw	r18, r20
     258:	33 0f       	add	r19, r19
     25a:	22 0b       	sbc	r18, r18
     25c:	32 2f       	mov	r19, r18

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
    for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     25e:	da 01       	movw	r26, r20
     260:	a2 0f       	add	r26, r18
     262:	b3 1f       	adc	r27, r19
     264:	2a 27       	eor	r18, r26
     266:	3b 27       	eor	r19, r27
     268:	2c 23       	and	r18, r28
     26a:	3d 23       	and	r19, r29
     26c:	23 2b       	or	r18, r19
     26e:	11 f0       	breq	.+4      	; 0x274 <uxChecksumGetTaskChecksum+0x1ce>
        ucPoolH ^= (*(pucDataP + i));
     270:	21 81       	ldd	r18, Z+1	; 0x01
     272:	92 26       	eor	r9, r18
     274:	31 96       	adiw	r30, 0x01	; 1
  ucPBitMax = prvFls(usLength * 8 * (-1) * portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
    for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
     276:	46 17       	cp	r20, r22
     278:	57 07       	cpc	r21, r23
     27a:	59 f7       	brne	.-42     	; 0x252 <uxChecksumGetTaskChecksum+0x1ac>
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
        ucPoolH ^= (*(pucDataP + i));
      }
    }
    usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     27c:	29 2d       	mov	r18, r9
     27e:	22 95       	swap	r18
     280:	2f 70       	andi	r18, 0x0F	; 15
     282:	29 25       	eor	r18, r9
     284:	2f 70       	andi	r18, 0x0F	; 15
     286:	a7 01       	movw	r20, r14
     288:	02 c0       	rjmp	.+4      	; 0x28e <uxChecksumGetTaskChecksum+0x1e8>
     28a:	55 95       	asr	r21
     28c:	47 95       	ror	r20
     28e:	2a 95       	dec	r18
     290:	e2 f7       	brpl	.-8      	; 0x28a <uxChecksumGetTaskChecksum+0x1e4>
     292:	9a 01       	movw	r18, r20
     294:	21 70       	andi	r18, 0x01	; 1
     296:	33 27       	eor	r19, r19
     298:	00 2e       	mov	r0, r16
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <uxChecksumGetTaskChecksum+0x1fa>
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	0a 94       	dec	r0
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <uxChecksumGetTaskChecksum+0x1f6>
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPBitMax = prvFls(usLength * 8 * (-1) * portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
     2a8:	0f 5f       	subi	r16, 0xFF	; 255
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	0a 15       	cp	r16, r10
     2ae:	1b 05       	cpc	r17, r11
     2b0:	09 f6       	brne	.-126    	; 0x234 <uxChecksumGetTaskChecksum+0x18e>
     2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <uxChecksumGetTaskChecksum+0x242>
  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != usLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xCC);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     2b4:	84 2f       	mov	r24, r20
     2b6:	82 95       	swap	r24
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	48 27       	eor	r20, r24
     2bc:	4f 70       	andi	r20, 0x0F	; 15
     2be:	06 e9       	ldi	r16, 0x96	; 150
     2c0:	19 e6       	ldi	r17, 0x69	; 105
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <uxChecksumGetTaskChecksum+0x222>
     2c4:	15 95       	asr	r17
     2c6:	07 95       	ror	r16
     2c8:	4a 95       	dec	r20
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <uxChecksumGetTaskChecksum+0x21e>
     2cc:	01 70       	andi	r16, 0x01	; 1
     2ce:	11 27       	eor	r17, r17
     2d0:	c8 01       	movw	r24, r16
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	8c 01       	movw	r16, r24
     2d8:	0c 0f       	add	r16, r28
     2da:	1d 1f       	adc	r17, r29
     2dc:	db 01       	movw	r26, r22
     2de:	11 96       	adiw	r26, 0x01	; 1
     2e0:	a2 0f       	add	r26, r18
     2e2:	b3 1f       	adc	r27, r19
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	16 cf       	rjmp	.-468    	; 0x114 <uxChecksumGetTaskChecksum+0x6e>
    }
    usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
  }

  return usHammingBits;
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	df 90       	pop	r13
     2f6:	cf 90       	pop	r12
     2f8:	bf 90       	pop	r11
     2fa:	af 90       	pop	r10
     2fc:	9f 90       	pop	r9
     2fe:	8f 90       	pop	r8
     300:	7f 90       	pop	r7
     302:	08 95       	ret

00000304 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     30a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 4a 07 	call	0xe94	; 0xe94 <malloc>
     314:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     316:	0e 94 bd 05 	call	0xb7a	; 0xb7a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     31a:	ce 01       	movw	r24, r28
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
	if( pv )
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	41 f0       	breq	.+16     	; 0x33a <vPortFree+0x18>
     32a:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     32c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <vTaskSuspendAll>
		{
			free( pv );
     330:	ce 01       	movw	r24, r28
     332:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     336:	0e 94 bd 05 	call	0xb7a	; 0xb7a <xTaskResumeAll>
	}
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     340:	fc 01       	movw	r30, r24
     342:	03 96       	adiw	r24, 0x03	; 3
     344:	92 83       	std	Z+2, r25	; 0x02
     346:	81 83       	std	Z+1, r24	; 0x01
     348:	2f ef       	ldi	r18, 0xFF	; 255
     34a:	3f ef       	ldi	r19, 0xFF	; 255
     34c:	34 83       	std	Z+4, r19	; 0x04
     34e:	23 83       	std	Z+3, r18	; 0x03
     350:	96 83       	std	Z+6, r25	; 0x06
     352:	85 83       	std	Z+5, r24	; 0x05
     354:	90 87       	std	Z+8, r25	; 0x08
     356:	87 83       	std	Z+7, r24	; 0x07
     358:	10 82       	st	Z, r1
     35a:	08 95       	ret

0000035c <vListInitialiseItem>:
     35c:	fc 01       	movw	r30, r24
     35e:	11 86       	std	Z+9, r1	; 0x09
     360:	10 86       	std	Z+8, r1	; 0x08
     362:	08 95       	ret

00000364 <vListInsertEnd>:
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	9c 01       	movw	r18, r24
     36a:	fb 01       	movw	r30, r22
     36c:	dc 01       	movw	r26, r24
     36e:	11 96       	adiw	r26, 0x01	; 1
     370:	cd 91       	ld	r28, X+
     372:	dc 91       	ld	r29, X
     374:	12 97       	sbiw	r26, 0x02	; 2
     376:	d3 83       	std	Z+3, r29	; 0x03
     378:	c2 83       	std	Z+2, r28	; 0x02
     37a:	8c 81       	ldd	r24, Y+4	; 0x04
     37c:	9d 81       	ldd	r25, Y+5	; 0x05
     37e:	95 83       	std	Z+5, r25	; 0x05
     380:	84 83       	std	Z+4, r24	; 0x04
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	9d 81       	ldd	r25, Y+5	; 0x05
     386:	dc 01       	movw	r26, r24
     388:	13 96       	adiw	r26, 0x03	; 3
     38a:	7c 93       	st	X, r23
     38c:	6e 93       	st	-X, r22
     38e:	12 97       	sbiw	r26, 0x02	; 2
     390:	7d 83       	std	Y+5, r23	; 0x05
     392:	6c 83       	std	Y+4, r22	; 0x04
     394:	31 87       	std	Z+9, r19	; 0x09
     396:	20 87       	std	Z+8, r18	; 0x08
     398:	f9 01       	movw	r30, r18
     39a:	80 81       	ld	r24, Z
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 83       	st	Z, r24
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     3ac:	a0 85       	ldd	r26, Z+8	; 0x08
     3ae:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3b0:	c2 81       	ldd	r28, Z+2	; 0x02
     3b2:	d3 81       	ldd	r29, Z+3	; 0x03
     3b4:	84 81       	ldd	r24, Z+4	; 0x04
     3b6:	95 81       	ldd	r25, Z+5	; 0x05
     3b8:	9d 83       	std	Y+5, r25	; 0x05
     3ba:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3bc:	c4 81       	ldd	r28, Z+4	; 0x04
     3be:	d5 81       	ldd	r29, Z+5	; 0x05
     3c0:	82 81       	ldd	r24, Z+2	; 0x02
     3c2:	93 81       	ldd	r25, Z+3	; 0x03
     3c4:	9b 83       	std	Y+3, r25	; 0x03
     3c6:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3c8:	11 96       	adiw	r26, 0x01	; 1
     3ca:	8d 91       	ld	r24, X+
     3cc:	9c 91       	ld	r25, X
     3ce:	12 97       	sbiw	r26, 0x02	; 2
     3d0:	e8 17       	cp	r30, r24
     3d2:	f9 07       	cpc	r31, r25
     3d4:	31 f4       	brne	.+12     	; 0x3e2 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3d6:	84 81       	ldd	r24, Z+4	; 0x04
     3d8:	95 81       	ldd	r25, Z+5	; 0x05
     3da:	12 96       	adiw	r26, 0x02	; 2
     3dc:	9c 93       	st	X, r25
     3de:	8e 93       	st	-X, r24
     3e0:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     3e2:	11 86       	std	Z+9, r1	; 0x09
     3e4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     3e6:	8c 91       	ld	r24, X
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     3ec:	8c 91       	ld	r24, X
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     3f4:	31 e1       	ldi	r19, 0x11	; 17
     3f6:	fc 01       	movw	r30, r24
     3f8:	30 83       	st	Z, r19
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	22 e2       	ldi	r18, 0x22	; 34
     3fe:	20 83       	st	Z, r18
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	a3 e3       	ldi	r26, 0x33	; 51
     404:	a0 83       	st	Z, r26
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	60 83       	st	Z, r22
     40a:	31 97       	sbiw	r30, 0x01	; 1
     40c:	70 83       	st	Z, r23
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	10 82       	st	Z, r1
     412:	31 97       	sbiw	r30, 0x01	; 1
     414:	60 e8       	ldi	r22, 0x80	; 128
     416:	60 83       	st	Z, r22
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	10 82       	st	Z, r1
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	62 e0       	ldi	r22, 0x02	; 2
     420:	60 83       	st	Z, r22
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	63 e0       	ldi	r22, 0x03	; 3
     426:	60 83       	st	Z, r22
     428:	31 97       	sbiw	r30, 0x01	; 1
     42a:	64 e0       	ldi	r22, 0x04	; 4
     42c:	60 83       	st	Z, r22
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	65 e0       	ldi	r22, 0x05	; 5
     432:	60 83       	st	Z, r22
     434:	31 97       	sbiw	r30, 0x01	; 1
     436:	66 e0       	ldi	r22, 0x06	; 6
     438:	60 83       	st	Z, r22
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	67 e0       	ldi	r22, 0x07	; 7
     43e:	60 83       	st	Z, r22
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	68 e0       	ldi	r22, 0x08	; 8
     444:	60 83       	st	Z, r22
     446:	31 97       	sbiw	r30, 0x01	; 1
     448:	69 e0       	ldi	r22, 0x09	; 9
     44a:	60 83       	st	Z, r22
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	60 e1       	ldi	r22, 0x10	; 16
     450:	60 83       	st	Z, r22
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	30 83       	st	Z, r19
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	32 e1       	ldi	r19, 0x12	; 18
     45a:	30 83       	st	Z, r19
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	33 e1       	ldi	r19, 0x13	; 19
     460:	30 83       	st	Z, r19
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	34 e1       	ldi	r19, 0x14	; 20
     466:	30 83       	st	Z, r19
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	35 e1       	ldi	r19, 0x15	; 21
     46c:	30 83       	st	Z, r19
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	36 e1       	ldi	r19, 0x16	; 22
     472:	30 83       	st	Z, r19
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	37 e1       	ldi	r19, 0x17	; 23
     478:	30 83       	st	Z, r19
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	38 e1       	ldi	r19, 0x18	; 24
     47e:	30 83       	st	Z, r19
     480:	31 97       	sbiw	r30, 0x01	; 1
     482:	39 e1       	ldi	r19, 0x19	; 25
     484:	30 83       	st	Z, r19
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	30 e2       	ldi	r19, 0x20	; 32
     48a:	30 83       	st	Z, r19
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	31 e2       	ldi	r19, 0x21	; 33
     490:	30 83       	st	Z, r19
     492:	31 97       	sbiw	r30, 0x01	; 1
     494:	20 83       	st	Z, r18
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	23 e2       	ldi	r18, 0x23	; 35
     49a:	20 83       	st	Z, r18
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	40 83       	st	Z, r20
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	50 83       	st	Z, r21
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	26 e2       	ldi	r18, 0x26	; 38
     4a8:	20 83       	st	Z, r18
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	27 e2       	ldi	r18, 0x27	; 39
     4ae:	20 83       	st	Z, r18
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	28 e2       	ldi	r18, 0x28	; 40
     4b4:	20 83       	st	Z, r18
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	29 e2       	ldi	r18, 0x29	; 41
     4ba:	20 83       	st	Z, r18
     4bc:	31 97       	sbiw	r30, 0x01	; 1
     4be:	20 e3       	ldi	r18, 0x30	; 48
     4c0:	20 83       	st	Z, r18
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	21 e3       	ldi	r18, 0x31	; 49
     4c6:	20 83       	st	Z, r18
     4c8:	86 97       	sbiw	r24, 0x26	; 38
     4ca:	08 95       	ret

000004cc <xPortStartScheduler>:
     4cc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4d0:	89 ef       	ldi	r24, 0xF9	; 249
     4d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4d6:	8b e0       	ldi	r24, 0x0B	; 11
     4d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     4dc:	ef e6       	ldi	r30, 0x6F	; 111
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	80 81       	ld	r24, Z
     4e2:	82 60       	ori	r24, 0x02	; 2
     4e4:	80 83       	st	Z, r24
     4e6:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     4ea:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     4ee:	cd 91       	ld	r28, X+
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	dd 91       	ld	r29, X+
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	bf 91       	pop	r27
     500:	af 91       	pop	r26
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	7f 91       	pop	r23
     508:	6f 91       	pop	r22
     50a:	5f 91       	pop	r21
     50c:	4f 91       	pop	r20
     50e:	3f 91       	pop	r19
     510:	2f 91       	pop	r18
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	9f 90       	pop	r9
     524:	8f 90       	pop	r8
     526:	7f 90       	pop	r7
     528:	6f 90       	pop	r6
     52a:	5f 90       	pop	r5
     52c:	4f 90       	pop	r4
     52e:	3f 90       	pop	r3
     530:	2f 90       	pop	r2
     532:	1f 90       	pop	r1
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	08 95       	ret
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret

00000540 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	0f 92       	push	r0
     548:	1f 92       	push	r1
     54a:	11 24       	eor	r1, r1
     54c:	2f 92       	push	r2
     54e:	3f 92       	push	r3
     550:	4f 92       	push	r4
     552:	5f 92       	push	r5
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ef 93       	push	r30
     586:	ff 93       	push	r31
     588:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     58c:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     590:	0d b6       	in	r0, 0x3d	; 61
     592:	0d 92       	st	X+, r0
     594:	0e b6       	in	r0, 0x3e	; 62
     596:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     598:	0e 94 3c 06 	call	0xc78	; 0xc78 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     59c:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     5a0:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     5a4:	cd 91       	ld	r28, X+
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	dd 91       	ld	r29, X+
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	df 90       	pop	r13
     5d2:	cf 90       	pop	r12
     5d4:	bf 90       	pop	r11
     5d6:	af 90       	pop	r10
     5d8:	9f 90       	pop	r9
     5da:	8f 90       	pop	r8
     5dc:	7f 90       	pop	r7
     5de:	6f 90       	pop	r6
     5e0:	5f 90       	pop	r5
     5e2:	4f 90       	pop	r4
     5e4:	3f 90       	pop	r3
     5e6:	2f 90       	pop	r2
     5e8:	1f 90       	pop	r1
     5ea:	0f 90       	pop	r0
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5f0:	08 95       	ret

000005f2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	0f 92       	push	r0
     5fa:	1f 92       	push	r1
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 92       	push	r2
     600:	3f 92       	push	r3
     602:	4f 92       	push	r4
     604:	5f 92       	push	r5
     606:	6f 92       	push	r6
     608:	7f 92       	push	r7
     60a:	8f 92       	push	r8
     60c:	9f 92       	push	r9
     60e:	af 92       	push	r10
     610:	bf 92       	push	r11
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	2f 93       	push	r18
     620:	3f 93       	push	r19
     622:	4f 93       	push	r20
     624:	5f 93       	push	r21
     626:	6f 93       	push	r22
     628:	7f 93       	push	r23
     62a:	8f 93       	push	r24
     62c:	9f 93       	push	r25
     62e:	af 93       	push	r26
     630:	bf 93       	push	r27
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
     63a:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     63e:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     642:	0d b6       	in	r0, 0x3d	; 61
     644:	0d 92       	st	X+, r0
     646:	0e b6       	in	r0, 0x3e	; 62
     648:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     64a:	0e 94 02 05 	call	0xa04	; 0xa04 <xTaskIncrementTick>
     64e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     650:	0e 94 3c 06 	call	0xc78	; 0xc78 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     654:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     658:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     65c:	cd 91       	ld	r28, X+
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	dd 91       	ld	r29, X+
     662:	de bf       	out	0x3e, r29	; 62
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	3f 90       	pop	r3
     69e:	2f 90       	pop	r2
     6a0:	1f 90       	pop	r1
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     6a8:	08 95       	ret

000006aa <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     6aa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <vPortYieldFromTick>
		asm volatile ( "reti" );
     6ae:	18 95       	reti

000006b0 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     6b0:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     6b4:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     6b8:	80 81       	ld	r24, Z
     6ba:	81 11       	cpse	r24, r1
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <prvResetNextTaskUnblockTime+0x1c>
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	9f ef       	ldi	r25, 0xFF	; 255
     6c2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     6c6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     6ca:	08 95       	ret
     6cc:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     6d0:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     6d4:	05 80       	ldd	r0, Z+5	; 0x05
     6d6:	f6 81       	ldd	r31, Z+6	; 0x06
     6d8:	e0 2d       	mov	r30, r0
     6da:	06 80       	ldd	r0, Z+6	; 0x06
     6dc:	f7 81       	ldd	r31, Z+7	; 0x07
     6de:	e0 2d       	mov	r30, r0
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	93 81       	ldd	r25, Z+3	; 0x03
     6e4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     6e8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     6ec:	08 95       	ret

000006ee <prvIdleTask>:
     6ee:	01 e2       	ldi	r16, 0x21	; 33
     6f0:	11 e0       	ldi	r17, 0x01	; 1
     6f2:	0f 2e       	mov	r0, r31
     6f4:	f9 e4       	ldi	r31, 0x49	; 73
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     702:	88 23       	and	r24, r24
     704:	29 f1       	breq	.+74     	; 0x750 <prvIdleTask+0x62>
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	0f 92       	push	r0
     70c:	d8 01       	movw	r26, r16
     70e:	15 96       	adiw	r26, 0x05	; 5
     710:	ed 91       	ld	r30, X+
     712:	fc 91       	ld	r31, X
     714:	16 97       	sbiw	r26, 0x06	; 6
     716:	c6 81       	ldd	r28, Z+6	; 0x06
     718:	d7 81       	ldd	r29, Z+7	; 0x07
     71a:	ce 01       	movw	r24, r28
     71c:	02 96       	adiw	r24, 0x02	; 2
     71e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uxListRemove>
     722:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     726:	81 50       	subi	r24, 0x01	; 1
     728:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
     72c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     730:	81 50       	subi	r24, 0x01	; 1
     732:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	8f 89       	ldd	r24, Y+23	; 0x17
     73c:	98 8d       	ldd	r25, Y+24	; 0x18
     73e:	0e 94 91 01 	call	0x322	; 0x322 <vPortFree>
     742:	ce 01       	movw	r24, r28
     744:	0e 94 91 01 	call	0x322	; 0x322 <vPortFree>
     748:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     74c:	81 11       	cpse	r24, r1
     74e:	db cf       	rjmp	.-74     	; 0x706 <prvIdleTask+0x18>
     750:	f7 01       	movw	r30, r14
     752:	80 81       	ld	r24, Z
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	98 f2       	brcs	.-90     	; 0x6fe <prvIdleTask+0x10>
     758:	0e 94 a0 02 	call	0x540	; 0x540 <vPortYield>
     75c:	d0 cf       	rjmp	.-96     	; 0x6fe <prvIdleTask+0x10>

0000075e <xTaskCreate>:
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	4c 01       	movw	r8, r24
     77e:	6b 01       	movw	r12, r22
     780:	5a 01       	movw	r10, r20
     782:	29 01       	movw	r4, r18
     784:	ca 01       	movw	r24, r20
     786:	0e 94 82 01 	call	0x304	; 0x304 <pvPortMalloc>
     78a:	3c 01       	movw	r6, r24
     78c:	89 2b       	or	r24, r25
     78e:	09 f4       	brne	.+2      	; 0x792 <xTaskCreate+0x34>
     790:	f8 c0       	rjmp	.+496    	; 0x982 <__stack+0x83>
     792:	8c e2       	ldi	r24, 0x2C	; 44
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 82 01 	call	0x304	; 0x304 <pvPortMalloc>
     79a:	ec 01       	movw	r28, r24
     79c:	89 2b       	or	r24, r25
     79e:	c1 f0       	breq	.+48     	; 0x7d0 <xTaskCreate+0x72>
     7a0:	78 8e       	std	Y+24, r7	; 0x18
     7a2:	6f 8a       	std	Y+23, r6	; 0x17
     7a4:	a5 01       	movw	r20, r10
     7a6:	65 ea       	ldi	r22, 0xA5	; 165
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	c3 01       	movw	r24, r6
     7ac:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <memset>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	a8 1a       	sub	r10, r24
     7b4:	b1 08       	sbc	r11, r1
     7b6:	8f 89       	ldd	r24, Y+23	; 0x17
     7b8:	98 8d       	ldd	r25, Y+24	; 0x18
     7ba:	a8 0e       	add	r10, r24
     7bc:	b9 1e       	adc	r11, r25
     7be:	bc a2       	std	Y+36, r11	; 0x24
     7c0:	ab a2       	std	Y+35, r10	; 0x23
     7c2:	d6 01       	movw	r26, r12
     7c4:	8c 91       	ld	r24, X
     7c6:	89 8f       	std	Y+25, r24	; 0x19
     7c8:	8c 91       	ld	r24, X
     7ca:	81 11       	cpse	r24, r1
     7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <xTaskCreate+0x7a>
     7ce:	18 c0       	rjmp	.+48     	; 0x800 <xTaskCreate+0xa2>
     7d0:	c3 01       	movw	r24, r6
     7d2:	0e 94 91 01 	call	0x322	; 0x322 <vPortFree>
     7d6:	d5 c0       	rjmp	.+426    	; 0x982 <__stack+0x83>
     7d8:	ae 01       	movw	r20, r28
     7da:	46 5e       	subi	r20, 0xE6	; 230
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	f6 01       	movw	r30, r12
     7e0:	31 96       	adiw	r30, 0x01	; 1
     7e2:	b8 e0       	ldi	r27, 0x08	; 8
     7e4:	cb 0e       	add	r12, r27
     7e6:	d1 1c       	adc	r13, r1
     7e8:	cf 01       	movw	r24, r30
     7ea:	21 91       	ld	r18, Z+
     7ec:	da 01       	movw	r26, r20
     7ee:	2d 93       	st	X+, r18
     7f0:	ad 01       	movw	r20, r26
     7f2:	dc 01       	movw	r26, r24
     7f4:	8c 91       	ld	r24, X
     7f6:	88 23       	and	r24, r24
     7f8:	19 f0       	breq	.+6      	; 0x800 <xTaskCreate+0xa2>
     7fa:	ec 15       	cp	r30, r12
     7fc:	fd 05       	cpc	r31, r13
     7fe:	a1 f7       	brne	.-24     	; 0x7e8 <xTaskCreate+0x8a>
     800:	18 a2       	std	Y+32, r1	; 0x20
     802:	04 30       	cpi	r16, 0x04	; 4
     804:	08 f0       	brcs	.+2      	; 0x808 <xTaskCreate+0xaa>
     806:	03 e0       	ldi	r16, 0x03	; 3
     808:	0e 8b       	std	Y+22, r16	; 0x16
     80a:	0d a3       	std	Y+37, r16	; 0x25
     80c:	1e a2       	std	Y+38, r1	; 0x26
     80e:	6e 01       	movw	r12, r28
     810:	b2 e0       	ldi	r27, 0x02	; 2
     812:	cb 0e       	add	r12, r27
     814:	d1 1c       	adc	r13, r1
     816:	c6 01       	movw	r24, r12
     818:	0e 94 ae 01 	call	0x35c	; 0x35c <vListInitialiseItem>
     81c:	ce 01       	movw	r24, r28
     81e:	0c 96       	adiw	r24, 0x0c	; 12
     820:	0e 94 ae 01 	call	0x35c	; 0x35c <vListInitialiseItem>
     824:	d9 87       	std	Y+9, r29	; 0x09
     826:	c8 87       	std	Y+8, r28	; 0x08
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	80 1b       	sub	r24, r16
     82e:	91 09       	sbc	r25, r1
     830:	9d 87       	std	Y+13, r25	; 0x0d
     832:	8c 87       	std	Y+12, r24	; 0x0c
     834:	db 8b       	std	Y+19, r29	; 0x13
     836:	ca 8b       	std	Y+18, r28	; 0x12
     838:	1f a2       	std	Y+39, r1	; 0x27
     83a:	18 a6       	std	Y+40, r1	; 0x28
     83c:	19 a6       	std	Y+41, r1	; 0x29
     83e:	1a a6       	std	Y+42, r1	; 0x2a
     840:	1b a6       	std	Y+43, r1	; 0x2b
     842:	a2 01       	movw	r20, r4
     844:	b4 01       	movw	r22, r8
     846:	c5 01       	movw	r24, r10
     848:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <pxPortInitialiseStack>
     84c:	99 83       	std	Y+1, r25	; 0x01
     84e:	88 83       	st	Y, r24
     850:	e1 14       	cp	r14, r1
     852:	f1 04       	cpc	r15, r1
     854:	19 f0       	breq	.+6      	; 0x85c <xTaskCreate+0xfe>
     856:	f7 01       	movw	r30, r14
     858:	d1 83       	std	Z+1, r29	; 0x01
     85a:	c0 83       	st	Z, r28
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	0f 92       	push	r0
     862:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     866:	8f 5f       	subi	r24, 0xFF	; 255
     868:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
     86c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
     870:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     874:	89 2b       	or	r24, r25
     876:	a9 f5       	brne	.+106    	; 0x8e2 <xTaskCreate+0x184>
     878:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
     87c:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
     880:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	e9 f5       	brne	.+122    	; 0x902 <__stack+0x3>
     888:	89 e4       	ldi	r24, 0x49	; 73
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     890:	82 e5       	ldi	r24, 0x52	; 82
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     898:	8b e5       	ldi	r24, 0x5B	; 91
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     8a0:	84 e6       	ldi	r24, 0x64	; 100
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     8a8:	80 e4       	ldi	r24, 0x40	; 64
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     8b0:	87 e3       	ldi	r24, 0x37	; 55
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     8b8:	8a e2       	ldi	r24, 0x2A	; 42
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     8c0:	81 e2       	ldi	r24, 0x21	; 33
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 a0 01 	call	0x340	; 0x340 <vListInitialise>
     8c8:	80 e4       	ldi	r24, 0x40	; 64
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <pxDelayedTaskList+0x1>
     8d0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <pxDelayedTaskList>
     8d4:	87 e3       	ldi	r24, 0x37	; 55
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
     8dc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
     8e0:	10 c0       	rjmp	.+32     	; 0x902 <__stack+0x3>
     8e2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
     8e6:	81 11       	cpse	r24, r1
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <__stack+0x3>
     8ea:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     8ee:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     8f2:	96 89       	ldd	r25, Z+22	; 0x16
     8f4:	8e 89       	ldd	r24, Y+22	; 0x16
     8f6:	89 17       	cp	r24, r25
     8f8:	20 f0       	brcs	.+8      	; 0x902 <__stack+0x3>
     8fa:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
     8fe:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
     902:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
     906:	8f 5f       	subi	r24, 0xFF	; 255
     908:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
     90c:	e0 90 6d 01 	lds	r14, 0x016D	; 0x80016d <pxCurrentTCB>
     910:	f0 90 6e 01 	lds	r15, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     914:	6b a1       	ldd	r22, Y+35	; 0x23
     916:	7c a1       	ldd	r23, Y+36	; 0x24
     918:	88 81       	ld	r24, Y
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     920:	d7 01       	movw	r26, r14
     922:	92 96       	adiw	r26, 0x22	; 34
     924:	9c 93       	st	X, r25
     926:	8e 93       	st	-X, r24
     928:	91 97       	sbiw	r26, 0x21	; 33
     92a:	8e 89       	ldd	r24, Y+22	; 0x16
     92c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     930:	98 17       	cp	r25, r24
     932:	10 f4       	brcc	.+4      	; 0x938 <__stack+0x39>
     934:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	9c 01       	movw	r18, r24
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	22 0f       	add	r18, r18
     942:	33 1f       	adc	r19, r19
     944:	22 0f       	add	r18, r18
     946:	33 1f       	adc	r19, r19
     948:	82 0f       	add	r24, r18
     94a:	93 1f       	adc	r25, r19
     94c:	b6 01       	movw	r22, r12
     94e:	87 5b       	subi	r24, 0xB7	; 183
     950:	9e 4f       	sbci	r25, 0xFE	; 254
     952:	0e 94 b2 01 	call	0x364	; 0x364 <vListInsertEnd>
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
     95e:	88 23       	and	r24, r24
     960:	61 f0       	breq	.+24     	; 0x97a <__stack+0x7b>
     962:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     966:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     96a:	96 89       	ldd	r25, Z+22	; 0x16
     96c:	8e 89       	ldd	r24, Y+22	; 0x16
     96e:	98 17       	cp	r25, r24
     970:	30 f4       	brcc	.+12     	; 0x97e <__stack+0x7f>
     972:	0e 94 a0 02 	call	0x540	; 0x540 <vPortYield>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	05 c0       	rjmp	.+10     	; 0x984 <__stack+0x85>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	03 c0       	rjmp	.+6      	; 0x984 <__stack+0x85>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	01 c0       	rjmp	.+2      	; 0x984 <__stack+0x85>
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	08 95       	ret

000009a4 <vTaskStartScheduler>:
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	0f 2e       	mov	r0, r31
     9ac:	f3 e1       	ldi	r31, 0x13	; 19
     9ae:	ef 2e       	mov	r14, r31
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	ff 2e       	mov	r15, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	44 e6       	ldi	r20, 0x64	; 100
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	66 e0       	ldi	r22, 0x06	; 6
     9c2:	71 e0       	ldi	r23, 0x01	; 1
     9c4:	87 e7       	ldi	r24, 0x77	; 119
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	0e 94 af 03 	call	0x75e	; 0x75e <xTaskCreate>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	81 f4       	brne	.+32     	; 0x9f0 <vTaskStartScheduler+0x4c>
     9d0:	f8 94       	cli
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	9f ef       	ldi	r25, 0xFF	; 255
     9d6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     9da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
     9e4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
     9e8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
     9ec:	0e 94 66 02 	call	0x4cc	; 0x4cc <xPortStartScheduler>
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	08 95       	ret

000009f8 <vTaskSuspendAll>:
     9f8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     a02:	08 95       	ret

00000a04 <xTaskIncrementTick>:
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     a18:	81 11       	cpse	r24, r1
     a1a:	99 c0       	rjmp	.+306    	; 0xb4e <xTaskIncrementTick+0x14a>
     a1c:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
     a20:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	e8 1a       	sub	r14, r24
     a28:	f8 0a       	sbc	r15, r24
     a2a:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
     a2e:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
     a32:	e1 14       	cp	r14, r1
     a34:	f1 04       	cpc	r15, r1
     a36:	b9 f4       	brne	.+46     	; 0xa66 <xTaskIncrementTick+0x62>
     a38:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <pxDelayedTaskList>
     a3c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     a40:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pxOverflowDelayedTaskList>
     a44:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pxOverflowDelayedTaskList+0x1>
     a48:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <pxDelayedTaskList+0x1>
     a4c:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <pxDelayedTaskList>
     a50:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
     a54:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
     a58:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
     a62:	0e 94 58 03 	call	0x6b0	; 0x6b0 <prvResetNextTaskUnblockTime>
     a66:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
     a6a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
     a6e:	e8 16       	cp	r14, r24
     a70:	f9 06       	cpc	r15, r25
     a72:	10 f4       	brcc	.+4      	; 0xa78 <xTaskIncrementTick+0x74>
     a74:	d1 2c       	mov	r13, r1
     a76:	53 c0       	rjmp	.+166    	; 0xb1e <xTaskIncrementTick+0x11a>
     a78:	d1 2c       	mov	r13, r1
     a7a:	cc 24       	eor	r12, r12
     a7c:	c3 94       	inc	r12
     a7e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     a82:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     a86:	80 81       	ld	r24, Z
     a88:	81 11       	cpse	r24, r1
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <xTaskIncrementTick+0x96>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
     a90:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     a94:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     a98:	42 c0       	rjmp	.+132    	; 0xb1e <xTaskIncrementTick+0x11a>
     a9a:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     a9e:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     aa2:	05 80       	ldd	r0, Z+5	; 0x05
     aa4:	f6 81       	ldd	r31, Z+6	; 0x06
     aa6:	e0 2d       	mov	r30, r0
     aa8:	c6 81       	ldd	r28, Z+6	; 0x06
     aaa:	d7 81       	ldd	r29, Z+7	; 0x07
     aac:	8a 81       	ldd	r24, Y+2	; 0x02
     aae:	9b 81       	ldd	r25, Y+3	; 0x03
     ab0:	e8 16       	cp	r14, r24
     ab2:	f9 06       	cpc	r15, r25
     ab4:	28 f4       	brcc	.+10     	; 0xac0 <xTaskIncrementTick+0xbc>
     ab6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     aba:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     abe:	2f c0       	rjmp	.+94     	; 0xb1e <xTaskIncrementTick+0x11a>
     ac0:	8e 01       	movw	r16, r28
     ac2:	0e 5f       	subi	r16, 0xFE	; 254
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
     ac6:	c8 01       	movw	r24, r16
     ac8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uxListRemove>
     acc:	8c 89       	ldd	r24, Y+20	; 0x14
     ace:	9d 89       	ldd	r25, Y+21	; 0x15
     ad0:	89 2b       	or	r24, r25
     ad2:	21 f0       	breq	.+8      	; 0xadc <xTaskIncrementTick+0xd8>
     ad4:	ce 01       	movw	r24, r28
     ad6:	0c 96       	adiw	r24, 0x0c	; 12
     ad8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uxListRemove>
     adc:	8e 89       	ldd	r24, Y+22	; 0x16
     ade:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     ae2:	98 17       	cp	r25, r24
     ae4:	10 f4       	brcc	.+4      	; 0xaea <xTaskIncrementTick+0xe6>
     ae6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9c 01       	movw	r18, r24
     aee:	22 0f       	add	r18, r18
     af0:	33 1f       	adc	r19, r19
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	22 0f       	add	r18, r18
     af8:	33 1f       	adc	r19, r19
     afa:	82 0f       	add	r24, r18
     afc:	93 1f       	adc	r25, r19
     afe:	b8 01       	movw	r22, r16
     b00:	87 5b       	subi	r24, 0xB7	; 183
     b02:	9e 4f       	sbci	r25, 0xFE	; 254
     b04:	0e 94 b2 01 	call	0x364	; 0x364 <vListInsertEnd>
     b08:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     b0c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     b10:	9e 89       	ldd	r25, Y+22	; 0x16
     b12:	86 89       	ldd	r24, Z+22	; 0x16
     b14:	98 17       	cp	r25, r24
     b16:	08 f4       	brcc	.+2      	; 0xb1a <xTaskIncrementTick+0x116>
     b18:	b2 cf       	rjmp	.-156    	; 0xa7e <xTaskIncrementTick+0x7a>
     b1a:	dc 2c       	mov	r13, r12
     b1c:	b0 cf       	rjmp	.-160    	; 0xa7e <xTaskIncrementTick+0x7a>
     b1e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     b22:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     b26:	86 89       	ldd	r24, Z+22	; 0x16
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	fc 01       	movw	r30, r24
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	8e 0f       	add	r24, r30
     b3a:	9f 1f       	adc	r25, r31
     b3c:	fc 01       	movw	r30, r24
     b3e:	e7 5b       	subi	r30, 0xB7	; 183
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	80 81       	ld	r24, Z
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	48 f0       	brcs	.+18     	; 0xb5a <xTaskIncrementTick+0x156>
     b48:	dd 24       	eor	r13, r13
     b4a:	d3 94       	inc	r13
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <xTaskIncrementTick+0x156>
     b4e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
     b58:	d1 2c       	mov	r13, r1
     b5a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
     b5e:	88 23       	and	r24, r24
     b60:	11 f0       	breq	.+4      	; 0xb66 <xTaskIncrementTick+0x162>
     b62:	dd 24       	eor	r13, r13
     b64:	d3 94       	inc	r13
     b66:	8d 2d       	mov	r24, r13
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	08 95       	ret

00000b7a <xTaskResumeAll>:
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	0f 92       	push	r0
     b8e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     b92:	81 50       	subi	r24, 0x01	; 1
     b94:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     b98:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     b9c:	81 11       	cpse	r24, r1
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <xTaskResumeAll+0xe4>
     ba0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     ba4:	81 11       	cpse	r24, r1
     ba6:	33 c0       	rjmp	.+102    	; 0xc0e <xTaskResumeAll+0x94>
     ba8:	5d c0       	rjmp	.+186    	; 0xc64 <xTaskResumeAll+0xea>
     baa:	d7 01       	movw	r26, r14
     bac:	15 96       	adiw	r26, 0x05	; 5
     bae:	ed 91       	ld	r30, X+
     bb0:	fc 91       	ld	r31, X
     bb2:	16 97       	sbiw	r26, 0x06	; 6
     bb4:	c6 81       	ldd	r28, Z+6	; 0x06
     bb6:	d7 81       	ldd	r29, Z+7	; 0x07
     bb8:	ce 01       	movw	r24, r28
     bba:	0c 96       	adiw	r24, 0x0c	; 12
     bbc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uxListRemove>
     bc0:	8e 01       	movw	r16, r28
     bc2:	0e 5f       	subi	r16, 0xFE	; 254
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	c8 01       	movw	r24, r16
     bc8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uxListRemove>
     bcc:	8e 89       	ldd	r24, Y+22	; 0x16
     bce:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     bd2:	98 17       	cp	r25, r24
     bd4:	10 f4       	brcc	.+4      	; 0xbda <xTaskResumeAll+0x60>
     bd6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9c 01       	movw	r18, r24
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	b8 01       	movw	r22, r16
     bf0:	87 5b       	subi	r24, 0xB7	; 183
     bf2:	9e 4f       	sbci	r25, 0xFE	; 254
     bf4:	0e 94 b2 01 	call	0x364	; 0x364 <vListInsertEnd>
     bf8:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     bfc:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     c00:	9e 89       	ldd	r25, Y+22	; 0x16
     c02:	86 89       	ldd	r24, Z+22	; 0x16
     c04:	98 17       	cp	r25, r24
     c06:	68 f0       	brcs	.+26     	; 0xc22 <xTaskResumeAll+0xa8>
     c08:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
     c0c:	0a c0       	rjmp	.+20     	; 0xc22 <xTaskResumeAll+0xa8>
     c0e:	c0 e0       	ldi	r28, 0x00	; 0
     c10:	d0 e0       	ldi	r29, 0x00	; 0
     c12:	0f 2e       	mov	r0, r31
     c14:	fa e2       	ldi	r31, 0x2A	; 42
     c16:	ef 2e       	mov	r14, r31
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	ff 2e       	mov	r15, r31
     c1c:	f0 2d       	mov	r31, r0
     c1e:	dd 24       	eor	r13, r13
     c20:	d3 94       	inc	r13
     c22:	f7 01       	movw	r30, r14
     c24:	80 81       	ld	r24, Z
     c26:	81 11       	cpse	r24, r1
     c28:	c0 cf       	rjmp	.-128    	; 0xbaa <xTaskResumeAll+0x30>
     c2a:	cd 2b       	or	r28, r29
     c2c:	11 f0       	breq	.+4      	; 0xc32 <xTaskResumeAll+0xb8>
     c2e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <prvResetNextTaskUnblockTime>
     c32:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
     c36:	cc 23       	and	r28, r28
     c38:	51 f0       	breq	.+20     	; 0xc4e <xTaskResumeAll+0xd4>
     c3a:	d1 e0       	ldi	r29, 0x01	; 1
     c3c:	0e 94 02 05 	call	0xa04	; 0xa04 <xTaskIncrementTick>
     c40:	81 11       	cpse	r24, r1
     c42:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
     c46:	c1 50       	subi	r28, 0x01	; 1
     c48:	c9 f7       	brne	.-14     	; 0xc3c <xTaskResumeAll+0xc2>
     c4a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
     c4e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
     c52:	88 23       	and	r24, r24
     c54:	31 f0       	breq	.+12     	; 0xc62 <xTaskResumeAll+0xe8>
     c56:	0e 94 a0 02 	call	0x540	; 0x540 <vPortYield>
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <xTaskResumeAll+0xea>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <xTaskResumeAll+0xea>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	08 95       	ret

00000c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     c7c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     c80:	88 23       	and	r24, r24
     c82:	21 f0       	breq	.+8      	; 0xc8c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
     c8a:	c1 c0       	rjmp	.+386    	; 0xe0e <vTaskSwitchContext+0x196>
	}
	else
	{
		xYieldPending = pdFALSE;
     c8c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
     c90:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
     c94:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     c98:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     c9c:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     ca0:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     ca4:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     ca8:	93 96       	adiw	r26, 0x23	; 35
     caa:	6d 91       	ld	r22, X+
     cac:	7c 91       	ld	r23, X
     cae:	94 97       	sbiw	r26, 0x24	; 36
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     cb8:	9a a3       	std	Y+34, r25	; 0x22
     cba:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
     cbc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
     cc0:	82 2f       	mov	r24, r18
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	fc 01       	movw	r30, r24
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	e7 5b       	subi	r30, 0xB7	; 183
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	30 81       	ld	r19, Z
     cdc:	31 11       	cpse	r19, r1
     cde:	11 c0       	rjmp	.+34     	; 0xd02 <vTaskSwitchContext+0x8a>
     ce0:	21 50       	subi	r18, 0x01	; 1
     ce2:	82 2f       	mov	r24, r18
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	fc 01       	movw	r30, r24
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	e8 0f       	add	r30, r24
     cf6:	f9 1f       	adc	r31, r25
     cf8:	e7 5b       	subi	r30, 0xB7	; 183
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	30 81       	ld	r19, Z
     cfe:	33 23       	and	r19, r19
     d00:	79 f3       	breq	.-34     	; 0xce0 <vTaskSwitchContext+0x68>
     d02:	ac 01       	movw	r20, r24
     d04:	44 0f       	add	r20, r20
     d06:	55 1f       	adc	r21, r21
     d08:	44 0f       	add	r20, r20
     d0a:	55 1f       	adc	r21, r21
     d0c:	44 0f       	add	r20, r20
     d0e:	55 1f       	adc	r21, r21
     d10:	48 0f       	add	r20, r24
     d12:	59 1f       	adc	r21, r25
     d14:	da 01       	movw	r26, r20
     d16:	a7 5b       	subi	r26, 0xB7	; 183
     d18:	be 4f       	sbci	r27, 0xFE	; 254
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	ed 91       	ld	r30, X+
     d1e:	fc 91       	ld	r31, X
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	02 80       	ldd	r0, Z+2	; 0x02
     d24:	f3 81       	ldd	r31, Z+3	; 0x03
     d26:	e0 2d       	mov	r30, r0
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	fc 93       	st	X, r31
     d2c:	ee 93       	st	-X, r30
     d2e:	11 97       	sbiw	r26, 0x01	; 1
     d30:	44 5b       	subi	r20, 0xB4	; 180
     d32:	5e 4f       	sbci	r21, 0xFE	; 254
     d34:	e4 17       	cp	r30, r20
     d36:	f5 07       	cpc	r31, r21
     d38:	29 f4       	brne	.+10     	; 0xd44 <vTaskSwitchContext+0xcc>
     d3a:	42 81       	ldd	r20, Z+2	; 0x02
     d3c:	53 81       	ldd	r21, Z+3	; 0x03
     d3e:	fd 01       	movw	r30, r26
     d40:	52 83       	std	Z+2, r21	; 0x02
     d42:	41 83       	std	Z+1, r20	; 0x01
     d44:	fc 01       	movw	r30, r24
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	8e 0f       	add	r24, r30
     d54:	9f 1f       	adc	r25, r31
     d56:	fc 01       	movw	r30, r24
     d58:	e7 5b       	subi	r30, 0xB7	; 183
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	01 80       	ldd	r0, Z+1	; 0x01
     d5e:	f2 81       	ldd	r31, Z+2	; 0x02
     d60:	e0 2d       	mov	r30, r0
     d62:	86 81       	ldd	r24, Z+6	; 0x06
     d64:	97 81       	ldd	r25, Z+7	; 0x07
     d66:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <pxCurrentTCB+0x1>
     d6a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <pxCurrentTCB>
     d6e:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
     d72:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     d76:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     d7a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     d7e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     d82:	93 96       	adiw	r26, 0x23	; 35
     d84:	6d 91       	ld	r22, X+
     d86:	7c 91       	ld	r23, X
     d88:	94 97       	sbiw	r26, 0x24	; 36
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     d92:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     d96:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     d9a:	21 a1       	ldd	r18, Z+33	; 0x21
     d9c:	32 a1       	ldd	r19, Z+34	; 0x22
     d9e:	82 27       	eor	r24, r18
     da0:	93 27       	eor	r25, r19
     da2:	92 a3       	std	Z+34, r25	; 0x22
     da4:	81 a3       	std	Z+33, r24	; 0x21
     da6:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     daa:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dae:	81 a1       	ldd	r24, Z+33	; 0x21
     db0:	92 a1       	ldd	r25, Z+34	; 0x22
     db2:	89 2b       	or	r24, r25
     db4:	19 f4       	brne	.+6      	; 0xdbc <vTaskSwitchContext+0x144>
     db6:	0e 94 43 07 	call	0xe86	; 0xe86 <vApplicationTaskChecksumHook>
     dba:	29 c0       	rjmp	.+82     	; 0xe0e <vTaskSwitchContext+0x196>
     dbc:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     dc0:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dc4:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
     dc8:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dcc:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     dd0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dd4:	01 a0       	ldd	r0, Z+33	; 0x21
     dd6:	f2 a1       	ldd	r31, Z+34	; 0x22
     dd8:	e0 2d       	mov	r30, r0
     dda:	f6 95       	lsr	r31
     ddc:	e7 95       	ror	r30
     dde:	f6 95       	lsr	r31
     de0:	e7 95       	ror	r30
     de2:	f6 95       	lsr	r31
     de4:	e7 95       	ror	r30
     de6:	88 81       	ld	r24, Y
     de8:	99 81       	ldd	r25, Y+1	; 0x01
     dea:	e8 0f       	add	r30, r24
     dec:	f9 1f       	adc	r31, r25
     dee:	40 81       	ld	r20, Z
     df0:	91 96       	adiw	r26, 0x21	; 33
     df2:	2d 91       	ld	r18, X+
     df4:	3c 91       	ld	r19, X
     df6:	92 97       	sbiw	r26, 0x22	; 34
     df8:	27 70       	andi	r18, 0x07	; 7
     dfa:	33 27       	eor	r19, r19
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <vTaskSwitchContext+0x18e>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	2a 95       	dec	r18
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <vTaskSwitchContext+0x18a>
     e0a:	84 27       	eor	r24, r20
     e0c:	80 83       	st	Z, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <_Z7task_txPv+0x6>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
     e1e:	8d e2       	ldi	r24, 0x2D	; 45
     e20:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
     e22:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
     e24:	82 e3       	ldi	r24, 0x32	; 50
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	fe cf       	rjmp	.-4      	; 0xe26 <_Z7task_txPv+0x12>

00000e2a <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <_Z7task_rxPv+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
     e34:	85 e5       	ldi	r24, 0x55	; 85
     e36:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
     e38:	8d e2       	ldi	r24, 0x2D	; 45
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	ff cf       	rjmp	.-2      	; 0xe3c <_Z7task_rxPv+0x12>

00000e3e <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
     e48:	e1 2c       	mov	r14, r1
     e4a:	f1 2c       	mov	r15, r1
     e4c:	01 e0       	ldi	r16, 0x01	; 1
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	44 e6       	ldi	r20, 0x64	; 100
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	6b e0       	ldi	r22, 0x0B	; 11
     e58:	71 e0       	ldi	r23, 0x01	; 1
     e5a:	8a e0       	ldi	r24, 0x0A	; 10
     e5c:	97 e0       	ldi	r25, 0x07	; 7
     e5e:	0e 94 af 03 	call	0x75e	; 0x75e <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	44 e6       	ldi	r20, 0x64	; 100
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	6e e0       	ldi	r22, 0x0E	; 14
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	85 e1       	ldi	r24, 0x15	; 21
     e70:	97 e0       	ldi	r25, 0x07	; 7
     e72:	0e 94 af 03 	call	0x75e	; 0x75e <xTaskCreate>
	vTaskStartScheduler();
     e76:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <vTaskStartScheduler>
	
	return 0;
}
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	08 95       	ret

00000e86 <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <globa+0x1>
     e8e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <globa>
     e92:	08 95       	ret

00000e94 <malloc>:
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	91 05       	cpc	r25, r1
     ea0:	10 f4       	brcc	.+4      	; 0xea6 <malloc+0x12>
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <__flp>
     eaa:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <__flp+0x1>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	30 97       	sbiw	r30, 0x00	; 0
     eb8:	19 f1       	breq	.+70     	; 0xf00 <malloc+0x6c>
     eba:	40 81       	ld	r20, Z
     ebc:	51 81       	ldd	r21, Z+1	; 0x01
     ebe:	02 81       	ldd	r16, Z+2	; 0x02
     ec0:	13 81       	ldd	r17, Z+3	; 0x03
     ec2:	48 17       	cp	r20, r24
     ec4:	59 07       	cpc	r21, r25
     ec6:	c8 f0       	brcs	.+50     	; 0xefa <malloc+0x66>
     ec8:	84 17       	cp	r24, r20
     eca:	95 07       	cpc	r25, r21
     ecc:	69 f4       	brne	.+26     	; 0xee8 <malloc+0x54>
     ece:	10 97       	sbiw	r26, 0x00	; 0
     ed0:	31 f0       	breq	.+12     	; 0xede <malloc+0x4a>
     ed2:	12 96       	adiw	r26, 0x02	; 2
     ed4:	0c 93       	st	X, r16
     ed6:	12 97       	sbiw	r26, 0x02	; 2
     ed8:	13 96       	adiw	r26, 0x03	; 3
     eda:	1c 93       	st	X, r17
     edc:	27 c0       	rjmp	.+78     	; 0xf2c <malloc+0x98>
     ede:	00 93 73 01 	sts	0x0173, r16	; 0x800173 <__flp>
     ee2:	10 93 74 01 	sts	0x0174, r17	; 0x800174 <__flp+0x1>
     ee6:	22 c0       	rjmp	.+68     	; 0xf2c <malloc+0x98>
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	19 f0       	breq	.+6      	; 0xef4 <malloc+0x60>
     eee:	42 17       	cp	r20, r18
     ef0:	53 07       	cpc	r21, r19
     ef2:	18 f4       	brcc	.+6      	; 0xefa <malloc+0x66>
     ef4:	9a 01       	movw	r18, r20
     ef6:	bd 01       	movw	r22, r26
     ef8:	ef 01       	movw	r28, r30
     efa:	df 01       	movw	r26, r30
     efc:	f8 01       	movw	r30, r16
     efe:	db cf       	rjmp	.-74     	; 0xeb6 <malloc+0x22>
     f00:	21 15       	cp	r18, r1
     f02:	31 05       	cpc	r19, r1
     f04:	f9 f0       	breq	.+62     	; 0xf44 <malloc+0xb0>
     f06:	28 1b       	sub	r18, r24
     f08:	39 0b       	sbc	r19, r25
     f0a:	24 30       	cpi	r18, 0x04	; 4
     f0c:	31 05       	cpc	r19, r1
     f0e:	80 f4       	brcc	.+32     	; 0xf30 <malloc+0x9c>
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	61 15       	cp	r22, r1
     f16:	71 05       	cpc	r23, r1
     f18:	21 f0       	breq	.+8      	; 0xf22 <malloc+0x8e>
     f1a:	fb 01       	movw	r30, r22
     f1c:	93 83       	std	Z+3, r25	; 0x03
     f1e:	82 83       	std	Z+2, r24	; 0x02
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <malloc+0x96>
     f22:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <__flp+0x1>
     f26:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <__flp>
     f2a:	fe 01       	movw	r30, r28
     f2c:	32 96       	adiw	r30, 0x02	; 2
     f2e:	44 c0       	rjmp	.+136    	; 0xfb8 <malloc+0x124>
     f30:	fe 01       	movw	r30, r28
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	81 93       	st	Z+, r24
     f38:	91 93       	st	Z+, r25
     f3a:	22 50       	subi	r18, 0x02	; 2
     f3c:	31 09       	sbc	r19, r1
     f3e:	39 83       	std	Y+1, r19	; 0x01
     f40:	28 83       	st	Y, r18
     f42:	3a c0       	rjmp	.+116    	; 0xfb8 <malloc+0x124>
     f44:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
     f48:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
     f4c:	23 2b       	or	r18, r19
     f4e:	41 f4       	brne	.+16     	; 0xf60 <malloc+0xcc>
     f50:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f54:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f58:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <__brkval+0x1>
     f5c:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <__brkval>
     f60:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f64:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f68:	21 15       	cp	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	41 f4       	brne	.+16     	; 0xf7e <malloc+0xea>
     f6e:	2d b7       	in	r18, 0x3d	; 61
     f70:	3e b7       	in	r19, 0x3e	; 62
     f72:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f76:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f7a:	24 1b       	sub	r18, r20
     f7c:	35 0b       	sbc	r19, r21
     f7e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__brkval>
     f82:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__brkval+0x1>
     f86:	e2 17       	cp	r30, r18
     f88:	f3 07       	cpc	r31, r19
     f8a:	a0 f4       	brcc	.+40     	; 0xfb4 <malloc+0x120>
     f8c:	2e 1b       	sub	r18, r30
     f8e:	3f 0b       	sbc	r19, r31
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	78 f0       	brcs	.+30     	; 0xfb4 <malloc+0x120>
     f96:	ac 01       	movw	r20, r24
     f98:	4e 5f       	subi	r20, 0xFE	; 254
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	24 17       	cp	r18, r20
     f9e:	35 07       	cpc	r19, r21
     fa0:	48 f0       	brcs	.+18     	; 0xfb4 <malloc+0x120>
     fa2:	4e 0f       	add	r20, r30
     fa4:	5f 1f       	adc	r21, r31
     fa6:	50 93 72 01 	sts	0x0172, r21	; 0x800172 <__brkval+0x1>
     faa:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <__brkval>
     fae:	81 93       	st	Z+, r24
     fb0:	91 93       	st	Z+, r25
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <malloc+0x124>
     fb4:	e0 e0       	ldi	r30, 0x00	; 0
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	cf 01       	movw	r24, r30
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <free>:
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	09 f4       	brne	.+2      	; 0xfce <free+0xa>
     fcc:	81 c0       	rjmp	.+258    	; 0x10d0 <free+0x10c>
     fce:	fc 01       	movw	r30, r24
     fd0:	32 97       	sbiw	r30, 0x02	; 2
     fd2:	13 82       	std	Z+3, r1	; 0x03
     fd4:	12 82       	std	Z+2, r1	; 0x02
     fd6:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <__flp>
     fda:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <__flp+0x1>
     fde:	10 97       	sbiw	r26, 0x00	; 0
     fe0:	81 f4       	brne	.+32     	; 0x1002 <free+0x3e>
     fe2:	20 81       	ld	r18, Z
     fe4:	31 81       	ldd	r19, Z+1	; 0x01
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
     fee:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	51 f5       	brne	.+84     	; 0x104c <free+0x88>
     ff8:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__brkval+0x1>
     ffc:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__brkval>
    1000:	67 c0       	rjmp	.+206    	; 0x10d0 <free+0x10c>
    1002:	ed 01       	movw	r28, r26
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	ce 17       	cp	r28, r30
    100a:	df 07       	cpc	r29, r31
    100c:	40 f4       	brcc	.+16     	; 0x101e <free+0x5a>
    100e:	4a 81       	ldd	r20, Y+2	; 0x02
    1010:	5b 81       	ldd	r21, Y+3	; 0x03
    1012:	9e 01       	movw	r18, r28
    1014:	41 15       	cp	r20, r1
    1016:	51 05       	cpc	r21, r1
    1018:	f1 f0       	breq	.+60     	; 0x1056 <free+0x92>
    101a:	ea 01       	movw	r28, r20
    101c:	f5 cf       	rjmp	.-22     	; 0x1008 <free+0x44>
    101e:	d3 83       	std	Z+3, r29	; 0x03
    1020:	c2 83       	std	Z+2, r28	; 0x02
    1022:	40 81       	ld	r20, Z
    1024:	51 81       	ldd	r21, Z+1	; 0x01
    1026:	84 0f       	add	r24, r20
    1028:	95 1f       	adc	r25, r21
    102a:	c8 17       	cp	r28, r24
    102c:	d9 07       	cpc	r29, r25
    102e:	59 f4       	brne	.+22     	; 0x1046 <free+0x82>
    1030:	88 81       	ld	r24, Y
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	84 0f       	add	r24, r20
    1036:	95 1f       	adc	r25, r21
    1038:	02 96       	adiw	r24, 0x02	; 2
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	93 83       	std	Z+3, r25	; 0x03
    1044:	82 83       	std	Z+2, r24	; 0x02
    1046:	21 15       	cp	r18, r1
    1048:	31 05       	cpc	r19, r1
    104a:	29 f4       	brne	.+10     	; 0x1056 <free+0x92>
    104c:	f0 93 74 01 	sts	0x0174, r31	; 0x800174 <__flp+0x1>
    1050:	e0 93 73 01 	sts	0x0173, r30	; 0x800173 <__flp>
    1054:	3d c0       	rjmp	.+122    	; 0x10d0 <free+0x10c>
    1056:	e9 01       	movw	r28, r18
    1058:	fb 83       	std	Y+3, r31	; 0x03
    105a:	ea 83       	std	Y+2, r30	; 0x02
    105c:	49 91       	ld	r20, Y+
    105e:	59 91       	ld	r21, Y+
    1060:	c4 0f       	add	r28, r20
    1062:	d5 1f       	adc	r29, r21
    1064:	ec 17       	cp	r30, r28
    1066:	fd 07       	cpc	r31, r29
    1068:	61 f4       	brne	.+24     	; 0x1082 <free+0xbe>
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	84 0f       	add	r24, r20
    1070:	95 1f       	adc	r25, r21
    1072:	02 96       	adiw	r24, 0x02	; 2
    1074:	e9 01       	movw	r28, r18
    1076:	99 83       	std	Y+1, r25	; 0x01
    1078:	88 83       	st	Y, r24
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	9b 83       	std	Y+3, r25	; 0x03
    1080:	8a 83       	std	Y+2, r24	; 0x02
    1082:	e0 e0       	ldi	r30, 0x00	; 0
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	8d 91       	ld	r24, X+
    108a:	9c 91       	ld	r25, X
    108c:	13 97       	sbiw	r26, 0x03	; 3
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	19 f0       	breq	.+6      	; 0x1098 <free+0xd4>
    1092:	fd 01       	movw	r30, r26
    1094:	dc 01       	movw	r26, r24
    1096:	f7 cf       	rjmp	.-18     	; 0x1086 <free+0xc2>
    1098:	8d 91       	ld	r24, X+
    109a:	9c 91       	ld	r25, X
    109c:	11 97       	sbiw	r26, 0x01	; 1
    109e:	9d 01       	movw	r18, r26
    10a0:	2e 5f       	subi	r18, 0xFE	; 254
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	82 0f       	add	r24, r18
    10a6:	93 1f       	adc	r25, r19
    10a8:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
    10ac:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	69 f4       	brne	.+26     	; 0x10d0 <free+0x10c>
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	29 f4       	brne	.+10     	; 0x10c4 <free+0x100>
    10ba:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__flp+0x1>
    10be:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__flp>
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <free+0x104>
    10c4:	13 82       	std	Z+3, r1	; 0x03
    10c6:	12 82       	std	Z+2, r1	; 0x02
    10c8:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <__brkval+0x1>
    10cc:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <__brkval>
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <memset>:
    10d6:	dc 01       	movw	r26, r24
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <memset+0x6>
    10da:	6d 93       	st	X+, r22
    10dc:	41 50       	subi	r20, 0x01	; 1
    10de:	50 40       	sbci	r21, 0x00	; 0
    10e0:	e0 f7       	brcc	.-8      	; 0x10da <memset+0x4>
    10e2:	08 95       	ret

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>
