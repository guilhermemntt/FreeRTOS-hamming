
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ff4  00001088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800112  00800112  0000109a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bfb  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0a  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bc  00000000  00000000  00004d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  00006740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011a7  00000000  00000000  00006e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ac6  00000000  00000000  00007fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000aaa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 42 03 	jmp	0x684	; 0x684 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <main>
  9e:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
         return r;
  }


ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	9f 92       	push	r9
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	5c 01       	movw	r10, r24
	uint8_t * data_p=pxStartOfStack+1;
  be:	ac 01       	movw	r20, r24
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t length = pxEndOfStack-pxStartOfStack;
  c4:	68 1b       	sub	r22, r24
  c6:	79 0b       	sbc	r23, r25
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
  c8:	09 f4       	brne	.+2      	; 0xcc <uxChecksumGetTaskChecksum+0x26>
  ca:	b7 c0       	rjmp	.+366    	; 0x23a <uxChecksumGetTaskChecksum+0x194>
  cc:	fa 01       	movw	r30, r20
  ce:	eb 01       	movw	r28, r22
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	c8 0f       	add	r28, r24
  d4:	d9 1f       	adc	r29, r25
  d6:	da 01       	movw	r26, r20
  d8:	90 e0       	ldi	r25, 0x00	; 0
		poolH ^= (*(data_p+i) & 0xAA);
  da:	8d 91       	ld	r24, X+
  dc:	8a 7a       	andi	r24, 0xAA	; 170
  de:	98 27       	eor	r25, r24
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
  e0:	ac 17       	cp	r26, r28
  e2:	bd 07       	cpc	r27, r29
  e4:	d1 f7       	brne	.-12     	; 0xda <uxChecksumGetTaskChecksum+0x34>
  e6:	ac c0       	rjmp	.+344    	; 0x240 <uxChecksumGetTaskChecksum+0x19a>
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
  e8:	91 91       	ld	r25, Z+
  ea:	9c 7c       	andi	r25, 0xCC	; 204
  ec:	29 27       	eor	r18, r25
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
  ee:	ce 17       	cp	r28, r30
  f0:	df 07       	cpc	r29, r31
  f2:	d1 f7       	brne	.-12     	; 0xe8 <uxChecksumGetTaskChecksum+0x42>
  f4:	b5 c0       	rjmp	.+362    	; 0x260 <uxChecksumGetTaskChecksum+0x1ba>
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
  f6:	91 91       	ld	r25, Z+
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	49 27       	eor	r20, r25
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	26 17       	cp	r18, r22
 102:	37 07       	cpc	r19, r23
 104:	c0 f3       	brcs	.-16     	; 0xf6 <uxChecksumGetTaskChecksum+0x50>
 106:	c5 c0       	rjmp	.+394    	; 0x292 <uxChecksumGetTaskChecksum+0x1ec>
	
	pBit=3;
	poolH = 0;
	posbit = (1<<(pBit-3));
	for(i=0;i<length;i++){
		if((i+1) & (posbit)){
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	20 ff       	sbrs	r18, 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <uxChecksumGetTaskChecksum+0x6e>
			poolH ^= (*(data_p+i));
 110:	41 81       	ldd	r20, Z+1	; 0x01
 112:	94 27       	eor	r25, r20
 114:	31 96       	adiw	r30, 0x01	; 1
	hammingBits += (paridade(poolH))<<pBit;
	
	pBit=3;
	poolH = 0;
	posbit = (1<<(pBit-3));
	for(i=0;i<length;i++){
 116:	26 17       	cp	r18, r22
 118:	37 07       	cpc	r19, r23
 11a:	b0 f3       	brcs	.-20     	; 0x108 <uxChecksumGetTaskChecksum+0x62>
		if((i+1) & (posbit)){
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
 11c:	89 2f       	mov	r24, r25
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	98 27       	eor	r25, r24
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	26 e9       	ldi	r18, 0x96	; 150
 128:	39 e6       	ldi	r19, 0x69	; 105
 12a:	a9 01       	movw	r20, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <uxChecksumGetTaskChecksum+0x8c>
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <uxChecksumGetTaskChecksum+0x88>
 136:	ca 01       	movw	r24, r20
 138:	81 70       	andi	r24, 0x01	; 1
 13a:	99 27       	eor	r25, r25
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	8a 0f       	add	r24, r26
 14a:	9b 1f       	adc	r25, r27
	
	uint8_t pBitmax = fls(length*8);
 14c:	9b 01       	movw	r18, r22
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19

static inline uint8_t fls(uint16_t x)
{
          uint8_t r = 16;
  
          if (!x){
 15a:	21 15       	cp	r18, r1
 15c:	31 05       	cpc	r19, r1
 15e:	09 f4       	brne	.+2      	; 0x162 <uxChecksumGetTaskChecksum+0xbc>
 160:	b2 c0       	rjmp	.+356    	; 0x2c6 <uxChecksumGetTaskChecksum+0x220>
                  return 0;
		  }
          if (!(x & 0xff00u)) {
 162:	a9 01       	movw	r20, r18
 164:	44 27       	eor	r20, r20
 166:	45 2b       	or	r20, r21
 168:	21 f4       	brne	.+8      	; 0x172 <uxChecksumGetTaskChecksum+0xcc>
                  x <<= 8;
 16a:	32 2f       	mov	r19, r18
 16c:	22 27       	eor	r18, r18
                  r -= 8;
 16e:	08 e0       	ldi	r16, 0x08	; 8
 170:	01 c0       	rjmp	.+2      	; 0x174 <uxChecksumGetTaskChecksum+0xce>

#define paridade(n) ((0x6996 >> ((n^(n>>4))&0x0f))&0x01)

static inline uint8_t fls(uint16_t x)
{
          uint8_t r = 16;
 172:	00 e1       	ldi	r16, 0x10	; 16
		  }
          if (!(x & 0xff00u)) {
                  x <<= 8;
                  r -= 8;
          }
          if (!(x & 0xf000u)) {
 174:	a9 01       	movw	r20, r18
 176:	44 27       	eor	r20, r20
 178:	50 7f       	andi	r21, 0xF0	; 240
 17a:	45 2b       	or	r20, r21
 17c:	39 f4       	brne	.+14     	; 0x18c <uxChecksumGetTaskChecksum+0xe6>
                  x <<= 4;
 17e:	22 95       	swap	r18
 180:	32 95       	swap	r19
 182:	30 7f       	andi	r19, 0xF0	; 240
 184:	32 27       	eor	r19, r18
 186:	20 7f       	andi	r18, 0xF0	; 240
 188:	32 27       	eor	r19, r18
                  r -= 4;
 18a:	04 50       	subi	r16, 0x04	; 4
          }
          if (!(x & 0xc000u)) {
 18c:	a9 01       	movw	r20, r18
 18e:	44 27       	eor	r20, r20
 190:	50 7c       	andi	r21, 0xC0	; 192
 192:	45 2b       	or	r20, r21
 194:	29 f4       	brne	.+10     	; 0x1a0 <uxChecksumGetTaskChecksum+0xfa>
                  x <<= 2;
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
                  r -= 2;
 19e:	02 50       	subi	r16, 0x02	; 2
          }
          if (!(x & 0x8000u)) {
 1a0:	33 23       	and	r19, r19
 1a2:	0c f0       	brlt	.+2      	; 0x1a6 <uxChecksumGetTaskChecksum+0x100>
                  x <<= 1;
                  r -= 1;
 1a4:	01 50       	subi	r16, 0x01	; 1
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = fls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	05 30       	cpi	r16, 0x05	; 5
 1aa:	11 05       	cpc	r17, r1
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <uxChecksumGetTaskChecksum+0x10a>
 1ae:	8b c0       	rjmp	.+278    	; 0x2c6 <uxChecksumGetTaskChecksum+0x220>
 1b0:	c4 e0       	ldi	r28, 0x04	; 4
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
		poolH = 0;
		posbit = (1<<(pBit-3));
 1b4:	cc 24       	eor	r12, r12
 1b6:	c3 94       	inc	r12
 1b8:	d1 2c       	mov	r13, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f6 e9       	ldi	r31, 0x96	; 150
 1be:	ef 2e       	mov	r14, r31
 1c0:	f9 e6       	ldi	r31, 0x69	; 105
 1c2:	ff 2e       	mov	r15, r31
 1c4:	f0 2d       	mov	r31, r0
	uint8_t pBitmax = fls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
 1c6:	9e 01       	movw	r18, r28
 1c8:	23 50       	subi	r18, 0x03	; 3
 1ca:	31 09       	sbc	r19, r1
 1cc:	d6 01       	movw	r26, r12
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <uxChecksumGetTaskChecksum+0x12e>
 1d0:	aa 0f       	add	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <uxChecksumGetTaskChecksum+0x12a>
		for(i=0;i<length;i++){
 1d8:	61 15       	cp	r22, r1
 1da:	71 05       	cpc	r23, r1
 1dc:	91 f0       	breq	.+36     	; 0x202 <uxChecksumGetTaskChecksum+0x15c>
 1de:	f5 01       	movw	r30, r10
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	91 2c       	mov	r9, r1
			if((i+1) & (posbit)){
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	ad 01       	movw	r20, r26
 1ec:	42 23       	and	r20, r18
 1ee:	53 23       	and	r21, r19
 1f0:	45 2b       	or	r20, r21
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <uxChecksumGetTaskChecksum+0x152>
				poolH ^= (*(data_p+i));
 1f4:	41 81       	ldd	r20, Z+1	; 0x01
 1f6:	94 26       	eor	r9, r20
 1f8:	31 96       	adiw	r30, 0x01	; 1
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
		for(i=0;i<length;i++){
 1fa:	62 17       	cp	r22, r18
 1fc:	73 07       	cpc	r23, r19
 1fe:	99 f7       	brne	.-26     	; 0x1e6 <uxChecksumGetTaskChecksum+0x140>
 200:	01 c0       	rjmp	.+2      	; 0x204 <uxChecksumGetTaskChecksum+0x15e>
	
	uint8_t pBitmax = fls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
		poolH = 0;
 202:	91 2c       	mov	r9, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
 204:	29 2d       	mov	r18, r9
 206:	22 95       	swap	r18
 208:	2f 70       	andi	r18, 0x0F	; 15
 20a:	29 25       	eor	r18, r9
 20c:	2f 70       	andi	r18, 0x0F	; 15
 20e:	a7 01       	movw	r20, r14
 210:	02 c0       	rjmp	.+4      	; 0x216 <uxChecksumGetTaskChecksum+0x170>
 212:	55 95       	asr	r21
 214:	47 95       	ror	r20
 216:	2a 95       	dec	r18
 218:	e2 f7       	brpl	.-8      	; 0x212 <uxChecksumGetTaskChecksum+0x16c>
 21a:	9a 01       	movw	r18, r20
 21c:	21 70       	andi	r18, 0x01	; 1
 21e:	33 27       	eor	r19, r19
 220:	0c 2e       	mov	r0, r28
 222:	02 c0       	rjmp	.+4      	; 0x228 <uxChecksumGetTaskChecksum+0x182>
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <uxChecksumGetTaskChecksum+0x17e>
 22c:	82 0f       	add	r24, r18
 22e:	93 1f       	adc	r25, r19
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = fls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	c0 17       	cp	r28, r16
 234:	d1 07       	cpc	r29, r17
 236:	39 f6       	brne	.-114    	; 0x1c6 <uxChecksumGetTaskChecksum+0x120>
 238:	46 c0       	rjmp	.+140    	; 0x2c6 <uxChecksumGetTaskChecksum+0x220>
	for(i=0;i<length;i++){
		if((i+1) & (posbit)){
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
 23e:	43 c0       	rjmp	.+134    	; 0x2c6 <uxChecksumGetTaskChecksum+0x220>
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xAA);
	}
	hammingBits += (paridade(poolH))<<pBit;
 240:	89 2f       	mov	r24, r25
 242:	82 95       	swap	r24
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	98 27       	eor	r25, r24
 248:	9f 70       	andi	r25, 0x0F	; 15
 24a:	a6 e9       	ldi	r26, 0x96	; 150
 24c:	b9 e6       	ldi	r27, 0x69	; 105
 24e:	02 c0       	rjmp	.+4      	; 0x254 <uxChecksumGetTaskChecksum+0x1ae>
 250:	b5 95       	asr	r27
 252:	a7 95       	ror	r26
 254:	9a 95       	dec	r25
 256:	e2 f7       	brpl	.-8      	; 0x250 <uxChecksumGetTaskChecksum+0x1aa>
 258:	a1 70       	andi	r26, 0x01	; 1
 25a:	bb 27       	eor	r27, r27
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	44 cf       	rjmp	.-376    	; 0xe8 <uxChecksumGetTaskChecksum+0x42>
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
	}
	hammingBits += (paridade(poolH))<<pBit;
 260:	82 2f       	mov	r24, r18
 262:	82 95       	swap	r24
 264:	8f 70       	andi	r24, 0x0F	; 15
 266:	28 27       	eor	r18, r24
 268:	2f 70       	andi	r18, 0x0F	; 15
 26a:	c6 e9       	ldi	r28, 0x96	; 150
 26c:	d9 e6       	ldi	r29, 0x69	; 105
 26e:	02 c0       	rjmp	.+4      	; 0x274 <uxChecksumGetTaskChecksum+0x1ce>
 270:	d5 95       	asr	r29
 272:	c7 95       	ror	r28
 274:	2a 95       	dec	r18
 276:	e2 f7       	brpl	.-8      	; 0x270 <uxChecksumGetTaskChecksum+0x1ca>
 278:	c1 70       	andi	r28, 0x01	; 1
 27a:	dd 27       	eor	r29, r29
 27c:	ce 01       	movw	r24, r28
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	ec 01       	movw	r28, r24
 284:	ca 0f       	add	r28, r26
 286:	db 1f       	adc	r29, r27
 288:	fa 01       	movw	r30, r20
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	32 cf       	rjmp	.-412    	; 0xf6 <uxChecksumGetTaskChecksum+0x50>
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
 292:	84 2f       	mov	r24, r20
 294:	82 95       	swap	r24
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	48 27       	eor	r20, r24
 29a:	4f 70       	andi	r20, 0x0F	; 15
 29c:	86 e9       	ldi	r24, 0x96	; 150
 29e:	99 e6       	ldi	r25, 0x69	; 105
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <uxChecksumGetTaskChecksum+0x200>
 2a2:	95 95       	asr	r25
 2a4:	87 95       	ror	r24
 2a6:	4a 95       	dec	r20
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <uxChecksumGetTaskChecksum+0x1fc>
 2aa:	81 70       	andi	r24, 0x01	; 1
 2ac:	99 27       	eor	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	dc 01       	movw	r26, r24
 2b8:	ac 0f       	add	r26, r28
 2ba:	bd 1f       	adc	r27, r29
 2bc:	f5 01       	movw	r30, r10
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	21 cf       	rjmp	.-446    	; 0x108 <uxChecksumGetTaskChecksum+0x62>
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	08 95       	ret

000002de <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
 2e4:	0e 94 b5 04 	call	0x96a	; 0x96a <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 d0 06 	call	0xda0	; 0xda0 <malloc>
 2ee:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 2f0:	0e 94 76 05 	call	0xaec	; 0xaec <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 2f4:	ce 01       	movw	r24, r28
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	if( pv )
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	41 f0       	breq	.+16     	; 0x314 <vPortFree+0x18>
 304:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
 306:	0e 94 b5 04 	call	0x96a	; 0x96a <vTaskSuspendAll>
		{
			free( pv );
 30a:	ce 01       	movw	r24, r28
 30c:	0e 94 68 07 	call	0xed0	; 0xed0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 310:	0e 94 76 05 	call	0xaec	; 0xaec <xTaskResumeAll>
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 31a:	fc 01       	movw	r30, r24
 31c:	03 96       	adiw	r24, 0x03	; 3
 31e:	92 83       	std	Z+2, r25	; 0x02
 320:	81 83       	std	Z+1, r24	; 0x01
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	3f ef       	ldi	r19, 0xFF	; 255
 326:	34 83       	std	Z+4, r19	; 0x04
 328:	23 83       	std	Z+3, r18	; 0x03
 32a:	96 83       	std	Z+6, r25	; 0x06
 32c:	85 83       	std	Z+5, r24	; 0x05
 32e:	90 87       	std	Z+8, r25	; 0x08
 330:	87 83       	std	Z+7, r24	; 0x07
 332:	10 82       	st	Z, r1
 334:	08 95       	ret

00000336 <vListInitialiseItem>:
 336:	fc 01       	movw	r30, r24
 338:	11 86       	std	Z+9, r1	; 0x09
 33a:	10 86       	std	Z+8, r1	; 0x08
 33c:	08 95       	ret

0000033e <vListInsertEnd>:
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	9c 01       	movw	r18, r24
 344:	fb 01       	movw	r30, r22
 346:	dc 01       	movw	r26, r24
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	cd 91       	ld	r28, X+
 34c:	dc 91       	ld	r29, X
 34e:	12 97       	sbiw	r26, 0x02	; 2
 350:	d3 83       	std	Z+3, r29	; 0x03
 352:	c2 83       	std	Z+2, r28	; 0x02
 354:	8c 81       	ldd	r24, Y+4	; 0x04
 356:	9d 81       	ldd	r25, Y+5	; 0x05
 358:	95 83       	std	Z+5, r25	; 0x05
 35a:	84 83       	std	Z+4, r24	; 0x04
 35c:	8c 81       	ldd	r24, Y+4	; 0x04
 35e:	9d 81       	ldd	r25, Y+5	; 0x05
 360:	dc 01       	movw	r26, r24
 362:	13 96       	adiw	r26, 0x03	; 3
 364:	7c 93       	st	X, r23
 366:	6e 93       	st	-X, r22
 368:	12 97       	sbiw	r26, 0x02	; 2
 36a:	7d 83       	std	Y+5, r23	; 0x05
 36c:	6c 83       	std	Y+4, r22	; 0x04
 36e:	31 87       	std	Z+9, r19	; 0x09
 370:	20 87       	std	Z+8, r18	; 0x08
 372:	f9 01       	movw	r30, r18
 374:	80 81       	ld	r24, Z
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 83       	st	Z, r24
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 386:	a0 85       	ldd	r26, Z+8	; 0x08
 388:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 38a:	c2 81       	ldd	r28, Z+2	; 0x02
 38c:	d3 81       	ldd	r29, Z+3	; 0x03
 38e:	84 81       	ldd	r24, Z+4	; 0x04
 390:	95 81       	ldd	r25, Z+5	; 0x05
 392:	9d 83       	std	Y+5, r25	; 0x05
 394:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 396:	c4 81       	ldd	r28, Z+4	; 0x04
 398:	d5 81       	ldd	r29, Z+5	; 0x05
 39a:	82 81       	ldd	r24, Z+2	; 0x02
 39c:	93 81       	ldd	r25, Z+3	; 0x03
 39e:	9b 83       	std	Y+3, r25	; 0x03
 3a0:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 3a2:	11 96       	adiw	r26, 0x01	; 1
 3a4:	8d 91       	ld	r24, X+
 3a6:	9c 91       	ld	r25, X
 3a8:	12 97       	sbiw	r26, 0x02	; 2
 3aa:	e8 17       	cp	r30, r24
 3ac:	f9 07       	cpc	r31, r25
 3ae:	31 f4       	brne	.+12     	; 0x3bc <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 3b0:	84 81       	ldd	r24, Z+4	; 0x04
 3b2:	95 81       	ldd	r25, Z+5	; 0x05
 3b4:	12 96       	adiw	r26, 0x02	; 2
 3b6:	9c 93       	st	X, r25
 3b8:	8e 93       	st	-X, r24
 3ba:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 3bc:	11 86       	std	Z+9, r1	; 0x09
 3be:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 3c0:	8c 91       	ld	r24, X
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 3c6:	8c 91       	ld	r24, X
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 3ce:	31 e1       	ldi	r19, 0x11	; 17
 3d0:	fc 01       	movw	r30, r24
 3d2:	30 83       	st	Z, r19
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	22 e2       	ldi	r18, 0x22	; 34
 3d8:	20 83       	st	Z, r18
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	a3 e3       	ldi	r26, 0x33	; 51
 3de:	a0 83       	st	Z, r26
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	60 83       	st	Z, r22
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	70 83       	st	Z, r23
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	10 82       	st	Z, r1
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	60 e8       	ldi	r22, 0x80	; 128
 3f0:	60 83       	st	Z, r22
 3f2:	31 97       	sbiw	r30, 0x01	; 1
 3f4:	10 82       	st	Z, r1
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	60 83       	st	Z, r22
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	60 83       	st	Z, r22
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	60 83       	st	Z, r22
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	65 e0       	ldi	r22, 0x05	; 5
 40c:	60 83       	st	Z, r22
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	66 e0       	ldi	r22, 0x06	; 6
 412:	60 83       	st	Z, r22
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	67 e0       	ldi	r22, 0x07	; 7
 418:	60 83       	st	Z, r22
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	68 e0       	ldi	r22, 0x08	; 8
 41e:	60 83       	st	Z, r22
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	69 e0       	ldi	r22, 0x09	; 9
 424:	60 83       	st	Z, r22
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	60 e1       	ldi	r22, 0x10	; 16
 42a:	60 83       	st	Z, r22
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	30 83       	st	Z, r19
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	32 e1       	ldi	r19, 0x12	; 18
 434:	30 83       	st	Z, r19
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	33 e1       	ldi	r19, 0x13	; 19
 43a:	30 83       	st	Z, r19
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	34 e1       	ldi	r19, 0x14	; 20
 440:	30 83       	st	Z, r19
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	35 e1       	ldi	r19, 0x15	; 21
 446:	30 83       	st	Z, r19
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	36 e1       	ldi	r19, 0x16	; 22
 44c:	30 83       	st	Z, r19
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	37 e1       	ldi	r19, 0x17	; 23
 452:	30 83       	st	Z, r19
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	38 e1       	ldi	r19, 0x18	; 24
 458:	30 83       	st	Z, r19
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	39 e1       	ldi	r19, 0x19	; 25
 45e:	30 83       	st	Z, r19
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	30 e2       	ldi	r19, 0x20	; 32
 464:	30 83       	st	Z, r19
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	31 e2       	ldi	r19, 0x21	; 33
 46a:	30 83       	st	Z, r19
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	20 83       	st	Z, r18
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	23 e2       	ldi	r18, 0x23	; 35
 474:	20 83       	st	Z, r18
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	40 83       	st	Z, r20
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	50 83       	st	Z, r21
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	26 e2       	ldi	r18, 0x26	; 38
 482:	20 83       	st	Z, r18
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	27 e2       	ldi	r18, 0x27	; 39
 488:	20 83       	st	Z, r18
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	28 e2       	ldi	r18, 0x28	; 40
 48e:	20 83       	st	Z, r18
 490:	31 97       	sbiw	r30, 0x01	; 1
 492:	29 e2       	ldi	r18, 0x29	; 41
 494:	20 83       	st	Z, r18
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	20 e3       	ldi	r18, 0x30	; 48
 49a:	20 83       	st	Z, r18
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	21 e3       	ldi	r18, 0x31	; 49
 4a0:	20 83       	st	Z, r18
 4a2:	86 97       	sbiw	r24, 0x26	; 38
 4a4:	08 95       	ret

000004a6 <xPortStartScheduler>:
 4a6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4aa:	89 ef       	ldi	r24, 0xF9	; 249
 4ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4b0:	8b e0       	ldi	r24, 0x0B	; 11
 4b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4b6:	ef e6       	ldi	r30, 0x6F	; 111
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	82 60       	ori	r24, 0x02	; 2
 4be:	80 83       	st	Z, r24
 4c0:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 4c4:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 4c8:	cd 91       	ld	r28, X+
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	dd 91       	ld	r29, X+
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	bf 91       	pop	r27
 4da:	af 91       	pop	r26
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	7f 91       	pop	r23
 4e2:	6f 91       	pop	r22
 4e4:	5f 91       	pop	r21
 4e6:	4f 91       	pop	r20
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	df 90       	pop	r13
 4f6:	cf 90       	pop	r12
 4f8:	bf 90       	pop	r11
 4fa:	af 90       	pop	r10
 4fc:	9f 90       	pop	r9
 4fe:	8f 90       	pop	r8
 500:	7f 90       	pop	r7
 502:	6f 90       	pop	r6
 504:	5f 90       	pop	r5
 506:	4f 90       	pop	r4
 508:	3f 90       	pop	r3
 50a:	2f 90       	pop	r2
 50c:	1f 90       	pop	r1
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	08 95       	ret
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	08 95       	ret

0000051a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	f8 94       	cli
 520:	0f 92       	push	r0
 522:	1f 92       	push	r1
 524:	11 24       	eor	r1, r1
 526:	2f 92       	push	r2
 528:	3f 92       	push	r3
 52a:	4f 92       	push	r4
 52c:	5f 92       	push	r5
 52e:	6f 92       	push	r6
 530:	7f 92       	push	r7
 532:	8f 92       	push	r8
 534:	9f 92       	push	r9
 536:	af 92       	push	r10
 538:	bf 92       	push	r11
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	6f 93       	push	r22
 550:	7f 93       	push	r23
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	af 93       	push	r26
 558:	bf 93       	push	r27
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
 562:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 566:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 56a:	0d b6       	in	r0, 0x3d	; 61
 56c:	0d 92       	st	X+, r0
 56e:	0e b6       	in	r0, 0x3e	; 62
 570:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 572:	0e 94 f5 05 	call	0xbea	; 0xbea <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 576:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 57a:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 57e:	cd 91       	ld	r28, X+
 580:	cd bf       	out	0x3d, r28	; 61
 582:	dd 91       	ld	r29, X+
 584:	de bf       	out	0x3e, r29	; 62
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	7f 91       	pop	r23
 598:	6f 91       	pop	r22
 59a:	5f 91       	pop	r21
 59c:	4f 91       	pop	r20
 59e:	3f 91       	pop	r19
 5a0:	2f 91       	pop	r18
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	df 90       	pop	r13
 5ac:	cf 90       	pop	r12
 5ae:	bf 90       	pop	r11
 5b0:	af 90       	pop	r10
 5b2:	9f 90       	pop	r9
 5b4:	8f 90       	pop	r8
 5b6:	7f 90       	pop	r7
 5b8:	6f 90       	pop	r6
 5ba:	5f 90       	pop	r5
 5bc:	4f 90       	pop	r4
 5be:	3f 90       	pop	r3
 5c0:	2f 90       	pop	r2
 5c2:	1f 90       	pop	r1
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 5ca:	08 95       	ret

000005cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	0f 92       	push	r0
 5d4:	1f 92       	push	r1
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 92       	push	r2
 5da:	3f 92       	push	r3
 5dc:	4f 92       	push	r4
 5de:	5f 92       	push	r5
 5e0:	6f 92       	push	r6
 5e2:	7f 92       	push	r7
 5e4:	8f 92       	push	r8
 5e6:	9f 92       	push	r9
 5e8:	af 92       	push	r10
 5ea:	bf 92       	push	r11
 5ec:	cf 92       	push	r12
 5ee:	df 92       	push	r13
 5f0:	ef 92       	push	r14
 5f2:	ff 92       	push	r15
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ef 93       	push	r30
 612:	ff 93       	push	r31
 614:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 618:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 61c:	0d b6       	in	r0, 0x3d	; 61
 61e:	0d 92       	st	X+, r0
 620:	0e b6       	in	r0, 0x3e	; 62
 622:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 624:	0e 94 bb 04 	call	0x976	; 0x976 <xTaskIncrementTick>
 628:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 62a:	0e 94 f5 05 	call	0xbea	; 0xbea <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 62e:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 632:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 636:	cd 91       	ld	r28, X+
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	dd 91       	ld	r29, X+
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	ff 90       	pop	r15
 660:	ef 90       	pop	r14
 662:	df 90       	pop	r13
 664:	cf 90       	pop	r12
 666:	bf 90       	pop	r11
 668:	af 90       	pop	r10
 66a:	9f 90       	pop	r9
 66c:	8f 90       	pop	r8
 66e:	7f 90       	pop	r7
 670:	6f 90       	pop	r6
 672:	5f 90       	pop	r5
 674:	4f 90       	pop	r4
 676:	3f 90       	pop	r3
 678:	2f 90       	pop	r2
 67a:	1f 90       	pop	r1
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0

	asm volatile ( "ret" );
 682:	08 95       	ret

00000684 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 684:	0e 94 e6 02 	call	0x5cc	; 0x5cc <vPortYieldFromTick>
		asm volatile ( "reti" );
 688:	18 95       	reti

0000068a <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 68a:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 68e:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 692:	80 81       	ld	r24, Z
 694:	81 11       	cpse	r24, r1
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <prvResetNextTaskUnblockTime+0x1c>
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 6a0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 6a4:	08 95       	ret
 6a6:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 6aa:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 6ae:	05 80       	ldd	r0, Z+5	; 0x05
 6b0:	f6 81       	ldd	r31, Z+6	; 0x06
 6b2:	e0 2d       	mov	r30, r0
 6b4:	06 80       	ldd	r0, Z+6	; 0x06
 6b6:	f7 81       	ldd	r31, Z+7	; 0x07
 6b8:	e0 2d       	mov	r30, r0
 6ba:	82 81       	ldd	r24, Z+2	; 0x02
 6bc:	93 81       	ldd	r25, Z+3	; 0x03
 6be:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 6c2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 6c6:	08 95       	ret

000006c8 <prvIdleTask>:
 6c8:	cf e3       	ldi	r28, 0x3F	; 63
 6ca:	d1 e0       	ldi	r29, 0x01	; 1
 6cc:	88 81       	ld	r24, Y
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	e8 f3       	brcs	.-6      	; 0x6cc <prvIdleTask+0x4>
 6d2:	0e 94 8d 02 	call	0x51a	; 0x51a <vPortYield>
 6d6:	fa cf       	rjmp	.-12     	; 0x6cc <prvIdleTask+0x4>

000006d8 <xTaskCreate>:
 6d8:	4f 92       	push	r4
 6da:	5f 92       	push	r5
 6dc:	6f 92       	push	r6
 6de:	7f 92       	push	r7
 6e0:	8f 92       	push	r8
 6e2:	9f 92       	push	r9
 6e4:	af 92       	push	r10
 6e6:	bf 92       	push	r11
 6e8:	cf 92       	push	r12
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	ff 92       	push	r15
 6f0:	0f 93       	push	r16
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	4c 01       	movw	r8, r24
 6f8:	6b 01       	movw	r12, r22
 6fa:	5a 01       	movw	r10, r20
 6fc:	29 01       	movw	r4, r18
 6fe:	ca 01       	movw	r24, r20
 700:	0e 94 6f 01 	call	0x2de	; 0x2de <pvPortMalloc>
 704:	3c 01       	movw	r6, r24
 706:	89 2b       	or	r24, r25
 708:	09 f4       	brne	.+2      	; 0x70c <xTaskCreate+0x34>
 70a:	f4 c0       	rjmp	.+488    	; 0x8f4 <xTaskCreate+0x21c>
 70c:	8c e2       	ldi	r24, 0x2C	; 44
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 6f 01 	call	0x2de	; 0x2de <pvPortMalloc>
 714:	ec 01       	movw	r28, r24
 716:	89 2b       	or	r24, r25
 718:	c1 f0       	breq	.+48     	; 0x74a <xTaskCreate+0x72>
 71a:	78 8e       	std	Y+24, r7	; 0x18
 71c:	6f 8a       	std	Y+23, r6	; 0x17
 71e:	a5 01       	movw	r20, r10
 720:	65 ea       	ldi	r22, 0xA5	; 165
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	c3 01       	movw	r24, r6
 726:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <memset>
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	a8 1a       	sub	r10, r24
 72e:	b1 08       	sbc	r11, r1
 730:	8f 89       	ldd	r24, Y+23	; 0x17
 732:	98 8d       	ldd	r25, Y+24	; 0x18
 734:	a8 0e       	add	r10, r24
 736:	b9 1e       	adc	r11, r25
 738:	bc a2       	std	Y+36, r11	; 0x24
 73a:	ab a2       	std	Y+35, r10	; 0x23
 73c:	d6 01       	movw	r26, r12
 73e:	8c 91       	ld	r24, X
 740:	89 8f       	std	Y+25, r24	; 0x19
 742:	8c 91       	ld	r24, X
 744:	81 11       	cpse	r24, r1
 746:	05 c0       	rjmp	.+10     	; 0x752 <xTaskCreate+0x7a>
 748:	18 c0       	rjmp	.+48     	; 0x77a <xTaskCreate+0xa2>
 74a:	c3 01       	movw	r24, r6
 74c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <vPortFree>
 750:	d1 c0       	rjmp	.+418    	; 0x8f4 <xTaskCreate+0x21c>
 752:	ae 01       	movw	r20, r28
 754:	46 5e       	subi	r20, 0xE6	; 230
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	f6 01       	movw	r30, r12
 75a:	31 96       	adiw	r30, 0x01	; 1
 75c:	b8 e0       	ldi	r27, 0x08	; 8
 75e:	cb 0e       	add	r12, r27
 760:	d1 1c       	adc	r13, r1
 762:	cf 01       	movw	r24, r30
 764:	21 91       	ld	r18, Z+
 766:	da 01       	movw	r26, r20
 768:	2d 93       	st	X+, r18
 76a:	ad 01       	movw	r20, r26
 76c:	dc 01       	movw	r26, r24
 76e:	8c 91       	ld	r24, X
 770:	88 23       	and	r24, r24
 772:	19 f0       	breq	.+6      	; 0x77a <xTaskCreate+0xa2>
 774:	ec 15       	cp	r30, r12
 776:	fd 05       	cpc	r31, r13
 778:	a1 f7       	brne	.-24     	; 0x762 <xTaskCreate+0x8a>
 77a:	18 a2       	std	Y+32, r1	; 0x20
 77c:	04 30       	cpi	r16, 0x04	; 4
 77e:	08 f0       	brcs	.+2      	; 0x782 <xTaskCreate+0xaa>
 780:	03 e0       	ldi	r16, 0x03	; 3
 782:	0e 8b       	std	Y+22, r16	; 0x16
 784:	0d a3       	std	Y+37, r16	; 0x25
 786:	1e a2       	std	Y+38, r1	; 0x26
 788:	6e 01       	movw	r12, r28
 78a:	b2 e0       	ldi	r27, 0x02	; 2
 78c:	cb 0e       	add	r12, r27
 78e:	d1 1c       	adc	r13, r1
 790:	c6 01       	movw	r24, r12
 792:	0e 94 9b 01 	call	0x336	; 0x336 <vListInitialiseItem>
 796:	ce 01       	movw	r24, r28
 798:	0c 96       	adiw	r24, 0x0c	; 12
 79a:	0e 94 9b 01 	call	0x336	; 0x336 <vListInitialiseItem>
 79e:	d9 87       	std	Y+9, r29	; 0x09
 7a0:	c8 87       	std	Y+8, r28	; 0x08
 7a2:	84 e0       	ldi	r24, 0x04	; 4
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	80 1b       	sub	r24, r16
 7a8:	91 09       	sbc	r25, r1
 7aa:	9d 87       	std	Y+13, r25	; 0x0d
 7ac:	8c 87       	std	Y+12, r24	; 0x0c
 7ae:	db 8b       	std	Y+19, r29	; 0x13
 7b0:	ca 8b       	std	Y+18, r28	; 0x12
 7b2:	1f a2       	std	Y+39, r1	; 0x27
 7b4:	18 a6       	std	Y+40, r1	; 0x28
 7b6:	19 a6       	std	Y+41, r1	; 0x29
 7b8:	1a a6       	std	Y+42, r1	; 0x2a
 7ba:	1b a6       	std	Y+43, r1	; 0x2b
 7bc:	a2 01       	movw	r20, r4
 7be:	b4 01       	movw	r22, r8
 7c0:	c5 01       	movw	r24, r10
 7c2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pxPortInitialiseStack>
 7c6:	99 83       	std	Y+1, r25	; 0x01
 7c8:	88 83       	st	Y, r24
 7ca:	e1 14       	cp	r14, r1
 7cc:	f1 04       	cpc	r15, r1
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <xTaskCreate+0xfe>
 7d0:	f7 01       	movw	r30, r14
 7d2:	d1 83       	std	Z+1, r29	; 0x01
 7d4:	c0 83       	st	Z, r28
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	0f 92       	push	r0
 7dc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 7e0:	8f 5f       	subi	r24, 0xFF	; 255
 7e2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 7e6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
 7ea:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 7ee:	89 2b       	or	r24, r25
 7f0:	89 f5       	brne	.+98     	; 0x854 <xTaskCreate+0x17c>
 7f2:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 7f6:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 7fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 7fe:	81 30       	cpi	r24, 0x01	; 1
 800:	c9 f5       	brne	.+114    	; 0x874 <xTaskCreate+0x19c>
 802:	8f e3       	ldi	r24, 0x3F	; 63
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 80a:	88 e4       	ldi	r24, 0x48	; 72
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 812:	81 e5       	ldi	r24, 0x51	; 81
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 81a:	8a e5       	ldi	r24, 0x5A	; 90
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 822:	86 e3       	ldi	r24, 0x36	; 54
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 82a:	8d e2       	ldi	r24, 0x2D	; 45
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 832:	80 e2       	ldi	r24, 0x20	; 32
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	0e 94 8d 01 	call	0x31a	; 0x31a <vListInitialise>
 83a:	86 e3       	ldi	r24, 0x36	; 54
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
 842:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
 846:	8d e2       	ldi	r24, 0x2D	; 45
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 84e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 852:	10 c0       	rjmp	.+32     	; 0x874 <xTaskCreate+0x19c>
 854:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 858:	81 11       	cpse	r24, r1
 85a:	0c c0       	rjmp	.+24     	; 0x874 <xTaskCreate+0x19c>
 85c:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 860:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 864:	96 89       	ldd	r25, Z+22	; 0x16
 866:	8e 89       	ldd	r24, Y+22	; 0x16
 868:	89 17       	cp	r24, r25
 86a:	20 f0       	brcs	.+8      	; 0x874 <xTaskCreate+0x19c>
 86c:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 870:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 874:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 878:	8f 5f       	subi	r24, 0xFF	; 255
 87a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 87e:	e0 90 63 01 	lds	r14, 0x0163	; 0x800163 <pxCurrentTCB>
 882:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 886:	6b a1       	ldd	r22, Y+35	; 0x23
 888:	7c a1       	ldd	r23, Y+36	; 0x24
 88a:	88 81       	ld	r24, Y
 88c:	99 81       	ldd	r25, Y+1	; 0x01
 88e:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 892:	d7 01       	movw	r26, r14
 894:	92 96       	adiw	r26, 0x22	; 34
 896:	9c 93       	st	X, r25
 898:	8e 93       	st	-X, r24
 89a:	91 97       	sbiw	r26, 0x21	; 33
 89c:	8e 89       	ldd	r24, Y+22	; 0x16
 89e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 8a2:	98 17       	cp	r25, r24
 8a4:	10 f4       	brcc	.+4      	; 0x8aa <xTaskCreate+0x1d2>
 8a6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	9c 01       	movw	r18, r24
 8ae:	22 0f       	add	r18, r18
 8b0:	33 1f       	adc	r19, r19
 8b2:	22 0f       	add	r18, r18
 8b4:	33 1f       	adc	r19, r19
 8b6:	22 0f       	add	r18, r18
 8b8:	33 1f       	adc	r19, r19
 8ba:	82 0f       	add	r24, r18
 8bc:	93 1f       	adc	r25, r19
 8be:	b6 01       	movw	r22, r12
 8c0:	81 5c       	subi	r24, 0xC1	; 193
 8c2:	9e 4f       	sbci	r25, 0xFE	; 254
 8c4:	0e 94 9f 01 	call	0x33e	; 0x33e <vListInsertEnd>
 8c8:	0f 90       	pop	r0
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 8d0:	88 23       	and	r24, r24
 8d2:	61 f0       	breq	.+24     	; 0x8ec <xTaskCreate+0x214>
 8d4:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 8d8:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 8dc:	96 89       	ldd	r25, Z+22	; 0x16
 8de:	8e 89       	ldd	r24, Y+22	; 0x16
 8e0:	98 17       	cp	r25, r24
 8e2:	30 f4       	brcc	.+12     	; 0x8f0 <xTaskCreate+0x218>
 8e4:	0e 94 8d 02 	call	0x51a	; 0x51a <vPortYield>
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	05 c0       	rjmp	.+10     	; 0x8f6 <xTaskCreate+0x21e>
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <xTaskCreate+0x21e>
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <xTaskCreate+0x21e>
 8f4:	8f ef       	ldi	r24, 0xFF	; 255
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	bf 90       	pop	r11
 906:	af 90       	pop	r10
 908:	9f 90       	pop	r9
 90a:	8f 90       	pop	r8
 90c:	7f 90       	pop	r7
 90e:	6f 90       	pop	r6
 910:	5f 90       	pop	r5
 912:	4f 90       	pop	r4
 914:	08 95       	ret

00000916 <vTaskStartScheduler>:
 916:	ef 92       	push	r14
 918:	ff 92       	push	r15
 91a:	0f 93       	push	r16
 91c:	0f 2e       	mov	r0, r31
 91e:	f3 e1       	ldi	r31, 0x13	; 19
 920:	ef 2e       	mov	r14, r31
 922:	f1 e0       	ldi	r31, 0x01	; 1
 924:	ff 2e       	mov	r15, r31
 926:	f0 2d       	mov	r31, r0
 928:	00 e0       	ldi	r16, 0x00	; 0
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	44 e6       	ldi	r20, 0x64	; 100
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	66 e0       	ldi	r22, 0x06	; 6
 934:	71 e0       	ldi	r23, 0x01	; 1
 936:	84 e6       	ldi	r24, 0x64	; 100
 938:	93 e0       	ldi	r25, 0x03	; 3
 93a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <xTaskCreate>
 93e:	81 30       	cpi	r24, 0x01	; 1
 940:	81 f4       	brne	.+32     	; 0x962 <vTaskStartScheduler+0x4c>
 942:	f8 94       	cli
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	9f ef       	ldi	r25, 0xFF	; 255
 948:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 94c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 956:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 95a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 95e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <xPortStartScheduler>
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	ef 90       	pop	r14
 968:	08 95       	ret

0000096a <vTaskSuspendAll>:
 96a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 96e:	8f 5f       	subi	r24, 0xFF	; 255
 970:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 974:	08 95       	ret

00000976 <xTaskIncrementTick>:
 976:	cf 92       	push	r12
 978:	df 92       	push	r13
 97a:	ef 92       	push	r14
 97c:	ff 92       	push	r15
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 98a:	81 11       	cpse	r24, r1
 98c:	99 c0       	rjmp	.+306    	; 0xac0 <xTaskIncrementTick+0x14a>
 98e:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 992:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	e8 1a       	sub	r14, r24
 99a:	f8 0a       	sbc	r15, r24
 99c:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 9a0:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 9a4:	e1 14       	cp	r14, r1
 9a6:	f1 04       	cpc	r15, r1
 9a8:	b9 f4       	brne	.+46     	; 0x9d8 <xTaskIncrementTick+0x62>
 9aa:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
 9ae:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 9b2:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
 9b6:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 9ba:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
 9be:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
 9c2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 9c6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 9ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 9ce:	8f 5f       	subi	r24, 0xFF	; 255
 9d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 9d4:	0e 94 45 03 	call	0x68a	; 0x68a <prvResetNextTaskUnblockTime>
 9d8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 9dc:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 9e0:	e8 16       	cp	r14, r24
 9e2:	f9 06       	cpc	r15, r25
 9e4:	10 f4       	brcc	.+4      	; 0x9ea <xTaskIncrementTick+0x74>
 9e6:	d1 2c       	mov	r13, r1
 9e8:	53 c0       	rjmp	.+166    	; 0xa90 <xTaskIncrementTick+0x11a>
 9ea:	d1 2c       	mov	r13, r1
 9ec:	cc 24       	eor	r12, r12
 9ee:	c3 94       	inc	r12
 9f0:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 9f4:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 9f8:	80 81       	ld	r24, Z
 9fa:	81 11       	cpse	r24, r1
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <xTaskIncrementTick+0x96>
 9fe:	8f ef       	ldi	r24, 0xFF	; 255
 a00:	9f ef       	ldi	r25, 0xFF	; 255
 a02:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 a06:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 a0a:	42 c0       	rjmp	.+132    	; 0xa90 <xTaskIncrementTick+0x11a>
 a0c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 a10:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 a14:	05 80       	ldd	r0, Z+5	; 0x05
 a16:	f6 81       	ldd	r31, Z+6	; 0x06
 a18:	e0 2d       	mov	r30, r0
 a1a:	c6 81       	ldd	r28, Z+6	; 0x06
 a1c:	d7 81       	ldd	r29, Z+7	; 0x07
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	9b 81       	ldd	r25, Y+3	; 0x03
 a22:	e8 16       	cp	r14, r24
 a24:	f9 06       	cpc	r15, r25
 a26:	28 f4       	brcc	.+10     	; 0xa32 <xTaskIncrementTick+0xbc>
 a28:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 a2c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 a30:	2f c0       	rjmp	.+94     	; 0xa90 <xTaskIncrementTick+0x11a>
 a32:	8e 01       	movw	r16, r28
 a34:	0e 5f       	subi	r16, 0xFE	; 254
 a36:	1f 4f       	sbci	r17, 0xFF	; 255
 a38:	c8 01       	movw	r24, r16
 a3a:	0e 94 c0 01 	call	0x380	; 0x380 <uxListRemove>
 a3e:	8c 89       	ldd	r24, Y+20	; 0x14
 a40:	9d 89       	ldd	r25, Y+21	; 0x15
 a42:	89 2b       	or	r24, r25
 a44:	21 f0       	breq	.+8      	; 0xa4e <xTaskIncrementTick+0xd8>
 a46:	ce 01       	movw	r24, r28
 a48:	0c 96       	adiw	r24, 0x0c	; 12
 a4a:	0e 94 c0 01 	call	0x380	; 0x380 <uxListRemove>
 a4e:	8e 89       	ldd	r24, Y+22	; 0x16
 a50:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 a54:	98 17       	cp	r25, r24
 a56:	10 f4       	brcc	.+4      	; 0xa5c <xTaskIncrementTick+0xe6>
 a58:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	9c 01       	movw	r18, r24
 a60:	22 0f       	add	r18, r18
 a62:	33 1f       	adc	r19, r19
 a64:	22 0f       	add	r18, r18
 a66:	33 1f       	adc	r19, r19
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	82 0f       	add	r24, r18
 a6e:	93 1f       	adc	r25, r19
 a70:	b8 01       	movw	r22, r16
 a72:	81 5c       	subi	r24, 0xC1	; 193
 a74:	9e 4f       	sbci	r25, 0xFE	; 254
 a76:	0e 94 9f 01 	call	0x33e	; 0x33e <vListInsertEnd>
 a7a:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a7e:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a82:	9e 89       	ldd	r25, Y+22	; 0x16
 a84:	86 89       	ldd	r24, Z+22	; 0x16
 a86:	98 17       	cp	r25, r24
 a88:	08 f4       	brcc	.+2      	; 0xa8c <xTaskIncrementTick+0x116>
 a8a:	b2 cf       	rjmp	.-156    	; 0x9f0 <xTaskIncrementTick+0x7a>
 a8c:	dc 2c       	mov	r13, r12
 a8e:	b0 cf       	rjmp	.-160    	; 0x9f0 <xTaskIncrementTick+0x7a>
 a90:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a94:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a98:	86 89       	ldd	r24, Z+22	; 0x16
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	fc 01       	movw	r30, r24
 a9e:	ee 0f       	add	r30, r30
 aa0:	ff 1f       	adc	r31, r31
 aa2:	ee 0f       	add	r30, r30
 aa4:	ff 1f       	adc	r31, r31
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	8e 0f       	add	r24, r30
 aac:	9f 1f       	adc	r25, r31
 aae:	fc 01       	movw	r30, r24
 ab0:	e1 5c       	subi	r30, 0xC1	; 193
 ab2:	fe 4f       	sbci	r31, 0xFE	; 254
 ab4:	80 81       	ld	r24, Z
 ab6:	82 30       	cpi	r24, 0x02	; 2
 ab8:	48 f0       	brcs	.+18     	; 0xacc <xTaskIncrementTick+0x156>
 aba:	dd 24       	eor	r13, r13
 abc:	d3 94       	inc	r13
 abe:	06 c0       	rjmp	.+12     	; 0xacc <xTaskIncrementTick+0x156>
 ac0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 ac4:	8f 5f       	subi	r24, 0xFF	; 255
 ac6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 aca:	d1 2c       	mov	r13, r1
 acc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 ad0:	88 23       	and	r24, r24
 ad2:	11 f0       	breq	.+4      	; 0xad8 <xTaskIncrementTick+0x162>
 ad4:	dd 24       	eor	r13, r13
 ad6:	d3 94       	inc	r13
 ad8:	8d 2d       	mov	r24, r13
 ada:	df 91       	pop	r29
 adc:	cf 91       	pop	r28
 ade:	1f 91       	pop	r17
 ae0:	0f 91       	pop	r16
 ae2:	ff 90       	pop	r15
 ae4:	ef 90       	pop	r14
 ae6:	df 90       	pop	r13
 ae8:	cf 90       	pop	r12
 aea:	08 95       	ret

00000aec <xTaskResumeAll>:
 aec:	df 92       	push	r13
 aee:	ef 92       	push	r14
 af0:	ff 92       	push	r15
 af2:	0f 93       	push	r16
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	f8 94       	cli
 afe:	0f 92       	push	r0
 b00:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 b04:	81 50       	subi	r24, 0x01	; 1
 b06:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 b0a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 b0e:	81 11       	cpse	r24, r1
 b10:	5f c0       	rjmp	.+190    	; 0xbd0 <xTaskResumeAll+0xe4>
 b12:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 b16:	81 11       	cpse	r24, r1
 b18:	33 c0       	rjmp	.+102    	; 0xb80 <xTaskResumeAll+0x94>
 b1a:	5d c0       	rjmp	.+186    	; 0xbd6 <xTaskResumeAll+0xea>
 b1c:	d7 01       	movw	r26, r14
 b1e:	15 96       	adiw	r26, 0x05	; 5
 b20:	ed 91       	ld	r30, X+
 b22:	fc 91       	ld	r31, X
 b24:	16 97       	sbiw	r26, 0x06	; 6
 b26:	c6 81       	ldd	r28, Z+6	; 0x06
 b28:	d7 81       	ldd	r29, Z+7	; 0x07
 b2a:	ce 01       	movw	r24, r28
 b2c:	0c 96       	adiw	r24, 0x0c	; 12
 b2e:	0e 94 c0 01 	call	0x380	; 0x380 <uxListRemove>
 b32:	8e 01       	movw	r16, r28
 b34:	0e 5f       	subi	r16, 0xFE	; 254
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	c8 01       	movw	r24, r16
 b3a:	0e 94 c0 01 	call	0x380	; 0x380 <uxListRemove>
 b3e:	8e 89       	ldd	r24, Y+22	; 0x16
 b40:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 b44:	98 17       	cp	r25, r24
 b46:	10 f4       	brcc	.+4      	; 0xb4c <xTaskResumeAll+0x60>
 b48:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	9c 01       	movw	r18, r24
 b50:	22 0f       	add	r18, r18
 b52:	33 1f       	adc	r19, r19
 b54:	22 0f       	add	r18, r18
 b56:	33 1f       	adc	r19, r19
 b58:	22 0f       	add	r18, r18
 b5a:	33 1f       	adc	r19, r19
 b5c:	82 0f       	add	r24, r18
 b5e:	93 1f       	adc	r25, r19
 b60:	b8 01       	movw	r22, r16
 b62:	81 5c       	subi	r24, 0xC1	; 193
 b64:	9e 4f       	sbci	r25, 0xFE	; 254
 b66:	0e 94 9f 01 	call	0x33e	; 0x33e <vListInsertEnd>
 b6a:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 b6e:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b72:	9e 89       	ldd	r25, Y+22	; 0x16
 b74:	86 89       	ldd	r24, Z+22	; 0x16
 b76:	98 17       	cp	r25, r24
 b78:	68 f0       	brcs	.+26     	; 0xb94 <xTaskResumeAll+0xa8>
 b7a:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 b7e:	0a c0       	rjmp	.+20     	; 0xb94 <xTaskResumeAll+0xa8>
 b80:	c0 e0       	ldi	r28, 0x00	; 0
 b82:	d0 e0       	ldi	r29, 0x00	; 0
 b84:	0f 2e       	mov	r0, r31
 b86:	f0 e2       	ldi	r31, 0x20	; 32
 b88:	ef 2e       	mov	r14, r31
 b8a:	f1 e0       	ldi	r31, 0x01	; 1
 b8c:	ff 2e       	mov	r15, r31
 b8e:	f0 2d       	mov	r31, r0
 b90:	dd 24       	eor	r13, r13
 b92:	d3 94       	inc	r13
 b94:	f7 01       	movw	r30, r14
 b96:	80 81       	ld	r24, Z
 b98:	81 11       	cpse	r24, r1
 b9a:	c0 cf       	rjmp	.-128    	; 0xb1c <xTaskResumeAll+0x30>
 b9c:	cd 2b       	or	r28, r29
 b9e:	11 f0       	breq	.+4      	; 0xba4 <xTaskResumeAll+0xb8>
 ba0:	0e 94 45 03 	call	0x68a	; 0x68a <prvResetNextTaskUnblockTime>
 ba4:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 ba8:	cc 23       	and	r28, r28
 baa:	51 f0       	breq	.+20     	; 0xbc0 <xTaskResumeAll+0xd4>
 bac:	d1 e0       	ldi	r29, 0x01	; 1
 bae:	0e 94 bb 04 	call	0x976	; 0x976 <xTaskIncrementTick>
 bb2:	81 11       	cpse	r24, r1
 bb4:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 bb8:	c1 50       	subi	r28, 0x01	; 1
 bba:	c9 f7       	brne	.-14     	; 0xbae <xTaskResumeAll+0xc2>
 bbc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 bc0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 bc4:	88 23       	and	r24, r24
 bc6:	31 f0       	breq	.+12     	; 0xbd4 <xTaskResumeAll+0xe8>
 bc8:	0e 94 8d 02 	call	0x51a	; 0x51a <vPortYield>
 bcc:	81 e0       	ldi	r24, 0x01	; 1
 bce:	03 c0       	rjmp	.+6      	; 0xbd6 <xTaskResumeAll+0xea>
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <xTaskResumeAll+0xea>
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	ff 90       	pop	r15
 be4:	ef 90       	pop	r14
 be6:	df 90       	pop	r13
 be8:	08 95       	ret

00000bea <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 bee:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 bf2:	88 23       	and	r24, r24
 bf4:	21 f0       	breq	.+8      	; 0xbfe <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 bfc:	8e c0       	rjmp	.+284    	; 0xd1a <vTaskSwitchContext+0x130>
	}
	else
	{
		xYieldPending = pdFALSE;
 bfe:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 c02:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
 c06:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c0a:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 c0e:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c12:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 c16:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c1a:	93 96       	adiw	r26, 0x23	; 35
 c1c:	6d 91       	ld	r22, X+
 c1e:	7c 91       	ld	r23, X
 c20:	94 97       	sbiw	r26, 0x24	; 36
 c22:	80 81       	ld	r24, Z
 c24:	91 81       	ldd	r25, Z+1	; 0x01
 c26:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 c2a:	9a a3       	std	Y+34, r25	; 0x22
 c2c:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 c2e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 c32:	82 2f       	mov	r24, r18
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	fc 01       	movw	r30, r24
 c38:	ee 0f       	add	r30, r30
 c3a:	ff 1f       	adc	r31, r31
 c3c:	ee 0f       	add	r30, r30
 c3e:	ff 1f       	adc	r31, r31
 c40:	ee 0f       	add	r30, r30
 c42:	ff 1f       	adc	r31, r31
 c44:	e8 0f       	add	r30, r24
 c46:	f9 1f       	adc	r31, r25
 c48:	e1 5c       	subi	r30, 0xC1	; 193
 c4a:	fe 4f       	sbci	r31, 0xFE	; 254
 c4c:	30 81       	ld	r19, Z
 c4e:	31 11       	cpse	r19, r1
 c50:	11 c0       	rjmp	.+34     	; 0xc74 <vTaskSwitchContext+0x8a>
 c52:	21 50       	subi	r18, 0x01	; 1
 c54:	82 2f       	mov	r24, r18
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	fc 01       	movw	r30, r24
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	e8 0f       	add	r30, r24
 c68:	f9 1f       	adc	r31, r25
 c6a:	e1 5c       	subi	r30, 0xC1	; 193
 c6c:	fe 4f       	sbci	r31, 0xFE	; 254
 c6e:	30 81       	ld	r19, Z
 c70:	33 23       	and	r19, r19
 c72:	79 f3       	breq	.-34     	; 0xc52 <vTaskSwitchContext+0x68>
 c74:	ac 01       	movw	r20, r24
 c76:	44 0f       	add	r20, r20
 c78:	55 1f       	adc	r21, r21
 c7a:	44 0f       	add	r20, r20
 c7c:	55 1f       	adc	r21, r21
 c7e:	44 0f       	add	r20, r20
 c80:	55 1f       	adc	r21, r21
 c82:	48 0f       	add	r20, r24
 c84:	59 1f       	adc	r21, r25
 c86:	da 01       	movw	r26, r20
 c88:	a1 5c       	subi	r26, 0xC1	; 193
 c8a:	be 4f       	sbci	r27, 0xFE	; 254
 c8c:	11 96       	adiw	r26, 0x01	; 1
 c8e:	ed 91       	ld	r30, X+
 c90:	fc 91       	ld	r31, X
 c92:	12 97       	sbiw	r26, 0x02	; 2
 c94:	02 80       	ldd	r0, Z+2	; 0x02
 c96:	f3 81       	ldd	r31, Z+3	; 0x03
 c98:	e0 2d       	mov	r30, r0
 c9a:	12 96       	adiw	r26, 0x02	; 2
 c9c:	fc 93       	st	X, r31
 c9e:	ee 93       	st	-X, r30
 ca0:	11 97       	sbiw	r26, 0x01	; 1
 ca2:	4e 5b       	subi	r20, 0xBE	; 190
 ca4:	5e 4f       	sbci	r21, 0xFE	; 254
 ca6:	e4 17       	cp	r30, r20
 ca8:	f5 07       	cpc	r31, r21
 caa:	29 f4       	brne	.+10     	; 0xcb6 <vTaskSwitchContext+0xcc>
 cac:	42 81       	ldd	r20, Z+2	; 0x02
 cae:	53 81       	ldd	r21, Z+3	; 0x03
 cb0:	fd 01       	movw	r30, r26
 cb2:	52 83       	std	Z+2, r21	; 0x02
 cb4:	41 83       	std	Z+1, r20	; 0x01
 cb6:	fc 01       	movw	r30, r24
 cb8:	ee 0f       	add	r30, r30
 cba:	ff 1f       	adc	r31, r31
 cbc:	ee 0f       	add	r30, r30
 cbe:	ff 1f       	adc	r31, r31
 cc0:	ee 0f       	add	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	8e 0f       	add	r24, r30
 cc6:	9f 1f       	adc	r25, r31
 cc8:	fc 01       	movw	r30, r24
 cca:	e1 5c       	subi	r30, 0xC1	; 193
 ccc:	fe 4f       	sbci	r31, 0xFE	; 254
 cce:	01 80       	ldd	r0, Z+1	; 0x01
 cd0:	f2 81       	ldd	r31, Z+2	; 0x02
 cd2:	e0 2d       	mov	r30, r0
 cd4:	86 81       	ldd	r24, Z+6	; 0x06
 cd6:	97 81       	ldd	r25, Z+7	; 0x07
 cd8:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 cdc:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 ce0:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 ce4:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 ce8:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 cec:	c1 a1       	ldd	r28, Z+33	; 0x21
 cee:	d2 a1       	ldd	r29, Z+34	; 0x22
 cf0:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 cf4:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 cf8:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 cfc:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 d00:	93 96       	adiw	r26, 0x23	; 35
 d02:	6d 91       	ld	r22, X+
 d04:	7c 91       	ld	r23, X
 d06:	94 97       	sbiw	r26, 0x24	; 36
 d08:	80 81       	ld	r24, Z
 d0a:	91 81       	ldd	r25, Z+1	; 0x01
 d0c:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 d10:	c8 17       	cp	r28, r24
 d12:	d9 07       	cpc	r29, r25
 d14:	11 f4       	brne	.+4      	; 0xd1a <vTaskSwitchContext+0x130>
 d16:	0e 94 c9 06 	call	0xd92	; 0xd92 <vApplicationTaskChecksumHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 d1a:	df 91       	pop	r29
 d1c:	cf 91       	pop	r28
 d1e:	08 95       	ret

00000d20 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 d20:	cf 93       	push	r28
 d22:	df 93       	push	r29
 d24:	00 d0       	rcall	.+0      	; 0xd26 <_Z7task_txPv+0x6>
 d26:	cd b7       	in	r28, 0x3d	; 61
 d28:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
 d2a:	8d e2       	ldi	r24, 0x2D	; 45
 d2c:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 d2e:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
 d30:	82 e3       	ldi	r24, 0x32	; 50
 d32:	89 83       	std	Y+1, r24	; 0x01
 d34:	fe cf       	rjmp	.-4      	; 0xd32 <_Z7task_txPv+0x12>

00000d36 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
 d36:	cf 93       	push	r28
 d38:	df 93       	push	r29
 d3a:	00 d0       	rcall	.+0      	; 0xd3c <_Z7task_rxPv+0x6>
 d3c:	cd b7       	in	r28, 0x3d	; 61
 d3e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
 d40:	85 e5       	ldi	r24, 0x55	; 85
 d42:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 d44:	8d e2       	ldi	r24, 0x2D	; 45
 d46:	8a 83       	std	Y+2, r24	; 0x02
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <_Z7task_rxPv+0x12>

00000d4a <main>:
volatile uint16_t globa;
uint16_t globa1;


int main(void)
{
 d4a:	ef 92       	push	r14
 d4c:	ff 92       	push	r15
 d4e:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 d50:	8f ef       	ldi	r24, 0xFF	; 255
 d52:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 d54:	e1 2c       	mov	r14, r1
 d56:	f1 2c       	mov	r15, r1
 d58:	01 e0       	ldi	r16, 0x01	; 1
 d5a:	20 e0       	ldi	r18, 0x00	; 0
 d5c:	30 e0       	ldi	r19, 0x00	; 0
 d5e:	44 e6       	ldi	r20, 0x64	; 100
 d60:	50 e0       	ldi	r21, 0x00	; 0
 d62:	6b e0       	ldi	r22, 0x0B	; 11
 d64:	71 e0       	ldi	r23, 0x01	; 1
 d66:	80 e9       	ldi	r24, 0x90	; 144
 d68:	96 e0       	ldi	r25, 0x06	; 6
 d6a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 d6e:	20 e0       	ldi	r18, 0x00	; 0
 d70:	30 e0       	ldi	r19, 0x00	; 0
 d72:	44 e6       	ldi	r20, 0x64	; 100
 d74:	50 e0       	ldi	r21, 0x00	; 0
 d76:	6e e0       	ldi	r22, 0x0E	; 14
 d78:	71 e0       	ldi	r23, 0x01	; 1
 d7a:	8b e9       	ldi	r24, 0x9B	; 155
 d7c:	96 e0       	ldi	r25, 0x06	; 6
 d7e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <xTaskCreate>
	vTaskStartScheduler();
 d82:	0e 94 8b 04 	call	0x916	; 0x916 <vTaskStartScheduler>
	
	return 0;
}
 d86:	80 e0       	ldi	r24, 0x00	; 0
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	0f 91       	pop	r16
 d8c:	ff 90       	pop	r15
 d8e:	ef 90       	pop	r14
 d90:	08 95       	ret

00000d92 <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
 d92:	81 e0       	ldi	r24, 0x01	; 1
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
 d9a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
 d9e:	08 95       	ret

00000da0 <malloc>:
 da0:	0f 93       	push	r16
 da2:	1f 93       	push	r17
 da4:	cf 93       	push	r28
 da6:	df 93       	push	r29
 da8:	82 30       	cpi	r24, 0x02	; 2
 daa:	91 05       	cpc	r25, r1
 dac:	10 f4       	brcc	.+4      	; 0xdb2 <malloc+0x12>
 dae:	82 e0       	ldi	r24, 0x02	; 2
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
 db6:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
 dba:	20 e0       	ldi	r18, 0x00	; 0
 dbc:	30 e0       	ldi	r19, 0x00	; 0
 dbe:	a0 e0       	ldi	r26, 0x00	; 0
 dc0:	b0 e0       	ldi	r27, 0x00	; 0
 dc2:	30 97       	sbiw	r30, 0x00	; 0
 dc4:	19 f1       	breq	.+70     	; 0xe0c <malloc+0x6c>
 dc6:	40 81       	ld	r20, Z
 dc8:	51 81       	ldd	r21, Z+1	; 0x01
 dca:	02 81       	ldd	r16, Z+2	; 0x02
 dcc:	13 81       	ldd	r17, Z+3	; 0x03
 dce:	48 17       	cp	r20, r24
 dd0:	59 07       	cpc	r21, r25
 dd2:	c8 f0       	brcs	.+50     	; 0xe06 <malloc+0x66>
 dd4:	84 17       	cp	r24, r20
 dd6:	95 07       	cpc	r25, r21
 dd8:	69 f4       	brne	.+26     	; 0xdf4 <malloc+0x54>
 dda:	10 97       	sbiw	r26, 0x00	; 0
 ddc:	31 f0       	breq	.+12     	; 0xdea <malloc+0x4a>
 dde:	12 96       	adiw	r26, 0x02	; 2
 de0:	0c 93       	st	X, r16
 de2:	12 97       	sbiw	r26, 0x02	; 2
 de4:	13 96       	adiw	r26, 0x03	; 3
 de6:	1c 93       	st	X, r17
 de8:	27 c0       	rjmp	.+78     	; 0xe38 <malloc+0x98>
 dea:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
 dee:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
 df2:	22 c0       	rjmp	.+68     	; 0xe38 <malloc+0x98>
 df4:	21 15       	cp	r18, r1
 df6:	31 05       	cpc	r19, r1
 df8:	19 f0       	breq	.+6      	; 0xe00 <malloc+0x60>
 dfa:	42 17       	cp	r20, r18
 dfc:	53 07       	cpc	r21, r19
 dfe:	18 f4       	brcc	.+6      	; 0xe06 <malloc+0x66>
 e00:	9a 01       	movw	r18, r20
 e02:	bd 01       	movw	r22, r26
 e04:	ef 01       	movw	r28, r30
 e06:	df 01       	movw	r26, r30
 e08:	f8 01       	movw	r30, r16
 e0a:	db cf       	rjmp	.-74     	; 0xdc2 <malloc+0x22>
 e0c:	21 15       	cp	r18, r1
 e0e:	31 05       	cpc	r19, r1
 e10:	f9 f0       	breq	.+62     	; 0xe50 <malloc+0xb0>
 e12:	28 1b       	sub	r18, r24
 e14:	39 0b       	sbc	r19, r25
 e16:	24 30       	cpi	r18, 0x04	; 4
 e18:	31 05       	cpc	r19, r1
 e1a:	80 f4       	brcc	.+32     	; 0xe3c <malloc+0x9c>
 e1c:	8a 81       	ldd	r24, Y+2	; 0x02
 e1e:	9b 81       	ldd	r25, Y+3	; 0x03
 e20:	61 15       	cp	r22, r1
 e22:	71 05       	cpc	r23, r1
 e24:	21 f0       	breq	.+8      	; 0xe2e <malloc+0x8e>
 e26:	fb 01       	movw	r30, r22
 e28:	93 83       	std	Z+3, r25	; 0x03
 e2a:	82 83       	std	Z+2, r24	; 0x02
 e2c:	04 c0       	rjmp	.+8      	; 0xe36 <malloc+0x96>
 e2e:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
 e32:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
 e36:	fe 01       	movw	r30, r28
 e38:	32 96       	adiw	r30, 0x02	; 2
 e3a:	44 c0       	rjmp	.+136    	; 0xec4 <malloc+0x124>
 e3c:	fe 01       	movw	r30, r28
 e3e:	e2 0f       	add	r30, r18
 e40:	f3 1f       	adc	r31, r19
 e42:	81 93       	st	Z+, r24
 e44:	91 93       	st	Z+, r25
 e46:	22 50       	subi	r18, 0x02	; 2
 e48:	31 09       	sbc	r19, r1
 e4a:	39 83       	std	Y+1, r19	; 0x01
 e4c:	28 83       	st	Y, r18
 e4e:	3a c0       	rjmp	.+116    	; 0xec4 <malloc+0x124>
 e50:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 e54:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 e58:	23 2b       	or	r18, r19
 e5a:	41 f4       	brne	.+16     	; 0xe6c <malloc+0xcc>
 e5c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 e60:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 e64:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
 e68:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
 e6c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 e70:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 e74:	21 15       	cp	r18, r1
 e76:	31 05       	cpc	r19, r1
 e78:	41 f4       	brne	.+16     	; 0xe8a <malloc+0xea>
 e7a:	2d b7       	in	r18, 0x3d	; 61
 e7c:	3e b7       	in	r19, 0x3e	; 62
 e7e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 e82:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 e86:	24 1b       	sub	r18, r20
 e88:	35 0b       	sbc	r19, r21
 e8a:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
 e8e:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
 e92:	e2 17       	cp	r30, r18
 e94:	f3 07       	cpc	r31, r19
 e96:	a0 f4       	brcc	.+40     	; 0xec0 <malloc+0x120>
 e98:	2e 1b       	sub	r18, r30
 e9a:	3f 0b       	sbc	r19, r31
 e9c:	28 17       	cp	r18, r24
 e9e:	39 07       	cpc	r19, r25
 ea0:	78 f0       	brcs	.+30     	; 0xec0 <malloc+0x120>
 ea2:	ac 01       	movw	r20, r24
 ea4:	4e 5f       	subi	r20, 0xFE	; 254
 ea6:	5f 4f       	sbci	r21, 0xFF	; 255
 ea8:	24 17       	cp	r18, r20
 eaa:	35 07       	cpc	r19, r21
 eac:	48 f0       	brcs	.+18     	; 0xec0 <malloc+0x120>
 eae:	4e 0f       	add	r20, r30
 eb0:	5f 1f       	adc	r21, r31
 eb2:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
 eb6:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
 eba:	81 93       	st	Z+, r24
 ebc:	91 93       	st	Z+, r25
 ebe:	02 c0       	rjmp	.+4      	; 0xec4 <malloc+0x124>
 ec0:	e0 e0       	ldi	r30, 0x00	; 0
 ec2:	f0 e0       	ldi	r31, 0x00	; 0
 ec4:	cf 01       	movw	r24, r30
 ec6:	df 91       	pop	r29
 ec8:	cf 91       	pop	r28
 eca:	1f 91       	pop	r17
 ecc:	0f 91       	pop	r16
 ece:	08 95       	ret

00000ed0 <free>:
 ed0:	cf 93       	push	r28
 ed2:	df 93       	push	r29
 ed4:	00 97       	sbiw	r24, 0x00	; 0
 ed6:	09 f4       	brne	.+2      	; 0xeda <free+0xa>
 ed8:	81 c0       	rjmp	.+258    	; 0xfdc <free+0x10c>
 eda:	fc 01       	movw	r30, r24
 edc:	32 97       	sbiw	r30, 0x02	; 2
 ede:	13 82       	std	Z+3, r1	; 0x03
 ee0:	12 82       	std	Z+2, r1	; 0x02
 ee2:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
 ee6:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
 eea:	10 97       	sbiw	r26, 0x00	; 0
 eec:	81 f4       	brne	.+32     	; 0xf0e <free+0x3e>
 eee:	20 81       	ld	r18, Z
 ef0:	31 81       	ldd	r19, Z+1	; 0x01
 ef2:	82 0f       	add	r24, r18
 ef4:	93 1f       	adc	r25, r19
 ef6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 efa:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 efe:	28 17       	cp	r18, r24
 f00:	39 07       	cpc	r19, r25
 f02:	51 f5       	brne	.+84     	; 0xf58 <free+0x88>
 f04:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
 f08:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
 f0c:	67 c0       	rjmp	.+206    	; 0xfdc <free+0x10c>
 f0e:	ed 01       	movw	r28, r26
 f10:	20 e0       	ldi	r18, 0x00	; 0
 f12:	30 e0       	ldi	r19, 0x00	; 0
 f14:	ce 17       	cp	r28, r30
 f16:	df 07       	cpc	r29, r31
 f18:	40 f4       	brcc	.+16     	; 0xf2a <free+0x5a>
 f1a:	4a 81       	ldd	r20, Y+2	; 0x02
 f1c:	5b 81       	ldd	r21, Y+3	; 0x03
 f1e:	9e 01       	movw	r18, r28
 f20:	41 15       	cp	r20, r1
 f22:	51 05       	cpc	r21, r1
 f24:	f1 f0       	breq	.+60     	; 0xf62 <free+0x92>
 f26:	ea 01       	movw	r28, r20
 f28:	f5 cf       	rjmp	.-22     	; 0xf14 <free+0x44>
 f2a:	d3 83       	std	Z+3, r29	; 0x03
 f2c:	c2 83       	std	Z+2, r28	; 0x02
 f2e:	40 81       	ld	r20, Z
 f30:	51 81       	ldd	r21, Z+1	; 0x01
 f32:	84 0f       	add	r24, r20
 f34:	95 1f       	adc	r25, r21
 f36:	c8 17       	cp	r28, r24
 f38:	d9 07       	cpc	r29, r25
 f3a:	59 f4       	brne	.+22     	; 0xf52 <free+0x82>
 f3c:	88 81       	ld	r24, Y
 f3e:	99 81       	ldd	r25, Y+1	; 0x01
 f40:	84 0f       	add	r24, r20
 f42:	95 1f       	adc	r25, r21
 f44:	02 96       	adiw	r24, 0x02	; 2
 f46:	91 83       	std	Z+1, r25	; 0x01
 f48:	80 83       	st	Z, r24
 f4a:	8a 81       	ldd	r24, Y+2	; 0x02
 f4c:	9b 81       	ldd	r25, Y+3	; 0x03
 f4e:	93 83       	std	Z+3, r25	; 0x03
 f50:	82 83       	std	Z+2, r24	; 0x02
 f52:	21 15       	cp	r18, r1
 f54:	31 05       	cpc	r19, r1
 f56:	29 f4       	brne	.+10     	; 0xf62 <free+0x92>
 f58:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
 f5c:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
 f60:	3d c0       	rjmp	.+122    	; 0xfdc <free+0x10c>
 f62:	e9 01       	movw	r28, r18
 f64:	fb 83       	std	Y+3, r31	; 0x03
 f66:	ea 83       	std	Y+2, r30	; 0x02
 f68:	49 91       	ld	r20, Y+
 f6a:	59 91       	ld	r21, Y+
 f6c:	c4 0f       	add	r28, r20
 f6e:	d5 1f       	adc	r29, r21
 f70:	ec 17       	cp	r30, r28
 f72:	fd 07       	cpc	r31, r29
 f74:	61 f4       	brne	.+24     	; 0xf8e <free+0xbe>
 f76:	80 81       	ld	r24, Z
 f78:	91 81       	ldd	r25, Z+1	; 0x01
 f7a:	84 0f       	add	r24, r20
 f7c:	95 1f       	adc	r25, r21
 f7e:	02 96       	adiw	r24, 0x02	; 2
 f80:	e9 01       	movw	r28, r18
 f82:	99 83       	std	Y+1, r25	; 0x01
 f84:	88 83       	st	Y, r24
 f86:	82 81       	ldd	r24, Z+2	; 0x02
 f88:	93 81       	ldd	r25, Z+3	; 0x03
 f8a:	9b 83       	std	Y+3, r25	; 0x03
 f8c:	8a 83       	std	Y+2, r24	; 0x02
 f8e:	e0 e0       	ldi	r30, 0x00	; 0
 f90:	f0 e0       	ldi	r31, 0x00	; 0
 f92:	12 96       	adiw	r26, 0x02	; 2
 f94:	8d 91       	ld	r24, X+
 f96:	9c 91       	ld	r25, X
 f98:	13 97       	sbiw	r26, 0x03	; 3
 f9a:	00 97       	sbiw	r24, 0x00	; 0
 f9c:	19 f0       	breq	.+6      	; 0xfa4 <free+0xd4>
 f9e:	fd 01       	movw	r30, r26
 fa0:	dc 01       	movw	r26, r24
 fa2:	f7 cf       	rjmp	.-18     	; 0xf92 <free+0xc2>
 fa4:	8d 91       	ld	r24, X+
 fa6:	9c 91       	ld	r25, X
 fa8:	11 97       	sbiw	r26, 0x01	; 1
 faa:	9d 01       	movw	r18, r26
 fac:	2e 5f       	subi	r18, 0xFE	; 254
 fae:	3f 4f       	sbci	r19, 0xFF	; 255
 fb0:	82 0f       	add	r24, r18
 fb2:	93 1f       	adc	r25, r19
 fb4:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 fb8:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 fbc:	28 17       	cp	r18, r24
 fbe:	39 07       	cpc	r19, r25
 fc0:	69 f4       	brne	.+26     	; 0xfdc <free+0x10c>
 fc2:	30 97       	sbiw	r30, 0x00	; 0
 fc4:	29 f4       	brne	.+10     	; 0xfd0 <free+0x100>
 fc6:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
 fca:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
 fce:	02 c0       	rjmp	.+4      	; 0xfd4 <free+0x104>
 fd0:	13 82       	std	Z+3, r1	; 0x03
 fd2:	12 82       	std	Z+2, r1	; 0x02
 fd4:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
 fd8:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
 fdc:	df 91       	pop	r29
 fde:	cf 91       	pop	r28
 fe0:	08 95       	ret

00000fe2 <memset>:
 fe2:	dc 01       	movw	r26, r24
 fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <memset+0x6>
 fe6:	6d 93       	st	X+, r22
 fe8:	41 50       	subi	r20, 0x01	; 1
 fea:	50 40       	sbci	r21, 0x00	; 0
 fec:	e0 f7       	brcc	.-8      	; 0xfe6 <memset+0x4>
 fee:	08 95       	ret

00000ff0 <_exit>:
 ff0:	f8 94       	cli

00000ff2 <__stop_program>:
 ff2:	ff cf       	rjmp	.-2      	; 0xff2 <__stop_program>
