
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000fe2  00001076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800112  00800112  00001088  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bea  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dfd  00000000  00000000  00003f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000199a  00000000  00000000  00004d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ec  00000000  00000000  000066e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001189  00000000  00000000  00006dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b13  00000000  00000000  00007f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 06 	call	0xd38	; 0xd38 <main>
  9e:	0c 94 ef 07 	jmp	0xfde	; 0xfde <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
         return r;
  }


ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	9f 92       	push	r9
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	5c 01       	movw	r10, r24
	uint8_t * data_p=pxStartOfStack+1;
  be:	ac 01       	movw	r20, r24
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t length = pxEndOfStack-pxStartOfStack;
  c4:	68 1b       	sub	r22, r24
  c6:	79 0b       	sbc	r23, r25
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
  c8:	09 f4       	brne	.+2      	; 0xcc <uxChecksumGetTaskChecksum+0x26>
  ca:	ee c0       	rjmp	.+476    	; 0x2a8 <uxChecksumGetTaskChecksum+0x202>
  cc:	fa 01       	movw	r30, r20
  ce:	eb 01       	movw	r28, r22
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	c8 0f       	add	r28, r24
  d4:	d9 1f       	adc	r29, r25
  d6:	da 01       	movw	r26, r20
  d8:	90 e0       	ldi	r25, 0x00	; 0
		poolH ^= (*(data_p+i) & 0xAA);
  da:	8d 91       	ld	r24, X+
  dc:	8a 7a       	andi	r24, 0xAA	; 170
  de:	98 27       	eor	r25, r24
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
  e0:	ac 17       	cp	r26, r28
  e2:	bd 07       	cpc	r27, r29
  e4:	d1 f7       	brne	.-12     	; 0xda <uxChecksumGetTaskChecksum+0x34>
  e6:	9d c0       	rjmp	.+314    	; 0x222 <uxChecksumGetTaskChecksum+0x17c>
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
  e8:	91 91       	ld	r25, Z+
  ea:	9c 7c       	andi	r25, 0xCC	; 204
  ec:	29 27       	eor	r18, r25
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
  ee:	ce 17       	cp	r28, r30
  f0:	df 07       	cpc	r29, r31
  f2:	d1 f7       	brne	.-12     	; 0xe8 <uxChecksumGetTaskChecksum+0x42>
  f4:	a6 c0       	rjmp	.+332    	; 0x242 <uxChecksumGetTaskChecksum+0x19c>
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
  f6:	91 91       	ld	r25, Z+
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	49 27       	eor	r20, r25
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	26 17       	cp	r18, r22
 102:	37 07       	cpc	r19, r23
 104:	c0 f3       	brcs	.-16     	; 0xf6 <uxChecksumGetTaskChecksum+0x50>
 106:	b6 c0       	rjmp	.+364    	; 0x274 <uxChecksumGetTaskChecksum+0x1ce>
	
	pBit=3;
	poolH = 0;
	posbit = (1<<(pBit-3));
	for(i=0;i<length;i++){
		if((i+1) & (posbit)){
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	20 ff       	sbrs	r18, 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <uxChecksumGetTaskChecksum+0x6e>
			poolH ^= (*(data_p+i));
 110:	41 81       	ldd	r20, Z+1	; 0x01
 112:	94 27       	eor	r25, r20
 114:	31 96       	adiw	r30, 0x01	; 1
	hammingBits += (paridade(poolH))<<pBit;
	
	pBit=3;
	poolH = 0;
	posbit = (1<<(pBit-3));
	for(i=0;i<length;i++){
 116:	26 17       	cp	r18, r22
 118:	37 07       	cpc	r19, r23
 11a:	b0 f3       	brcs	.-20     	; 0x108 <uxChecksumGetTaskChecksum+0x62>
		if((i+1) & (posbit)){
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
 11c:	89 2f       	mov	r24, r25
 11e:	82 95       	swap	r24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	98 27       	eor	r25, r24
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	26 e9       	ldi	r18, 0x96	; 150
 128:	39 e6       	ldi	r19, 0x69	; 105
 12a:	a9 01       	movw	r20, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <uxChecksumGetTaskChecksum+0x8c>
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <uxChecksumGetTaskChecksum+0x88>
 136:	ca 01       	movw	r24, r20
 138:	81 70       	andi	r24, 0x01	; 1
 13a:	99 27       	eor	r25, r25
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	8a 0f       	add	r24, r26
 14a:	9b 1f       	adc	r25, r27
	
	uint8_t pBitmax = fls(length+1)+2;
 14c:	9b 01       	movw	r18, r22
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255

static inline uint8_t fls(uint16_t x)
{
          uint8_t r = 16;
  
          if (!x)
 152:	09 f4       	brne	.+2      	; 0x156 <uxChecksumGetTaskChecksum+0xb0>
 154:	af c0       	rjmp	.+350    	; 0x2b4 <uxChecksumGetTaskChecksum+0x20e>
                  return 0;
          if (!(x & 0xff00u)) {
 156:	a9 01       	movw	r20, r18
 158:	44 27       	eor	r20, r20
 15a:	45 2b       	or	r20, r21
 15c:	21 f4       	brne	.+8      	; 0x166 <uxChecksumGetTaskChecksum+0xc0>
                  x <<= 8;
 15e:	32 2f       	mov	r19, r18
 160:	22 27       	eor	r18, r18
                  r -= 8;
 162:	48 e0       	ldi	r20, 0x08	; 8
 164:	01 c0       	rjmp	.+2      	; 0x168 <uxChecksumGetTaskChecksum+0xc2>
#elif ( configSUPPORT_TASK_CHECKSUM==3 )


static inline uint8_t fls(uint16_t x)
{
          uint8_t r = 16;
 166:	40 e1       	ldi	r20, 0x10	; 16
                  return 0;
          if (!(x & 0xff00u)) {
                  x <<= 8;
                  r -= 8;
          }
          if (!(x & 0xf000u)) {
 168:	f9 01       	movw	r30, r18
 16a:	ee 27       	eor	r30, r30
 16c:	f0 7f       	andi	r31, 0xF0	; 240
 16e:	ef 2b       	or	r30, r31
 170:	39 f4       	brne	.+14     	; 0x180 <uxChecksumGetTaskChecksum+0xda>
                  x <<= 4;
 172:	22 95       	swap	r18
 174:	32 95       	swap	r19
 176:	30 7f       	andi	r19, 0xF0	; 240
 178:	32 27       	eor	r19, r18
 17a:	20 7f       	andi	r18, 0xF0	; 240
 17c:	32 27       	eor	r19, r18
                  r -= 4;
 17e:	44 50       	subi	r20, 0x04	; 4
          }
          if (!(x & 0xc0000u)) {
                  x <<= 2;
                  r -= 2;
          }
          if (!(x & 0x8000u)) {
 180:	35 ff       	sbrs	r19, 5
 182:	02 c0       	rjmp	.+4      	; 0x188 <uxChecksumGetTaskChecksum+0xe2>
                  x <<= 4;
                  r -= 4;
          }
          if (!(x & 0xc0000u)) {
                  x <<= 2;
                  r -= 2;
 184:	42 50       	subi	r20, 0x02	; 2
 186:	01 c0       	rjmp	.+2      	; 0x18a <uxChecksumGetTaskChecksum+0xe4>
          }
          if (!(x & 0x8000u)) {
                  x <<= 1;
                  r -= 1;
 188:	43 50       	subi	r20, 0x03	; 3
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = fls(length+1)+2;
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<=pBitmax;pBit++){
 18a:	4e 5f       	subi	r20, 0xFE	; 254
 18c:	04 2f       	mov	r16, r20
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	04 30       	cpi	r16, 0x04	; 4
 192:	11 05       	cpc	r17, r1
 194:	08 f4       	brcc	.+2      	; 0x198 <uxChecksumGetTaskChecksum+0xf2>
 196:	8e c0       	rjmp	.+284    	; 0x2b4 <uxChecksumGetTaskChecksum+0x20e>
 198:	c4 e0       	ldi	r28, 0x04	; 4
 19a:	d0 e0       	ldi	r29, 0x00	; 0
		poolH = 0;
		posbit = (1<<(pBit-3));
 19c:	cc 24       	eor	r12, r12
 19e:	c3 94       	inc	r12
 1a0:	d1 2c       	mov	r13, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f6 e9       	ldi	r31, 0x96	; 150
 1a6:	ef 2e       	mov	r14, r31
 1a8:	f9 e6       	ldi	r31, 0x69	; 105
 1aa:	ff 2e       	mov	r15, r31
 1ac:	f0 2d       	mov	r31, r0
	uint8_t pBitmax = fls(length+1)+2;
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<=pBitmax;pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
 1ae:	9e 01       	movw	r18, r28
 1b0:	23 50       	subi	r18, 0x03	; 3
 1b2:	31 09       	sbc	r19, r1
 1b4:	d6 01       	movw	r26, r12
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <uxChecksumGetTaskChecksum+0x116>
 1b8:	aa 0f       	add	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	2a 95       	dec	r18
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <uxChecksumGetTaskChecksum+0x112>
		for(i=0;i<length;i++){
 1c0:	61 15       	cp	r22, r1
 1c2:	71 05       	cpc	r23, r1
 1c4:	91 f0       	breq	.+36     	; 0x1ea <uxChecksumGetTaskChecksum+0x144>
 1c6:	f5 01       	movw	r30, r10
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	91 2c       	mov	r9, r1
			if((i+1) & (posbit)){
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	ad 01       	movw	r20, r26
 1d4:	42 23       	and	r20, r18
 1d6:	53 23       	and	r21, r19
 1d8:	45 2b       	or	r20, r21
 1da:	11 f0       	breq	.+4      	; 0x1e0 <uxChecksumGetTaskChecksum+0x13a>
				poolH ^= (*(data_p+i));
 1dc:	41 81       	ldd	r20, Z+1	; 0x01
 1de:	94 26       	eor	r9, r20
 1e0:	31 96       	adiw	r30, 0x01	; 1
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<=pBitmax;pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
		for(i=0;i<length;i++){
 1e2:	62 17       	cp	r22, r18
 1e4:	73 07       	cpc	r23, r19
 1e6:	99 f7       	brne	.-26     	; 0x1ce <uxChecksumGetTaskChecksum+0x128>
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <uxChecksumGetTaskChecksum+0x146>
	
	uint8_t pBitmax = fls(length+1)+2;
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<=pBitmax;pBit++){
		poolH = 0;
 1ea:	91 2c       	mov	r9, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
 1ec:	29 2d       	mov	r18, r9
 1ee:	22 95       	swap	r18
 1f0:	2f 70       	andi	r18, 0x0F	; 15
 1f2:	29 25       	eor	r18, r9
 1f4:	2f 70       	andi	r18, 0x0F	; 15
 1f6:	a7 01       	movw	r20, r14
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <uxChecksumGetTaskChecksum+0x158>
 1fa:	55 95       	asr	r21
 1fc:	47 95       	ror	r20
 1fe:	2a 95       	dec	r18
 200:	e2 f7       	brpl	.-8      	; 0x1fa <uxChecksumGetTaskChecksum+0x154>
 202:	9a 01       	movw	r18, r20
 204:	21 70       	andi	r18, 0x01	; 1
 206:	33 27       	eor	r19, r19
 208:	0c 2e       	mov	r0, r28
 20a:	02 c0       	rjmp	.+4      	; 0x210 <uxChecksumGetTaskChecksum+0x16a>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <uxChecksumGetTaskChecksum+0x166>
 214:	82 0f       	add	r24, r18
 216:	93 1f       	adc	r25, r19
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = fls(length+1)+2;
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<=pBitmax;pBit++){
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	0c 17       	cp	r16, r28
 21c:	1d 07       	cpc	r17, r29
 21e:	38 f6       	brcc	.-114    	; 0x1ae <uxChecksumGetTaskChecksum+0x108>
 220:	49 c0       	rjmp	.+146    	; 0x2b4 <uxChecksumGetTaskChecksum+0x20e>
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xAA);
	}
	hammingBits += (paridade(poolH))<<pBit;
 222:	89 2f       	mov	r24, r25
 224:	82 95       	swap	r24
 226:	8f 70       	andi	r24, 0x0F	; 15
 228:	98 27       	eor	r25, r24
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	a6 e9       	ldi	r26, 0x96	; 150
 22e:	b9 e6       	ldi	r27, 0x69	; 105
 230:	02 c0       	rjmp	.+4      	; 0x236 <uxChecksumGetTaskChecksum+0x190>
 232:	b5 95       	asr	r27
 234:	a7 95       	ror	r26
 236:	9a 95       	dec	r25
 238:	e2 f7       	brpl	.-8      	; 0x232 <uxChecksumGetTaskChecksum+0x18c>
 23a:	a1 70       	andi	r26, 0x01	; 1
 23c:	bb 27       	eor	r27, r27
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	53 cf       	rjmp	.-346    	; 0xe8 <uxChecksumGetTaskChecksum+0x42>
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
	}
	hammingBits += (paridade(poolH))<<pBit;
 242:	82 2f       	mov	r24, r18
 244:	82 95       	swap	r24
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	28 27       	eor	r18, r24
 24a:	2f 70       	andi	r18, 0x0F	; 15
 24c:	c6 e9       	ldi	r28, 0x96	; 150
 24e:	d9 e6       	ldi	r29, 0x69	; 105
 250:	02 c0       	rjmp	.+4      	; 0x256 <uxChecksumGetTaskChecksum+0x1b0>
 252:	d5 95       	asr	r29
 254:	c7 95       	ror	r28
 256:	2a 95       	dec	r18
 258:	e2 f7       	brpl	.-8      	; 0x252 <uxChecksumGetTaskChecksum+0x1ac>
 25a:	c1 70       	andi	r28, 0x01	; 1
 25c:	dd 27       	eor	r29, r29
 25e:	ce 01       	movw	r24, r28
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	ec 01       	movw	r28, r24
 266:	ca 0f       	add	r28, r26
 268:	db 1f       	adc	r29, r27
 26a:	fa 01       	movw	r30, r20
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	41 cf       	rjmp	.-382    	; 0xf6 <uxChecksumGetTaskChecksum+0x50>
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
 274:	84 2f       	mov	r24, r20
 276:	82 95       	swap	r24
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	48 27       	eor	r20, r24
 27c:	4f 70       	andi	r20, 0x0F	; 15
 27e:	86 e9       	ldi	r24, 0x96	; 150
 280:	99 e6       	ldi	r25, 0x69	; 105
 282:	02 c0       	rjmp	.+4      	; 0x288 <uxChecksumGetTaskChecksum+0x1e2>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	4a 95       	dec	r20
 28a:	e2 f7       	brpl	.-8      	; 0x284 <uxChecksumGetTaskChecksum+0x1de>
 28c:	81 70       	andi	r24, 0x01	; 1
 28e:	99 27       	eor	r25, r25
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	dc 01       	movw	r26, r24
 29a:	ac 0f       	add	r26, r28
 29c:	bd 1f       	adc	r27, r29
 29e:	f5 01       	movw	r30, r10
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	30 cf       	rjmp	.-416    	; 0x108 <uxChecksumGetTaskChecksum+0x62>
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = fls(length+1)+2;
 2a8:	9b 01       	movw	r18, r22
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<length;i++){
		if((i+1) & (posbit)){
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	51 cf       	rjmp	.-350    	; 0x156 <uxChecksumGetTaskChecksum+0xb0>
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	bf 90       	pop	r11
 2c6:	af 90       	pop	r10
 2c8:	9f 90       	pop	r9
 2ca:	08 95       	ret

000002cc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
 2d2:	0e 94 ac 04 	call	0x958	; 0x958 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 2d6:	ce 01       	movw	r24, r28
 2d8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <malloc>
 2dc:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 2de:	0e 94 6d 05 	call	0xada	; 0xada <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 2e2:	ce 01       	movw	r24, r28
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	if( pv )
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	41 f0       	breq	.+16     	; 0x302 <vPortFree+0x18>
 2f2:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
 2f4:	0e 94 ac 04 	call	0x958	; 0x958 <vTaskSuspendAll>
		{
			free( pv );
 2f8:	ce 01       	movw	r24, r28
 2fa:	0e 94 5f 07 	call	0xebe	; 0xebe <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 2fe:	0e 94 6d 05 	call	0xada	; 0xada <xTaskResumeAll>
	}
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 308:	fc 01       	movw	r30, r24
 30a:	03 96       	adiw	r24, 0x03	; 3
 30c:	92 83       	std	Z+2, r25	; 0x02
 30e:	81 83       	std	Z+1, r24	; 0x01
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	3f ef       	ldi	r19, 0xFF	; 255
 314:	34 83       	std	Z+4, r19	; 0x04
 316:	23 83       	std	Z+3, r18	; 0x03
 318:	96 83       	std	Z+6, r25	; 0x06
 31a:	85 83       	std	Z+5, r24	; 0x05
 31c:	90 87       	std	Z+8, r25	; 0x08
 31e:	87 83       	std	Z+7, r24	; 0x07
 320:	10 82       	st	Z, r1
 322:	08 95       	ret

00000324 <vListInitialiseItem>:
 324:	fc 01       	movw	r30, r24
 326:	11 86       	std	Z+9, r1	; 0x09
 328:	10 86       	std	Z+8, r1	; 0x08
 32a:	08 95       	ret

0000032c <vListInsertEnd>:
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	9c 01       	movw	r18, r24
 332:	fb 01       	movw	r30, r22
 334:	dc 01       	movw	r26, r24
 336:	11 96       	adiw	r26, 0x01	; 1
 338:	cd 91       	ld	r28, X+
 33a:	dc 91       	ld	r29, X
 33c:	12 97       	sbiw	r26, 0x02	; 2
 33e:	d3 83       	std	Z+3, r29	; 0x03
 340:	c2 83       	std	Z+2, r28	; 0x02
 342:	8c 81       	ldd	r24, Y+4	; 0x04
 344:	9d 81       	ldd	r25, Y+5	; 0x05
 346:	95 83       	std	Z+5, r25	; 0x05
 348:	84 83       	std	Z+4, r24	; 0x04
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	9d 81       	ldd	r25, Y+5	; 0x05
 34e:	dc 01       	movw	r26, r24
 350:	13 96       	adiw	r26, 0x03	; 3
 352:	7c 93       	st	X, r23
 354:	6e 93       	st	-X, r22
 356:	12 97       	sbiw	r26, 0x02	; 2
 358:	7d 83       	std	Y+5, r23	; 0x05
 35a:	6c 83       	std	Y+4, r22	; 0x04
 35c:	31 87       	std	Z+9, r19	; 0x09
 35e:	20 87       	std	Z+8, r18	; 0x08
 360:	f9 01       	movw	r30, r18
 362:	80 81       	ld	r24, Z
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 83       	st	Z, r24
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 374:	a0 85       	ldd	r26, Z+8	; 0x08
 376:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 378:	c2 81       	ldd	r28, Z+2	; 0x02
 37a:	d3 81       	ldd	r29, Z+3	; 0x03
 37c:	84 81       	ldd	r24, Z+4	; 0x04
 37e:	95 81       	ldd	r25, Z+5	; 0x05
 380:	9d 83       	std	Y+5, r25	; 0x05
 382:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 384:	c4 81       	ldd	r28, Z+4	; 0x04
 386:	d5 81       	ldd	r29, Z+5	; 0x05
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	93 81       	ldd	r25, Z+3	; 0x03
 38c:	9b 83       	std	Y+3, r25	; 0x03
 38e:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	8d 91       	ld	r24, X+
 394:	9c 91       	ld	r25, X
 396:	12 97       	sbiw	r26, 0x02	; 2
 398:	e8 17       	cp	r30, r24
 39a:	f9 07       	cpc	r31, r25
 39c:	31 f4       	brne	.+12     	; 0x3aa <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 39e:	84 81       	ldd	r24, Z+4	; 0x04
 3a0:	95 81       	ldd	r25, Z+5	; 0x05
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	9c 93       	st	X, r25
 3a6:	8e 93       	st	-X, r24
 3a8:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 3aa:	11 86       	std	Z+9, r1	; 0x09
 3ac:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 3ae:	8c 91       	ld	r24, X
 3b0:	81 50       	subi	r24, 0x01	; 1
 3b2:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 3b4:	8c 91       	ld	r24, X
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 3bc:	31 e1       	ldi	r19, 0x11	; 17
 3be:	fc 01       	movw	r30, r24
 3c0:	30 83       	st	Z, r19
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	22 e2       	ldi	r18, 0x22	; 34
 3c6:	20 83       	st	Z, r18
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	a3 e3       	ldi	r26, 0x33	; 51
 3cc:	a0 83       	st	Z, r26
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	60 83       	st	Z, r22
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	70 83       	st	Z, r23
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	10 82       	st	Z, r1
 3da:	31 97       	sbiw	r30, 0x01	; 1
 3dc:	60 e8       	ldi	r22, 0x80	; 128
 3de:	60 83       	st	Z, r22
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	10 82       	st	Z, r1
 3e4:	31 97       	sbiw	r30, 0x01	; 1
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	60 83       	st	Z, r22
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	60 83       	st	Z, r22
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	64 e0       	ldi	r22, 0x04	; 4
 3f4:	60 83       	st	Z, r22
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	65 e0       	ldi	r22, 0x05	; 5
 3fa:	60 83       	st	Z, r22
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	66 e0       	ldi	r22, 0x06	; 6
 400:	60 83       	st	Z, r22
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	67 e0       	ldi	r22, 0x07	; 7
 406:	60 83       	st	Z, r22
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	68 e0       	ldi	r22, 0x08	; 8
 40c:	60 83       	st	Z, r22
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	69 e0       	ldi	r22, 0x09	; 9
 412:	60 83       	st	Z, r22
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	60 e1       	ldi	r22, 0x10	; 16
 418:	60 83       	st	Z, r22
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	30 83       	st	Z, r19
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	32 e1       	ldi	r19, 0x12	; 18
 422:	30 83       	st	Z, r19
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	33 e1       	ldi	r19, 0x13	; 19
 428:	30 83       	st	Z, r19
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	34 e1       	ldi	r19, 0x14	; 20
 42e:	30 83       	st	Z, r19
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	35 e1       	ldi	r19, 0x15	; 21
 434:	30 83       	st	Z, r19
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	36 e1       	ldi	r19, 0x16	; 22
 43a:	30 83       	st	Z, r19
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	37 e1       	ldi	r19, 0x17	; 23
 440:	30 83       	st	Z, r19
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	38 e1       	ldi	r19, 0x18	; 24
 446:	30 83       	st	Z, r19
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	39 e1       	ldi	r19, 0x19	; 25
 44c:	30 83       	st	Z, r19
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	30 e2       	ldi	r19, 0x20	; 32
 452:	30 83       	st	Z, r19
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	31 e2       	ldi	r19, 0x21	; 33
 458:	30 83       	st	Z, r19
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	20 83       	st	Z, r18
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	23 e2       	ldi	r18, 0x23	; 35
 462:	20 83       	st	Z, r18
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	40 83       	st	Z, r20
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	50 83       	st	Z, r21
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	26 e2       	ldi	r18, 0x26	; 38
 470:	20 83       	st	Z, r18
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	27 e2       	ldi	r18, 0x27	; 39
 476:	20 83       	st	Z, r18
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	28 e2       	ldi	r18, 0x28	; 40
 47c:	20 83       	st	Z, r18
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	29 e2       	ldi	r18, 0x29	; 41
 482:	20 83       	st	Z, r18
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	20 e3       	ldi	r18, 0x30	; 48
 488:	20 83       	st	Z, r18
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	21 e3       	ldi	r18, 0x31	; 49
 48e:	20 83       	st	Z, r18
 490:	86 97       	sbiw	r24, 0x26	; 38
 492:	08 95       	ret

00000494 <xPortStartScheduler>:
 494:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 498:	89 ef       	ldi	r24, 0xF9	; 249
 49a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 49e:	8b e0       	ldi	r24, 0x0B	; 11
 4a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4a4:	ef e6       	ldi	r30, 0x6F	; 111
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	82 60       	ori	r24, 0x02	; 2
 4ac:	80 83       	st	Z, r24
 4ae:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 4b2:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 4b6:	cd 91       	ld	r28, X+
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	dd 91       	ld	r29, X+
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	bf 90       	pop	r11
 4e8:	af 90       	pop	r10
 4ea:	9f 90       	pop	r9
 4ec:	8f 90       	pop	r8
 4ee:	7f 90       	pop	r7
 4f0:	6f 90       	pop	r6
 4f2:	5f 90       	pop	r5
 4f4:	4f 90       	pop	r4
 4f6:	3f 90       	pop	r3
 4f8:	2f 90       	pop	r2
 4fa:	1f 90       	pop	r1
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	08 95       	ret
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret

00000508 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	0f 92       	push	r0
 510:	1f 92       	push	r1
 512:	11 24       	eor	r1, r1
 514:	2f 92       	push	r2
 516:	3f 92       	push	r3
 518:	4f 92       	push	r4
 51a:	5f 92       	push	r5
 51c:	6f 92       	push	r6
 51e:	7f 92       	push	r7
 520:	8f 92       	push	r8
 522:	9f 92       	push	r9
 524:	af 92       	push	r10
 526:	bf 92       	push	r11
 528:	cf 92       	push	r12
 52a:	df 92       	push	r13
 52c:	ef 92       	push	r14
 52e:	ff 92       	push	r15
 530:	0f 93       	push	r16
 532:	1f 93       	push	r17
 534:	2f 93       	push	r18
 536:	3f 93       	push	r19
 538:	4f 93       	push	r20
 53a:	5f 93       	push	r21
 53c:	6f 93       	push	r22
 53e:	7f 93       	push	r23
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	af 93       	push	r26
 546:	bf 93       	push	r27
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ef 93       	push	r30
 54e:	ff 93       	push	r31
 550:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 554:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 558:	0d b6       	in	r0, 0x3d	; 61
 55a:	0d 92       	st	X+, r0
 55c:	0e b6       	in	r0, 0x3e	; 62
 55e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 560:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 564:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 568:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 56c:	cd 91       	ld	r28, X+
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	dd 91       	ld	r29, X+
 572:	de bf       	out	0x3e, r29	; 62
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	bf 91       	pop	r27
 57e:	af 91       	pop	r26
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	7f 91       	pop	r23
 586:	6f 91       	pop	r22
 588:	5f 91       	pop	r21
 58a:	4f 91       	pop	r20
 58c:	3f 91       	pop	r19
 58e:	2f 91       	pop	r18
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	df 90       	pop	r13
 59a:	cf 90       	pop	r12
 59c:	bf 90       	pop	r11
 59e:	af 90       	pop	r10
 5a0:	9f 90       	pop	r9
 5a2:	8f 90       	pop	r8
 5a4:	7f 90       	pop	r7
 5a6:	6f 90       	pop	r6
 5a8:	5f 90       	pop	r5
 5aa:	4f 90       	pop	r4
 5ac:	3f 90       	pop	r3
 5ae:	2f 90       	pop	r2
 5b0:	1f 90       	pop	r1
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 5b8:	08 95       	ret

000005ba <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	0f 92       	push	r0
 5c2:	1f 92       	push	r1
 5c4:	11 24       	eor	r1, r1
 5c6:	2f 92       	push	r2
 5c8:	3f 92       	push	r3
 5ca:	4f 92       	push	r4
 5cc:	5f 92       	push	r5
 5ce:	6f 92       	push	r6
 5d0:	7f 92       	push	r7
 5d2:	8f 92       	push	r8
 5d4:	9f 92       	push	r9
 5d6:	af 92       	push	r10
 5d8:	bf 92       	push	r11
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
 602:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 606:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 60a:	0d b6       	in	r0, 0x3d	; 61
 60c:	0d 92       	st	X+, r0
 60e:	0e b6       	in	r0, 0x3e	; 62
 610:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 612:	0e 94 b2 04 	call	0x964	; 0x964 <xTaskIncrementTick>
 616:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 618:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 61c:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 620:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 624:	cd 91       	ld	r28, X+
 626:	cd bf       	out	0x3d, r28	; 61
 628:	dd 91       	ld	r29, X+
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	cf 90       	pop	r12
 654:	bf 90       	pop	r11
 656:	af 90       	pop	r10
 658:	9f 90       	pop	r9
 65a:	8f 90       	pop	r8
 65c:	7f 90       	pop	r7
 65e:	6f 90       	pop	r6
 660:	5f 90       	pop	r5
 662:	4f 90       	pop	r4
 664:	3f 90       	pop	r3
 666:	2f 90       	pop	r2
 668:	1f 90       	pop	r1
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 670:	08 95       	ret

00000672 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 672:	0e 94 dd 02 	call	0x5ba	; 0x5ba <vPortYieldFromTick>
		asm volatile ( "reti" );
 676:	18 95       	reti

00000678 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 678:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 67c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 680:	80 81       	ld	r24, Z
 682:	81 11       	cpse	r24, r1
 684:	07 c0       	rjmp	.+14     	; 0x694 <prvResetNextTaskUnblockTime+0x1c>
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 68e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 692:	08 95       	ret
 694:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 698:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 69c:	05 80       	ldd	r0, Z+5	; 0x05
 69e:	f6 81       	ldd	r31, Z+6	; 0x06
 6a0:	e0 2d       	mov	r30, r0
 6a2:	06 80       	ldd	r0, Z+6	; 0x06
 6a4:	f7 81       	ldd	r31, Z+7	; 0x07
 6a6:	e0 2d       	mov	r30, r0
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 6b0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 6b4:	08 95       	ret

000006b6 <prvIdleTask>:
 6b6:	cf e3       	ldi	r28, 0x3F	; 63
 6b8:	d1 e0       	ldi	r29, 0x01	; 1
 6ba:	88 81       	ld	r24, Y
 6bc:	82 30       	cpi	r24, 0x02	; 2
 6be:	e8 f3       	brcs	.-6      	; 0x6ba <prvIdleTask+0x4>
 6c0:	0e 94 84 02 	call	0x508	; 0x508 <vPortYield>
 6c4:	fa cf       	rjmp	.-12     	; 0x6ba <prvIdleTask+0x4>

000006c6 <xTaskCreate>:
 6c6:	4f 92       	push	r4
 6c8:	5f 92       	push	r5
 6ca:	6f 92       	push	r6
 6cc:	7f 92       	push	r7
 6ce:	8f 92       	push	r8
 6d0:	9f 92       	push	r9
 6d2:	af 92       	push	r10
 6d4:	bf 92       	push	r11
 6d6:	cf 92       	push	r12
 6d8:	df 92       	push	r13
 6da:	ef 92       	push	r14
 6dc:	ff 92       	push	r15
 6de:	0f 93       	push	r16
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	4c 01       	movw	r8, r24
 6e6:	6b 01       	movw	r12, r22
 6e8:	5a 01       	movw	r10, r20
 6ea:	29 01       	movw	r4, r18
 6ec:	ca 01       	movw	r24, r20
 6ee:	0e 94 66 01 	call	0x2cc	; 0x2cc <pvPortMalloc>
 6f2:	3c 01       	movw	r6, r24
 6f4:	89 2b       	or	r24, r25
 6f6:	09 f4       	brne	.+2      	; 0x6fa <xTaskCreate+0x34>
 6f8:	f4 c0       	rjmp	.+488    	; 0x8e2 <xTaskCreate+0x21c>
 6fa:	8c e2       	ldi	r24, 0x2C	; 44
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 66 01 	call	0x2cc	; 0x2cc <pvPortMalloc>
 702:	ec 01       	movw	r28, r24
 704:	89 2b       	or	r24, r25
 706:	c1 f0       	breq	.+48     	; 0x738 <xTaskCreate+0x72>
 708:	78 8e       	std	Y+24, r7	; 0x18
 70a:	6f 8a       	std	Y+23, r6	; 0x17
 70c:	a5 01       	movw	r20, r10
 70e:	65 ea       	ldi	r22, 0xA5	; 165
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	c3 01       	movw	r24, r6
 714:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <memset>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	a8 1a       	sub	r10, r24
 71c:	b1 08       	sbc	r11, r1
 71e:	8f 89       	ldd	r24, Y+23	; 0x17
 720:	98 8d       	ldd	r25, Y+24	; 0x18
 722:	a8 0e       	add	r10, r24
 724:	b9 1e       	adc	r11, r25
 726:	bc a2       	std	Y+36, r11	; 0x24
 728:	ab a2       	std	Y+35, r10	; 0x23
 72a:	d6 01       	movw	r26, r12
 72c:	8c 91       	ld	r24, X
 72e:	89 8f       	std	Y+25, r24	; 0x19
 730:	8c 91       	ld	r24, X
 732:	81 11       	cpse	r24, r1
 734:	05 c0       	rjmp	.+10     	; 0x740 <xTaskCreate+0x7a>
 736:	18 c0       	rjmp	.+48     	; 0x768 <xTaskCreate+0xa2>
 738:	c3 01       	movw	r24, r6
 73a:	0e 94 75 01 	call	0x2ea	; 0x2ea <vPortFree>
 73e:	d1 c0       	rjmp	.+418    	; 0x8e2 <xTaskCreate+0x21c>
 740:	ae 01       	movw	r20, r28
 742:	46 5e       	subi	r20, 0xE6	; 230
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	f6 01       	movw	r30, r12
 748:	31 96       	adiw	r30, 0x01	; 1
 74a:	b8 e0       	ldi	r27, 0x08	; 8
 74c:	cb 0e       	add	r12, r27
 74e:	d1 1c       	adc	r13, r1
 750:	cf 01       	movw	r24, r30
 752:	21 91       	ld	r18, Z+
 754:	da 01       	movw	r26, r20
 756:	2d 93       	st	X+, r18
 758:	ad 01       	movw	r20, r26
 75a:	dc 01       	movw	r26, r24
 75c:	8c 91       	ld	r24, X
 75e:	88 23       	and	r24, r24
 760:	19 f0       	breq	.+6      	; 0x768 <xTaskCreate+0xa2>
 762:	ec 15       	cp	r30, r12
 764:	fd 05       	cpc	r31, r13
 766:	a1 f7       	brne	.-24     	; 0x750 <xTaskCreate+0x8a>
 768:	18 a2       	std	Y+32, r1	; 0x20
 76a:	04 30       	cpi	r16, 0x04	; 4
 76c:	08 f0       	brcs	.+2      	; 0x770 <xTaskCreate+0xaa>
 76e:	03 e0       	ldi	r16, 0x03	; 3
 770:	0e 8b       	std	Y+22, r16	; 0x16
 772:	0d a3       	std	Y+37, r16	; 0x25
 774:	1e a2       	std	Y+38, r1	; 0x26
 776:	6e 01       	movw	r12, r28
 778:	b2 e0       	ldi	r27, 0x02	; 2
 77a:	cb 0e       	add	r12, r27
 77c:	d1 1c       	adc	r13, r1
 77e:	c6 01       	movw	r24, r12
 780:	0e 94 92 01 	call	0x324	; 0x324 <vListInitialiseItem>
 784:	ce 01       	movw	r24, r28
 786:	0c 96       	adiw	r24, 0x0c	; 12
 788:	0e 94 92 01 	call	0x324	; 0x324 <vListInitialiseItem>
 78c:	d9 87       	std	Y+9, r29	; 0x09
 78e:	c8 87       	std	Y+8, r28	; 0x08
 790:	84 e0       	ldi	r24, 0x04	; 4
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	80 1b       	sub	r24, r16
 796:	91 09       	sbc	r25, r1
 798:	9d 87       	std	Y+13, r25	; 0x0d
 79a:	8c 87       	std	Y+12, r24	; 0x0c
 79c:	db 8b       	std	Y+19, r29	; 0x13
 79e:	ca 8b       	std	Y+18, r28	; 0x12
 7a0:	1f a2       	std	Y+39, r1	; 0x27
 7a2:	18 a6       	std	Y+40, r1	; 0x28
 7a4:	19 a6       	std	Y+41, r1	; 0x29
 7a6:	1a a6       	std	Y+42, r1	; 0x2a
 7a8:	1b a6       	std	Y+43, r1	; 0x2b
 7aa:	a2 01       	movw	r20, r4
 7ac:	b4 01       	movw	r22, r8
 7ae:	c5 01       	movw	r24, r10
 7b0:	0e 94 de 01 	call	0x3bc	; 0x3bc <pxPortInitialiseStack>
 7b4:	99 83       	std	Y+1, r25	; 0x01
 7b6:	88 83       	st	Y, r24
 7b8:	e1 14       	cp	r14, r1
 7ba:	f1 04       	cpc	r15, r1
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <xTaskCreate+0xfe>
 7be:	f7 01       	movw	r30, r14
 7c0:	d1 83       	std	Z+1, r29	; 0x01
 7c2:	c0 83       	st	Z, r28
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	0f 92       	push	r0
 7ca:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 7ce:	8f 5f       	subi	r24, 0xFF	; 255
 7d0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 7d4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
 7d8:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 7dc:	89 2b       	or	r24, r25
 7de:	89 f5       	brne	.+98     	; 0x842 <xTaskCreate+0x17c>
 7e0:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 7e4:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 7e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	c9 f5       	brne	.+114    	; 0x862 <xTaskCreate+0x19c>
 7f0:	8f e3       	ldi	r24, 0x3F	; 63
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 7f8:	88 e4       	ldi	r24, 0x48	; 72
 7fa:	91 e0       	ldi	r25, 0x01	; 1
 7fc:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 800:	81 e5       	ldi	r24, 0x51	; 81
 802:	91 e0       	ldi	r25, 0x01	; 1
 804:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 808:	8a e5       	ldi	r24, 0x5A	; 90
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 810:	86 e3       	ldi	r24, 0x36	; 54
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 818:	8d e2       	ldi	r24, 0x2D	; 45
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 820:	80 e2       	ldi	r24, 0x20	; 32
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	0e 94 84 01 	call	0x308	; 0x308 <vListInitialise>
 828:	86 e3       	ldi	r24, 0x36	; 54
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
 830:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
 834:	8d e2       	ldi	r24, 0x2D	; 45
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 83c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 840:	10 c0       	rjmp	.+32     	; 0x862 <xTaskCreate+0x19c>
 842:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 846:	81 11       	cpse	r24, r1
 848:	0c c0       	rjmp	.+24     	; 0x862 <xTaskCreate+0x19c>
 84a:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 84e:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 852:	96 89       	ldd	r25, Z+22	; 0x16
 854:	8e 89       	ldd	r24, Y+22	; 0x16
 856:	89 17       	cp	r24, r25
 858:	20 f0       	brcs	.+8      	; 0x862 <xTaskCreate+0x19c>
 85a:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 85e:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 862:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 866:	8f 5f       	subi	r24, 0xFF	; 255
 868:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 86c:	e0 90 63 01 	lds	r14, 0x0163	; 0x800163 <pxCurrentTCB>
 870:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 874:	6b a1       	ldd	r22, Y+35	; 0x23
 876:	7c a1       	ldd	r23, Y+36	; 0x24
 878:	88 81       	ld	r24, Y
 87a:	99 81       	ldd	r25, Y+1	; 0x01
 87c:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 880:	d7 01       	movw	r26, r14
 882:	92 96       	adiw	r26, 0x22	; 34
 884:	9c 93       	st	X, r25
 886:	8e 93       	st	-X, r24
 888:	91 97       	sbiw	r26, 0x21	; 33
 88a:	8e 89       	ldd	r24, Y+22	; 0x16
 88c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 890:	98 17       	cp	r25, r24
 892:	10 f4       	brcc	.+4      	; 0x898 <xTaskCreate+0x1d2>
 894:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	9c 01       	movw	r18, r24
 89c:	22 0f       	add	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	22 0f       	add	r18, r18
 8a2:	33 1f       	adc	r19, r19
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	82 0f       	add	r24, r18
 8aa:	93 1f       	adc	r25, r19
 8ac:	b6 01       	movw	r22, r12
 8ae:	81 5c       	subi	r24, 0xC1	; 193
 8b0:	9e 4f       	sbci	r25, 0xFE	; 254
 8b2:	0e 94 96 01 	call	0x32c	; 0x32c <vListInsertEnd>
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 8be:	88 23       	and	r24, r24
 8c0:	61 f0       	breq	.+24     	; 0x8da <xTaskCreate+0x214>
 8c2:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 8c6:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 8ca:	96 89       	ldd	r25, Z+22	; 0x16
 8cc:	8e 89       	ldd	r24, Y+22	; 0x16
 8ce:	98 17       	cp	r25, r24
 8d0:	30 f4       	brcc	.+12     	; 0x8de <xTaskCreate+0x218>
 8d2:	0e 94 84 02 	call	0x508	; 0x508 <vPortYield>
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <xTaskCreate+0x21e>
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <xTaskCreate+0x21e>
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <xTaskCreate+0x21e>
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	0f 91       	pop	r16
 8ea:	ff 90       	pop	r15
 8ec:	ef 90       	pop	r14
 8ee:	df 90       	pop	r13
 8f0:	cf 90       	pop	r12
 8f2:	bf 90       	pop	r11
 8f4:	af 90       	pop	r10
 8f6:	9f 90       	pop	r9
 8f8:	8f 90       	pop	r8
 8fa:	7f 90       	pop	r7
 8fc:	6f 90       	pop	r6
 8fe:	5f 90       	pop	r5
 900:	4f 90       	pop	r4
 902:	08 95       	ret

00000904 <vTaskStartScheduler>:
 904:	ef 92       	push	r14
 906:	ff 92       	push	r15
 908:	0f 93       	push	r16
 90a:	0f 2e       	mov	r0, r31
 90c:	f3 e1       	ldi	r31, 0x13	; 19
 90e:	ef 2e       	mov	r14, r31
 910:	f1 e0       	ldi	r31, 0x01	; 1
 912:	ff 2e       	mov	r15, r31
 914:	f0 2d       	mov	r31, r0
 916:	00 e0       	ldi	r16, 0x00	; 0
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	44 e6       	ldi	r20, 0x64	; 100
 91e:	50 e0       	ldi	r21, 0x00	; 0
 920:	66 e0       	ldi	r22, 0x06	; 6
 922:	71 e0       	ldi	r23, 0x01	; 1
 924:	8b e5       	ldi	r24, 0x5B	; 91
 926:	93 e0       	ldi	r25, 0x03	; 3
 928:	0e 94 63 03 	call	0x6c6	; 0x6c6 <xTaskCreate>
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	81 f4       	brne	.+32     	; 0x950 <vTaskStartScheduler+0x4c>
 930:	f8 94       	cli
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	9f ef       	ldi	r25, 0xFF	; 255
 936:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 93a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 944:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 948:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 94c:	0e 94 4a 02 	call	0x494	; 0x494 <xPortStartScheduler>
 950:	0f 91       	pop	r16
 952:	ff 90       	pop	r15
 954:	ef 90       	pop	r14
 956:	08 95       	ret

00000958 <vTaskSuspendAll>:
 958:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 962:	08 95       	ret

00000964 <xTaskIncrementTick>:
 964:	cf 92       	push	r12
 966:	df 92       	push	r13
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 978:	81 11       	cpse	r24, r1
 97a:	99 c0       	rjmp	.+306    	; 0xaae <xTaskIncrementTick+0x14a>
 97c:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 980:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	e8 1a       	sub	r14, r24
 988:	f8 0a       	sbc	r15, r24
 98a:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 98e:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 992:	e1 14       	cp	r14, r1
 994:	f1 04       	cpc	r15, r1
 996:	b9 f4       	brne	.+46     	; 0x9c6 <xTaskIncrementTick+0x62>
 998:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
 99c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 9a0:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
 9a4:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 9a8:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
 9ac:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
 9b0:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 9b4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 9b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 9bc:	8f 5f       	subi	r24, 0xFF	; 255
 9be:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 9c2:	0e 94 3c 03 	call	0x678	; 0x678 <prvResetNextTaskUnblockTime>
 9c6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 9ca:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 9ce:	e8 16       	cp	r14, r24
 9d0:	f9 06       	cpc	r15, r25
 9d2:	10 f4       	brcc	.+4      	; 0x9d8 <xTaskIncrementTick+0x74>
 9d4:	d1 2c       	mov	r13, r1
 9d6:	53 c0       	rjmp	.+166    	; 0xa7e <xTaskIncrementTick+0x11a>
 9d8:	d1 2c       	mov	r13, r1
 9da:	cc 24       	eor	r12, r12
 9dc:	c3 94       	inc	r12
 9de:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 9e2:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 9e6:	80 81       	ld	r24, Z
 9e8:	81 11       	cpse	r24, r1
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <xTaskIncrementTick+0x96>
 9ec:	8f ef       	ldi	r24, 0xFF	; 255
 9ee:	9f ef       	ldi	r25, 0xFF	; 255
 9f0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 9f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 9f8:	42 c0       	rjmp	.+132    	; 0xa7e <xTaskIncrementTick+0x11a>
 9fa:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 9fe:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 a02:	05 80       	ldd	r0, Z+5	; 0x05
 a04:	f6 81       	ldd	r31, Z+6	; 0x06
 a06:	e0 2d       	mov	r30, r0
 a08:	c6 81       	ldd	r28, Z+6	; 0x06
 a0a:	d7 81       	ldd	r29, Z+7	; 0x07
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	9b 81       	ldd	r25, Y+3	; 0x03
 a10:	e8 16       	cp	r14, r24
 a12:	f9 06       	cpc	r15, r25
 a14:	28 f4       	brcc	.+10     	; 0xa20 <xTaskIncrementTick+0xbc>
 a16:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 a1a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 a1e:	2f c0       	rjmp	.+94     	; 0xa7e <xTaskIncrementTick+0x11a>
 a20:	8e 01       	movw	r16, r28
 a22:	0e 5f       	subi	r16, 0xFE	; 254
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	c8 01       	movw	r24, r16
 a28:	0e 94 b7 01 	call	0x36e	; 0x36e <uxListRemove>
 a2c:	8c 89       	ldd	r24, Y+20	; 0x14
 a2e:	9d 89       	ldd	r25, Y+21	; 0x15
 a30:	89 2b       	or	r24, r25
 a32:	21 f0       	breq	.+8      	; 0xa3c <xTaskIncrementTick+0xd8>
 a34:	ce 01       	movw	r24, r28
 a36:	0c 96       	adiw	r24, 0x0c	; 12
 a38:	0e 94 b7 01 	call	0x36e	; 0x36e <uxListRemove>
 a3c:	8e 89       	ldd	r24, Y+22	; 0x16
 a3e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 a42:	98 17       	cp	r25, r24
 a44:	10 f4       	brcc	.+4      	; 0xa4a <xTaskIncrementTick+0xe6>
 a46:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	9c 01       	movw	r18, r24
 a4e:	22 0f       	add	r18, r18
 a50:	33 1f       	adc	r19, r19
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	82 0f       	add	r24, r18
 a5c:	93 1f       	adc	r25, r19
 a5e:	b8 01       	movw	r22, r16
 a60:	81 5c       	subi	r24, 0xC1	; 193
 a62:	9e 4f       	sbci	r25, 0xFE	; 254
 a64:	0e 94 96 01 	call	0x32c	; 0x32c <vListInsertEnd>
 a68:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a6c:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a70:	9e 89       	ldd	r25, Y+22	; 0x16
 a72:	86 89       	ldd	r24, Z+22	; 0x16
 a74:	98 17       	cp	r25, r24
 a76:	08 f4       	brcc	.+2      	; 0xa7a <xTaskIncrementTick+0x116>
 a78:	b2 cf       	rjmp	.-156    	; 0x9de <xTaskIncrementTick+0x7a>
 a7a:	dc 2c       	mov	r13, r12
 a7c:	b0 cf       	rjmp	.-160    	; 0x9de <xTaskIncrementTick+0x7a>
 a7e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a82:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a86:	86 89       	ldd	r24, Z+22	; 0x16
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	fc 01       	movw	r30, r24
 a8c:	ee 0f       	add	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	ee 0f       	add	r30, r30
 a92:	ff 1f       	adc	r31, r31
 a94:	ee 0f       	add	r30, r30
 a96:	ff 1f       	adc	r31, r31
 a98:	8e 0f       	add	r24, r30
 a9a:	9f 1f       	adc	r25, r31
 a9c:	fc 01       	movw	r30, r24
 a9e:	e1 5c       	subi	r30, 0xC1	; 193
 aa0:	fe 4f       	sbci	r31, 0xFE	; 254
 aa2:	80 81       	ld	r24, Z
 aa4:	82 30       	cpi	r24, 0x02	; 2
 aa6:	48 f0       	brcs	.+18     	; 0xaba <xTaskIncrementTick+0x156>
 aa8:	dd 24       	eor	r13, r13
 aaa:	d3 94       	inc	r13
 aac:	06 c0       	rjmp	.+12     	; 0xaba <xTaskIncrementTick+0x156>
 aae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 ab2:	8f 5f       	subi	r24, 0xFF	; 255
 ab4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 ab8:	d1 2c       	mov	r13, r1
 aba:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 abe:	88 23       	and	r24, r24
 ac0:	11 f0       	breq	.+4      	; 0xac6 <xTaskIncrementTick+0x162>
 ac2:	dd 24       	eor	r13, r13
 ac4:	d3 94       	inc	r13
 ac6:	8d 2d       	mov	r24, r13
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	1f 91       	pop	r17
 ace:	0f 91       	pop	r16
 ad0:	ff 90       	pop	r15
 ad2:	ef 90       	pop	r14
 ad4:	df 90       	pop	r13
 ad6:	cf 90       	pop	r12
 ad8:	08 95       	ret

00000ada <xTaskResumeAll>:
 ada:	df 92       	push	r13
 adc:	ef 92       	push	r14
 ade:	ff 92       	push	r15
 ae0:	0f 93       	push	r16
 ae2:	1f 93       	push	r17
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	0f 92       	push	r0
 aee:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 af2:	81 50       	subi	r24, 0x01	; 1
 af4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 af8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 afc:	81 11       	cpse	r24, r1
 afe:	5f c0       	rjmp	.+190    	; 0xbbe <xTaskResumeAll+0xe4>
 b00:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 b04:	81 11       	cpse	r24, r1
 b06:	33 c0       	rjmp	.+102    	; 0xb6e <xTaskResumeAll+0x94>
 b08:	5d c0       	rjmp	.+186    	; 0xbc4 <xTaskResumeAll+0xea>
 b0a:	d7 01       	movw	r26, r14
 b0c:	15 96       	adiw	r26, 0x05	; 5
 b0e:	ed 91       	ld	r30, X+
 b10:	fc 91       	ld	r31, X
 b12:	16 97       	sbiw	r26, 0x06	; 6
 b14:	c6 81       	ldd	r28, Z+6	; 0x06
 b16:	d7 81       	ldd	r29, Z+7	; 0x07
 b18:	ce 01       	movw	r24, r28
 b1a:	0c 96       	adiw	r24, 0x0c	; 12
 b1c:	0e 94 b7 01 	call	0x36e	; 0x36e <uxListRemove>
 b20:	8e 01       	movw	r16, r28
 b22:	0e 5f       	subi	r16, 0xFE	; 254
 b24:	1f 4f       	sbci	r17, 0xFF	; 255
 b26:	c8 01       	movw	r24, r16
 b28:	0e 94 b7 01 	call	0x36e	; 0x36e <uxListRemove>
 b2c:	8e 89       	ldd	r24, Y+22	; 0x16
 b2e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 b32:	98 17       	cp	r25, r24
 b34:	10 f4       	brcc	.+4      	; 0xb3a <xTaskResumeAll+0x60>
 b36:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	9c 01       	movw	r18, r24
 b3e:	22 0f       	add	r18, r18
 b40:	33 1f       	adc	r19, r19
 b42:	22 0f       	add	r18, r18
 b44:	33 1f       	adc	r19, r19
 b46:	22 0f       	add	r18, r18
 b48:	33 1f       	adc	r19, r19
 b4a:	82 0f       	add	r24, r18
 b4c:	93 1f       	adc	r25, r19
 b4e:	b8 01       	movw	r22, r16
 b50:	81 5c       	subi	r24, 0xC1	; 193
 b52:	9e 4f       	sbci	r25, 0xFE	; 254
 b54:	0e 94 96 01 	call	0x32c	; 0x32c <vListInsertEnd>
 b58:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 b5c:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b60:	9e 89       	ldd	r25, Y+22	; 0x16
 b62:	86 89       	ldd	r24, Z+22	; 0x16
 b64:	98 17       	cp	r25, r24
 b66:	68 f0       	brcs	.+26     	; 0xb82 <xTaskResumeAll+0xa8>
 b68:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 b6c:	0a c0       	rjmp	.+20     	; 0xb82 <xTaskResumeAll+0xa8>
 b6e:	c0 e0       	ldi	r28, 0x00	; 0
 b70:	d0 e0       	ldi	r29, 0x00	; 0
 b72:	0f 2e       	mov	r0, r31
 b74:	f0 e2       	ldi	r31, 0x20	; 32
 b76:	ef 2e       	mov	r14, r31
 b78:	f1 e0       	ldi	r31, 0x01	; 1
 b7a:	ff 2e       	mov	r15, r31
 b7c:	f0 2d       	mov	r31, r0
 b7e:	dd 24       	eor	r13, r13
 b80:	d3 94       	inc	r13
 b82:	f7 01       	movw	r30, r14
 b84:	80 81       	ld	r24, Z
 b86:	81 11       	cpse	r24, r1
 b88:	c0 cf       	rjmp	.-128    	; 0xb0a <xTaskResumeAll+0x30>
 b8a:	cd 2b       	or	r28, r29
 b8c:	11 f0       	breq	.+4      	; 0xb92 <xTaskResumeAll+0xb8>
 b8e:	0e 94 3c 03 	call	0x678	; 0x678 <prvResetNextTaskUnblockTime>
 b92:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 b96:	cc 23       	and	r28, r28
 b98:	51 f0       	breq	.+20     	; 0xbae <xTaskResumeAll+0xd4>
 b9a:	d1 e0       	ldi	r29, 0x01	; 1
 b9c:	0e 94 b2 04 	call	0x964	; 0x964 <xTaskIncrementTick>
 ba0:	81 11       	cpse	r24, r1
 ba2:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 ba6:	c1 50       	subi	r28, 0x01	; 1
 ba8:	c9 f7       	brne	.-14     	; 0xb9c <xTaskResumeAll+0xc2>
 baa:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 bae:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 bb2:	88 23       	and	r24, r24
 bb4:	31 f0       	breq	.+12     	; 0xbc2 <xTaskResumeAll+0xe8>
 bb6:	0e 94 84 02 	call	0x508	; 0x508 <vPortYield>
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <xTaskResumeAll+0xea>
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <xTaskResumeAll+0xea>
 bc2:	80 e0       	ldi	r24, 0x00	; 0
 bc4:	0f 90       	pop	r0
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	df 91       	pop	r29
 bca:	cf 91       	pop	r28
 bcc:	1f 91       	pop	r17
 bce:	0f 91       	pop	r16
 bd0:	ff 90       	pop	r15
 bd2:	ef 90       	pop	r14
 bd4:	df 90       	pop	r13
 bd6:	08 95       	ret

00000bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 bd8:	cf 93       	push	r28
 bda:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 bdc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 be0:	88 23       	and	r24, r24
 be2:	21 f0       	breq	.+8      	; 0xbec <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 bea:	8e c0       	rjmp	.+284    	; 0xd08 <vTaskSwitchContext+0x130>
	}
	else
	{
		xYieldPending = pdFALSE;
 bec:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 bf0:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
 bf4:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 bf8:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 bfc:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c00:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 c04:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c08:	93 96       	adiw	r26, 0x23	; 35
 c0a:	6d 91       	ld	r22, X+
 c0c:	7c 91       	ld	r23, X
 c0e:	94 97       	sbiw	r26, 0x24	; 36
 c10:	80 81       	ld	r24, Z
 c12:	91 81       	ldd	r25, Z+1	; 0x01
 c14:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 c18:	9a a3       	std	Y+34, r25	; 0x22
 c1a:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 c1c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 c20:	82 2f       	mov	r24, r18
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	fc 01       	movw	r30, r24
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	ee 0f       	add	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	e8 0f       	add	r30, r24
 c34:	f9 1f       	adc	r31, r25
 c36:	e1 5c       	subi	r30, 0xC1	; 193
 c38:	fe 4f       	sbci	r31, 0xFE	; 254
 c3a:	30 81       	ld	r19, Z
 c3c:	31 11       	cpse	r19, r1
 c3e:	11 c0       	rjmp	.+34     	; 0xc62 <vTaskSwitchContext+0x8a>
 c40:	21 50       	subi	r18, 0x01	; 1
 c42:	82 2f       	mov	r24, r18
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	fc 01       	movw	r30, r24
 c48:	ee 0f       	add	r30, r30
 c4a:	ff 1f       	adc	r31, r31
 c4c:	ee 0f       	add	r30, r30
 c4e:	ff 1f       	adc	r31, r31
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	e8 0f       	add	r30, r24
 c56:	f9 1f       	adc	r31, r25
 c58:	e1 5c       	subi	r30, 0xC1	; 193
 c5a:	fe 4f       	sbci	r31, 0xFE	; 254
 c5c:	30 81       	ld	r19, Z
 c5e:	33 23       	and	r19, r19
 c60:	79 f3       	breq	.-34     	; 0xc40 <vTaskSwitchContext+0x68>
 c62:	ac 01       	movw	r20, r24
 c64:	44 0f       	add	r20, r20
 c66:	55 1f       	adc	r21, r21
 c68:	44 0f       	add	r20, r20
 c6a:	55 1f       	adc	r21, r21
 c6c:	44 0f       	add	r20, r20
 c6e:	55 1f       	adc	r21, r21
 c70:	48 0f       	add	r20, r24
 c72:	59 1f       	adc	r21, r25
 c74:	da 01       	movw	r26, r20
 c76:	a1 5c       	subi	r26, 0xC1	; 193
 c78:	be 4f       	sbci	r27, 0xFE	; 254
 c7a:	11 96       	adiw	r26, 0x01	; 1
 c7c:	ed 91       	ld	r30, X+
 c7e:	fc 91       	ld	r31, X
 c80:	12 97       	sbiw	r26, 0x02	; 2
 c82:	02 80       	ldd	r0, Z+2	; 0x02
 c84:	f3 81       	ldd	r31, Z+3	; 0x03
 c86:	e0 2d       	mov	r30, r0
 c88:	12 96       	adiw	r26, 0x02	; 2
 c8a:	fc 93       	st	X, r31
 c8c:	ee 93       	st	-X, r30
 c8e:	11 97       	sbiw	r26, 0x01	; 1
 c90:	4e 5b       	subi	r20, 0xBE	; 190
 c92:	5e 4f       	sbci	r21, 0xFE	; 254
 c94:	e4 17       	cp	r30, r20
 c96:	f5 07       	cpc	r31, r21
 c98:	29 f4       	brne	.+10     	; 0xca4 <vTaskSwitchContext+0xcc>
 c9a:	42 81       	ldd	r20, Z+2	; 0x02
 c9c:	53 81       	ldd	r21, Z+3	; 0x03
 c9e:	fd 01       	movw	r30, r26
 ca0:	52 83       	std	Z+2, r21	; 0x02
 ca2:	41 83       	std	Z+1, r20	; 0x01
 ca4:	fc 01       	movw	r30, r24
 ca6:	ee 0f       	add	r30, r30
 ca8:	ff 1f       	adc	r31, r31
 caa:	ee 0f       	add	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	ee 0f       	add	r30, r30
 cb0:	ff 1f       	adc	r31, r31
 cb2:	8e 0f       	add	r24, r30
 cb4:	9f 1f       	adc	r25, r31
 cb6:	fc 01       	movw	r30, r24
 cb8:	e1 5c       	subi	r30, 0xC1	; 193
 cba:	fe 4f       	sbci	r31, 0xFE	; 254
 cbc:	01 80       	ldd	r0, Z+1	; 0x01
 cbe:	f2 81       	ldd	r31, Z+2	; 0x02
 cc0:	e0 2d       	mov	r30, r0
 cc2:	86 81       	ldd	r24, Z+6	; 0x06
 cc4:	97 81       	ldd	r25, Z+7	; 0x07
 cc6:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 cca:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 cce:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 cd2:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 cd6:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 cda:	c1 a1       	ldd	r28, Z+33	; 0x21
 cdc:	d2 a1       	ldd	r29, Z+34	; 0x22
 cde:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 ce2:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ce6:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 cea:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 cee:	93 96       	adiw	r26, 0x23	; 35
 cf0:	6d 91       	ld	r22, X+
 cf2:	7c 91       	ld	r23, X
 cf4:	94 97       	sbiw	r26, 0x24	; 36
 cf6:	80 81       	ld	r24, Z
 cf8:	91 81       	ldd	r25, Z+1	; 0x01
 cfa:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 cfe:	c8 17       	cp	r28, r24
 d00:	d9 07       	cpc	r29, r25
 d02:	11 f4       	brne	.+4      	; 0xd08 <vTaskSwitchContext+0x130>
 d04:	0e 94 c0 06 	call	0xd80	; 0xd80 <vApplicationTaskChecksumHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 d08:	df 91       	pop	r29
 d0a:	cf 91       	pop	r28
 d0c:	08 95       	ret

00000d0e <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	00 d0       	rcall	.+0      	; 0xd14 <_Z7task_txPv+0x6>
 d14:	cd b7       	in	r28, 0x3d	; 61
 d16:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
 d18:	8d e2       	ldi	r24, 0x2D	; 45
 d1a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 d1c:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
 d1e:	82 e3       	ldi	r24, 0x32	; 50
 d20:	89 83       	std	Y+1, r24	; 0x01
 d22:	fe cf       	rjmp	.-4      	; 0xd20 <_Z7task_txPv+0x12>

00000d24 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
 d24:	cf 93       	push	r28
 d26:	df 93       	push	r29
 d28:	00 d0       	rcall	.+0      	; 0xd2a <_Z7task_rxPv+0x6>
 d2a:	cd b7       	in	r28, 0x3d	; 61
 d2c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
 d2e:	85 e5       	ldi	r24, 0x55	; 85
 d30:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 d32:	8d e2       	ldi	r24, 0x2D	; 45
 d34:	8a 83       	std	Y+2, r24	; 0x02
 d36:	ff cf       	rjmp	.-2      	; 0xd36 <_Z7task_rxPv+0x12>

00000d38 <main>:
volatile uint16_t globa;
uint16_t globa1;


int main(void)
{
 d38:	ef 92       	push	r14
 d3a:	ff 92       	push	r15
 d3c:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 d3e:	8f ef       	ldi	r24, 0xFF	; 255
 d40:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 d42:	e1 2c       	mov	r14, r1
 d44:	f1 2c       	mov	r15, r1
 d46:	01 e0       	ldi	r16, 0x01	; 1
 d48:	20 e0       	ldi	r18, 0x00	; 0
 d4a:	30 e0       	ldi	r19, 0x00	; 0
 d4c:	44 e6       	ldi	r20, 0x64	; 100
 d4e:	50 e0       	ldi	r21, 0x00	; 0
 d50:	6b e0       	ldi	r22, 0x0B	; 11
 d52:	71 e0       	ldi	r23, 0x01	; 1
 d54:	87 e8       	ldi	r24, 0x87	; 135
 d56:	96 e0       	ldi	r25, 0x06	; 6
 d58:	0e 94 63 03 	call	0x6c6	; 0x6c6 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 d5c:	20 e0       	ldi	r18, 0x00	; 0
 d5e:	30 e0       	ldi	r19, 0x00	; 0
 d60:	44 e6       	ldi	r20, 0x64	; 100
 d62:	50 e0       	ldi	r21, 0x00	; 0
 d64:	6e e0       	ldi	r22, 0x0E	; 14
 d66:	71 e0       	ldi	r23, 0x01	; 1
 d68:	82 e9       	ldi	r24, 0x92	; 146
 d6a:	96 e0       	ldi	r25, 0x06	; 6
 d6c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <xTaskCreate>
	vTaskStartScheduler();
 d70:	0e 94 82 04 	call	0x904	; 0x904 <vTaskStartScheduler>
	
	return 0;
}
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0f 91       	pop	r16
 d7a:	ff 90       	pop	r15
 d7c:	ef 90       	pop	r14
 d7e:	08 95       	ret

00000d80 <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
 d80:	81 e0       	ldi	r24, 0x01	; 1
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
 d88:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
 d8c:	08 95       	ret

00000d8e <malloc>:
 d8e:	0f 93       	push	r16
 d90:	1f 93       	push	r17
 d92:	cf 93       	push	r28
 d94:	df 93       	push	r29
 d96:	82 30       	cpi	r24, 0x02	; 2
 d98:	91 05       	cpc	r25, r1
 d9a:	10 f4       	brcc	.+4      	; 0xda0 <malloc+0x12>
 d9c:	82 e0       	ldi	r24, 0x02	; 2
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
 da4:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
 da8:	20 e0       	ldi	r18, 0x00	; 0
 daa:	30 e0       	ldi	r19, 0x00	; 0
 dac:	a0 e0       	ldi	r26, 0x00	; 0
 dae:	b0 e0       	ldi	r27, 0x00	; 0
 db0:	30 97       	sbiw	r30, 0x00	; 0
 db2:	19 f1       	breq	.+70     	; 0xdfa <malloc+0x6c>
 db4:	40 81       	ld	r20, Z
 db6:	51 81       	ldd	r21, Z+1	; 0x01
 db8:	02 81       	ldd	r16, Z+2	; 0x02
 dba:	13 81       	ldd	r17, Z+3	; 0x03
 dbc:	48 17       	cp	r20, r24
 dbe:	59 07       	cpc	r21, r25
 dc0:	c8 f0       	brcs	.+50     	; 0xdf4 <malloc+0x66>
 dc2:	84 17       	cp	r24, r20
 dc4:	95 07       	cpc	r25, r21
 dc6:	69 f4       	brne	.+26     	; 0xde2 <malloc+0x54>
 dc8:	10 97       	sbiw	r26, 0x00	; 0
 dca:	31 f0       	breq	.+12     	; 0xdd8 <malloc+0x4a>
 dcc:	12 96       	adiw	r26, 0x02	; 2
 dce:	0c 93       	st	X, r16
 dd0:	12 97       	sbiw	r26, 0x02	; 2
 dd2:	13 96       	adiw	r26, 0x03	; 3
 dd4:	1c 93       	st	X, r17
 dd6:	27 c0       	rjmp	.+78     	; 0xe26 <malloc+0x98>
 dd8:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
 ddc:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
 de0:	22 c0       	rjmp	.+68     	; 0xe26 <malloc+0x98>
 de2:	21 15       	cp	r18, r1
 de4:	31 05       	cpc	r19, r1
 de6:	19 f0       	breq	.+6      	; 0xdee <malloc+0x60>
 de8:	42 17       	cp	r20, r18
 dea:	53 07       	cpc	r21, r19
 dec:	18 f4       	brcc	.+6      	; 0xdf4 <malloc+0x66>
 dee:	9a 01       	movw	r18, r20
 df0:	bd 01       	movw	r22, r26
 df2:	ef 01       	movw	r28, r30
 df4:	df 01       	movw	r26, r30
 df6:	f8 01       	movw	r30, r16
 df8:	db cf       	rjmp	.-74     	; 0xdb0 <malloc+0x22>
 dfa:	21 15       	cp	r18, r1
 dfc:	31 05       	cpc	r19, r1
 dfe:	f9 f0       	breq	.+62     	; 0xe3e <malloc+0xb0>
 e00:	28 1b       	sub	r18, r24
 e02:	39 0b       	sbc	r19, r25
 e04:	24 30       	cpi	r18, 0x04	; 4
 e06:	31 05       	cpc	r19, r1
 e08:	80 f4       	brcc	.+32     	; 0xe2a <malloc+0x9c>
 e0a:	8a 81       	ldd	r24, Y+2	; 0x02
 e0c:	9b 81       	ldd	r25, Y+3	; 0x03
 e0e:	61 15       	cp	r22, r1
 e10:	71 05       	cpc	r23, r1
 e12:	21 f0       	breq	.+8      	; 0xe1c <malloc+0x8e>
 e14:	fb 01       	movw	r30, r22
 e16:	93 83       	std	Z+3, r25	; 0x03
 e18:	82 83       	std	Z+2, r24	; 0x02
 e1a:	04 c0       	rjmp	.+8      	; 0xe24 <malloc+0x96>
 e1c:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
 e20:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
 e24:	fe 01       	movw	r30, r28
 e26:	32 96       	adiw	r30, 0x02	; 2
 e28:	44 c0       	rjmp	.+136    	; 0xeb2 <malloc+0x124>
 e2a:	fe 01       	movw	r30, r28
 e2c:	e2 0f       	add	r30, r18
 e2e:	f3 1f       	adc	r31, r19
 e30:	81 93       	st	Z+, r24
 e32:	91 93       	st	Z+, r25
 e34:	22 50       	subi	r18, 0x02	; 2
 e36:	31 09       	sbc	r19, r1
 e38:	39 83       	std	Y+1, r19	; 0x01
 e3a:	28 83       	st	Y, r18
 e3c:	3a c0       	rjmp	.+116    	; 0xeb2 <malloc+0x124>
 e3e:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 e42:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 e46:	23 2b       	or	r18, r19
 e48:	41 f4       	brne	.+16     	; 0xe5a <malloc+0xcc>
 e4a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 e4e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 e52:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
 e56:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
 e5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 e5e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 e62:	21 15       	cp	r18, r1
 e64:	31 05       	cpc	r19, r1
 e66:	41 f4       	brne	.+16     	; 0xe78 <malloc+0xea>
 e68:	2d b7       	in	r18, 0x3d	; 61
 e6a:	3e b7       	in	r19, 0x3e	; 62
 e6c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 e70:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 e74:	24 1b       	sub	r18, r20
 e76:	35 0b       	sbc	r19, r21
 e78:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
 e7c:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
 e80:	e2 17       	cp	r30, r18
 e82:	f3 07       	cpc	r31, r19
 e84:	a0 f4       	brcc	.+40     	; 0xeae <malloc+0x120>
 e86:	2e 1b       	sub	r18, r30
 e88:	3f 0b       	sbc	r19, r31
 e8a:	28 17       	cp	r18, r24
 e8c:	39 07       	cpc	r19, r25
 e8e:	78 f0       	brcs	.+30     	; 0xeae <malloc+0x120>
 e90:	ac 01       	movw	r20, r24
 e92:	4e 5f       	subi	r20, 0xFE	; 254
 e94:	5f 4f       	sbci	r21, 0xFF	; 255
 e96:	24 17       	cp	r18, r20
 e98:	35 07       	cpc	r19, r21
 e9a:	48 f0       	brcs	.+18     	; 0xeae <malloc+0x120>
 e9c:	4e 0f       	add	r20, r30
 e9e:	5f 1f       	adc	r21, r31
 ea0:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
 ea4:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
 ea8:	81 93       	st	Z+, r24
 eaa:	91 93       	st	Z+, r25
 eac:	02 c0       	rjmp	.+4      	; 0xeb2 <malloc+0x124>
 eae:	e0 e0       	ldi	r30, 0x00	; 0
 eb0:	f0 e0       	ldi	r31, 0x00	; 0
 eb2:	cf 01       	movw	r24, r30
 eb4:	df 91       	pop	r29
 eb6:	cf 91       	pop	r28
 eb8:	1f 91       	pop	r17
 eba:	0f 91       	pop	r16
 ebc:	08 95       	ret

00000ebe <free>:
 ebe:	cf 93       	push	r28
 ec0:	df 93       	push	r29
 ec2:	00 97       	sbiw	r24, 0x00	; 0
 ec4:	09 f4       	brne	.+2      	; 0xec8 <free+0xa>
 ec6:	81 c0       	rjmp	.+258    	; 0xfca <free+0x10c>
 ec8:	fc 01       	movw	r30, r24
 eca:	32 97       	sbiw	r30, 0x02	; 2
 ecc:	13 82       	std	Z+3, r1	; 0x03
 ece:	12 82       	std	Z+2, r1	; 0x02
 ed0:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
 ed4:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
 ed8:	10 97       	sbiw	r26, 0x00	; 0
 eda:	81 f4       	brne	.+32     	; 0xefc <free+0x3e>
 edc:	20 81       	ld	r18, Z
 ede:	31 81       	ldd	r19, Z+1	; 0x01
 ee0:	82 0f       	add	r24, r18
 ee2:	93 1f       	adc	r25, r19
 ee4:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 ee8:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 eec:	28 17       	cp	r18, r24
 eee:	39 07       	cpc	r19, r25
 ef0:	51 f5       	brne	.+84     	; 0xf46 <free+0x88>
 ef2:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
 ef6:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
 efa:	67 c0       	rjmp	.+206    	; 0xfca <free+0x10c>
 efc:	ed 01       	movw	r28, r26
 efe:	20 e0       	ldi	r18, 0x00	; 0
 f00:	30 e0       	ldi	r19, 0x00	; 0
 f02:	ce 17       	cp	r28, r30
 f04:	df 07       	cpc	r29, r31
 f06:	40 f4       	brcc	.+16     	; 0xf18 <free+0x5a>
 f08:	4a 81       	ldd	r20, Y+2	; 0x02
 f0a:	5b 81       	ldd	r21, Y+3	; 0x03
 f0c:	9e 01       	movw	r18, r28
 f0e:	41 15       	cp	r20, r1
 f10:	51 05       	cpc	r21, r1
 f12:	f1 f0       	breq	.+60     	; 0xf50 <free+0x92>
 f14:	ea 01       	movw	r28, r20
 f16:	f5 cf       	rjmp	.-22     	; 0xf02 <free+0x44>
 f18:	d3 83       	std	Z+3, r29	; 0x03
 f1a:	c2 83       	std	Z+2, r28	; 0x02
 f1c:	40 81       	ld	r20, Z
 f1e:	51 81       	ldd	r21, Z+1	; 0x01
 f20:	84 0f       	add	r24, r20
 f22:	95 1f       	adc	r25, r21
 f24:	c8 17       	cp	r28, r24
 f26:	d9 07       	cpc	r29, r25
 f28:	59 f4       	brne	.+22     	; 0xf40 <free+0x82>
 f2a:	88 81       	ld	r24, Y
 f2c:	99 81       	ldd	r25, Y+1	; 0x01
 f2e:	84 0f       	add	r24, r20
 f30:	95 1f       	adc	r25, r21
 f32:	02 96       	adiw	r24, 0x02	; 2
 f34:	91 83       	std	Z+1, r25	; 0x01
 f36:	80 83       	st	Z, r24
 f38:	8a 81       	ldd	r24, Y+2	; 0x02
 f3a:	9b 81       	ldd	r25, Y+3	; 0x03
 f3c:	93 83       	std	Z+3, r25	; 0x03
 f3e:	82 83       	std	Z+2, r24	; 0x02
 f40:	21 15       	cp	r18, r1
 f42:	31 05       	cpc	r19, r1
 f44:	29 f4       	brne	.+10     	; 0xf50 <free+0x92>
 f46:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
 f4a:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
 f4e:	3d c0       	rjmp	.+122    	; 0xfca <free+0x10c>
 f50:	e9 01       	movw	r28, r18
 f52:	fb 83       	std	Y+3, r31	; 0x03
 f54:	ea 83       	std	Y+2, r30	; 0x02
 f56:	49 91       	ld	r20, Y+
 f58:	59 91       	ld	r21, Y+
 f5a:	c4 0f       	add	r28, r20
 f5c:	d5 1f       	adc	r29, r21
 f5e:	ec 17       	cp	r30, r28
 f60:	fd 07       	cpc	r31, r29
 f62:	61 f4       	brne	.+24     	; 0xf7c <free+0xbe>
 f64:	80 81       	ld	r24, Z
 f66:	91 81       	ldd	r25, Z+1	; 0x01
 f68:	84 0f       	add	r24, r20
 f6a:	95 1f       	adc	r25, r21
 f6c:	02 96       	adiw	r24, 0x02	; 2
 f6e:	e9 01       	movw	r28, r18
 f70:	99 83       	std	Y+1, r25	; 0x01
 f72:	88 83       	st	Y, r24
 f74:	82 81       	ldd	r24, Z+2	; 0x02
 f76:	93 81       	ldd	r25, Z+3	; 0x03
 f78:	9b 83       	std	Y+3, r25	; 0x03
 f7a:	8a 83       	std	Y+2, r24	; 0x02
 f7c:	e0 e0       	ldi	r30, 0x00	; 0
 f7e:	f0 e0       	ldi	r31, 0x00	; 0
 f80:	12 96       	adiw	r26, 0x02	; 2
 f82:	8d 91       	ld	r24, X+
 f84:	9c 91       	ld	r25, X
 f86:	13 97       	sbiw	r26, 0x03	; 3
 f88:	00 97       	sbiw	r24, 0x00	; 0
 f8a:	19 f0       	breq	.+6      	; 0xf92 <free+0xd4>
 f8c:	fd 01       	movw	r30, r26
 f8e:	dc 01       	movw	r26, r24
 f90:	f7 cf       	rjmp	.-18     	; 0xf80 <free+0xc2>
 f92:	8d 91       	ld	r24, X+
 f94:	9c 91       	ld	r25, X
 f96:	11 97       	sbiw	r26, 0x01	; 1
 f98:	9d 01       	movw	r18, r26
 f9a:	2e 5f       	subi	r18, 0xFE	; 254
 f9c:	3f 4f       	sbci	r19, 0xFF	; 255
 f9e:	82 0f       	add	r24, r18
 fa0:	93 1f       	adc	r25, r19
 fa2:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 fa6:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 faa:	28 17       	cp	r18, r24
 fac:	39 07       	cpc	r19, r25
 fae:	69 f4       	brne	.+26     	; 0xfca <free+0x10c>
 fb0:	30 97       	sbiw	r30, 0x00	; 0
 fb2:	29 f4       	brne	.+10     	; 0xfbe <free+0x100>
 fb4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
 fb8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
 fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <free+0x104>
 fbe:	13 82       	std	Z+3, r1	; 0x03
 fc0:	12 82       	std	Z+2, r1	; 0x02
 fc2:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
 fc6:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
 fca:	df 91       	pop	r29
 fcc:	cf 91       	pop	r28
 fce:	08 95       	ret

00000fd0 <memset>:
 fd0:	dc 01       	movw	r26, r24
 fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <memset+0x6>
 fd4:	6d 93       	st	X+, r22
 fd6:	41 50       	subi	r20, 0x01	; 1
 fd8:	50 40       	sbci	r21, 0x00	; 0
 fda:	e0 f7       	brcc	.-8      	; 0xfd4 <memset+0x4>
 fdc:	08 95       	ret

00000fde <_exit>:
 fde:	f8 94       	cli

00000fe0 <__stop_program>:
 fe0:	ff cf       	rjmp	.-2      	; 0xfe0 <__stop_program>
