
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000dde  00000e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800112  00800112  00000e84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b4f  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da6  00000000  00000000  00003cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018af  00000000  00000000  00004a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00006308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000117d  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f1  00000000  00000000  00007b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000a13a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 05 	call	0xb34	; 0xb34 <main>
  9e:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
#include "checksum.h"

#if( configSUPPORT_TASK_CHECKSUM==1 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	ac 01       	movw	r20, r24
  a8:	fb 01       	movw	r30, r22
	volatile StackType_t* i;
	uint16_t xChecksum = 0;
	for(i = pxEndOfStack ;i != pxStartOfStack ;i+=portSTACK_GROWTH)
  aa:	68 17       	cp	r22, r24
  ac:	79 07       	cpc	r23, r25
  ae:	49 f0       	breq	.+18     	; 0xc2 <uxChecksumGetTaskChecksum+0x1c>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
	{
		xChecksum^=*i;
  b4:	20 81       	ld	r18, Z
  b6:	82 27       	eor	r24, r18

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
	volatile StackType_t* i;
	uint16_t xChecksum = 0;
	for(i = pxEndOfStack ;i != pxStartOfStack ;i+=portSTACK_GROWTH)
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	4e 17       	cp	r20, r30
  bc:	5f 07       	cpc	r21, r31
  be:	d1 f7       	brne	.-12     	; 0xb4 <uxChecksumGetTaskChecksum+0xe>
  c0:	08 95       	ret
#if( configSUPPORT_TASK_CHECKSUM==1 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
	volatile StackType_t* i;
	uint16_t xChecksum = 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	for(i = pxEndOfStack ;i != pxStartOfStack ;i+=portSTACK_GROWTH)
	{
		xChecksum^=*i;
	}
	return (uint16_t)xChecksum;
}
  c6:	08 95       	ret

000000c8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
  ce:	0e 94 aa 03 	call	0x754	; 0x754 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <malloc>
  d8:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  da:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
  de:	ce 01       	movw	r24, r28
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	if( pv )
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	41 f0       	breq	.+16     	; 0xfe <vPortFree+0x18>
  ee:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
  f0:	0e 94 aa 03 	call	0x754	; 0x754 <vTaskSuspendAll>
		{
			free( pv );
  f4:	ce 01       	movw	r24, r28
  f6:	0e 94 5d 06 	call	0xcba	; 0xcba <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  fa:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <xTaskResumeAll>
	}
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 104:	fc 01       	movw	r30, r24
 106:	03 96       	adiw	r24, 0x03	; 3
 108:	92 83       	std	Z+2, r25	; 0x02
 10a:	81 83       	std	Z+1, r24	; 0x01
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	3f ef       	ldi	r19, 0xFF	; 255
 110:	34 83       	std	Z+4, r19	; 0x04
 112:	23 83       	std	Z+3, r18	; 0x03
 114:	96 83       	std	Z+6, r25	; 0x06
 116:	85 83       	std	Z+5, r24	; 0x05
 118:	90 87       	std	Z+8, r25	; 0x08
 11a:	87 83       	std	Z+7, r24	; 0x07
 11c:	10 82       	st	Z, r1
 11e:	08 95       	ret

00000120 <vListInitialiseItem>:
 120:	fc 01       	movw	r30, r24
 122:	11 86       	std	Z+9, r1	; 0x09
 124:	10 86       	std	Z+8, r1	; 0x08
 126:	08 95       	ret

00000128 <vListInsertEnd>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	9c 01       	movw	r18, r24
 12e:	fb 01       	movw	r30, r22
 130:	dc 01       	movw	r26, r24
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	cd 91       	ld	r28, X+
 136:	dc 91       	ld	r29, X
 138:	12 97       	sbiw	r26, 0x02	; 2
 13a:	d3 83       	std	Z+3, r29	; 0x03
 13c:	c2 83       	std	Z+2, r28	; 0x02
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	9d 81       	ldd	r25, Y+5	; 0x05
 142:	95 83       	std	Z+5, r25	; 0x05
 144:	84 83       	std	Z+4, r24	; 0x04
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	9d 81       	ldd	r25, Y+5	; 0x05
 14a:	dc 01       	movw	r26, r24
 14c:	13 96       	adiw	r26, 0x03	; 3
 14e:	7c 93       	st	X, r23
 150:	6e 93       	st	-X, r22
 152:	12 97       	sbiw	r26, 0x02	; 2
 154:	7d 83       	std	Y+5, r23	; 0x05
 156:	6c 83       	std	Y+4, r22	; 0x04
 158:	31 87       	std	Z+9, r19	; 0x09
 15a:	20 87       	std	Z+8, r18	; 0x08
 15c:	f9 01       	movw	r30, r18
 15e:	80 81       	ld	r24, Z
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 83       	st	Z, r24
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 170:	a0 85       	ldd	r26, Z+8	; 0x08
 172:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 174:	c2 81       	ldd	r28, Z+2	; 0x02
 176:	d3 81       	ldd	r29, Z+3	; 0x03
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	95 81       	ldd	r25, Z+5	; 0x05
 17c:	9d 83       	std	Y+5, r25	; 0x05
 17e:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 180:	c4 81       	ldd	r28, Z+4	; 0x04
 182:	d5 81       	ldd	r29, Z+5	; 0x05
 184:	82 81       	ldd	r24, Z+2	; 0x02
 186:	93 81       	ldd	r25, Z+3	; 0x03
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	12 97       	sbiw	r26, 0x02	; 2
 194:	e8 17       	cp	r30, r24
 196:	f9 07       	cpc	r31, r25
 198:	31 f4       	brne	.+12     	; 0x1a6 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 19a:	84 81       	ldd	r24, Z+4	; 0x04
 19c:	95 81       	ldd	r25, Z+5	; 0x05
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	9c 93       	st	X, r25
 1a2:	8e 93       	st	-X, r24
 1a4:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 1a6:	11 86       	std	Z+9, r1	; 0x09
 1a8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 1aa:	8c 91       	ld	r24, X
 1ac:	81 50       	subi	r24, 0x01	; 1
 1ae:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 1b0:	8c 91       	ld	r24, X
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1b8:	31 e1       	ldi	r19, 0x11	; 17
 1ba:	fc 01       	movw	r30, r24
 1bc:	30 83       	st	Z, r19
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	22 e2       	ldi	r18, 0x22	; 34
 1c2:	20 83       	st	Z, r18
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	a3 e3       	ldi	r26, 0x33	; 51
 1c8:	a0 83       	st	Z, r26
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	60 83       	st	Z, r22
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	70 83       	st	Z, r23
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	10 82       	st	Z, r1
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	60 83       	st	Z, r22
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	10 82       	st	Z, r1
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	60 83       	st	Z, r22
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	60 83       	st	Z, r22
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	64 e0       	ldi	r22, 0x04	; 4
 1f0:	60 83       	st	Z, r22
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	60 83       	st	Z, r22
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	66 e0       	ldi	r22, 0x06	; 6
 1fc:	60 83       	st	Z, r22
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	60 83       	st	Z, r22
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	68 e0       	ldi	r22, 0x08	; 8
 208:	60 83       	st	Z, r22
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	69 e0       	ldi	r22, 0x09	; 9
 20e:	60 83       	st	Z, r22
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	60 e1       	ldi	r22, 0x10	; 16
 214:	60 83       	st	Z, r22
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	30 83       	st	Z, r19
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	32 e1       	ldi	r19, 0x12	; 18
 21e:	30 83       	st	Z, r19
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	33 e1       	ldi	r19, 0x13	; 19
 224:	30 83       	st	Z, r19
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	34 e1       	ldi	r19, 0x14	; 20
 22a:	30 83       	st	Z, r19
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	35 e1       	ldi	r19, 0x15	; 21
 230:	30 83       	st	Z, r19
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	36 e1       	ldi	r19, 0x16	; 22
 236:	30 83       	st	Z, r19
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	37 e1       	ldi	r19, 0x17	; 23
 23c:	30 83       	st	Z, r19
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	38 e1       	ldi	r19, 0x18	; 24
 242:	30 83       	st	Z, r19
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	39 e1       	ldi	r19, 0x19	; 25
 248:	30 83       	st	Z, r19
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	30 e2       	ldi	r19, 0x20	; 32
 24e:	30 83       	st	Z, r19
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	31 e2       	ldi	r19, 0x21	; 33
 254:	30 83       	st	Z, r19
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	20 83       	st	Z, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	23 e2       	ldi	r18, 0x23	; 35
 25e:	20 83       	st	Z, r18
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	40 83       	st	Z, r20
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	50 83       	st	Z, r21
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	26 e2       	ldi	r18, 0x26	; 38
 26c:	20 83       	st	Z, r18
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	27 e2       	ldi	r18, 0x27	; 39
 272:	20 83       	st	Z, r18
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	28 e2       	ldi	r18, 0x28	; 40
 278:	20 83       	st	Z, r18
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	29 e2       	ldi	r18, 0x29	; 41
 27e:	20 83       	st	Z, r18
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	20 e3       	ldi	r18, 0x30	; 48
 284:	20 83       	st	Z, r18
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	21 e3       	ldi	r18, 0x31	; 49
 28a:	20 83       	st	Z, r18
 28c:	86 97       	sbiw	r24, 0x26	; 38
 28e:	08 95       	ret

00000290 <xPortStartScheduler>:
 290:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 29a:	8b e0       	ldi	r24, 0x0B	; 11
 29c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2a0:	ef e6       	ldi	r30, 0x6F	; 111
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
 2aa:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 2ae:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 2b2:	cd 91       	ld	r28, X+
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	dd 91       	ld	r29, X+
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	5f 90       	pop	r5
 2f0:	4f 90       	pop	r4
 2f2:	3f 90       	pop	r3
 2f4:	2f 90       	pop	r2
 2f6:	1f 90       	pop	r1
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	08 95       	ret
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret

00000304 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	0f 92       	push	r0
 30c:	1f 92       	push	r1
 30e:	11 24       	eor	r1, r1
 310:	2f 92       	push	r2
 312:	3f 92       	push	r3
 314:	4f 92       	push	r4
 316:	5f 92       	push	r5
 318:	6f 92       	push	r6
 31a:	7f 92       	push	r7
 31c:	8f 92       	push	r8
 31e:	9f 92       	push	r9
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
 34c:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 350:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 354:	0d b6       	in	r0, 0x3d	; 61
 356:	0d 92       	st	X+, r0
 358:	0e b6       	in	r0, 0x3e	; 62
 35a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 35c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 360:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 364:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 368:	cd 91       	ld	r28, X+
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	dd 91       	ld	r29, X+
 36e:	de bf       	out	0x3e, r29	; 62
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	7f 90       	pop	r7
 3a2:	6f 90       	pop	r6
 3a4:	5f 90       	pop	r5
 3a6:	4f 90       	pop	r4
 3a8:	3f 90       	pop	r3
 3aa:	2f 90       	pop	r2
 3ac:	1f 90       	pop	r1
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0

	asm volatile ( "ret" );
 3b4:	08 95       	ret

000003b6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	0f 92       	push	r0
 3be:	1f 92       	push	r1
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 92       	push	r2
 3c4:	3f 92       	push	r3
 3c6:	4f 92       	push	r4
 3c8:	5f 92       	push	r5
 3ca:	6f 92       	push	r6
 3cc:	7f 92       	push	r7
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
 3fe:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 402:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 406:	0d b6       	in	r0, 0x3d	; 61
 408:	0d 92       	st	X+, r0
 40a:	0e b6       	in	r0, 0x3e	; 62
 40c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 40e:	0e 94 b0 03 	call	0x760	; 0x760 <xTaskIncrementTick>
 412:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 414:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 418:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 41c:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 420:	cd 91       	ld	r28, X+
 422:	cd bf       	out	0x3d, r28	; 61
 424:	dd 91       	ld	r29, X+
 426:	de bf       	out	0x3e, r29	; 62
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	9f 90       	pop	r9
 456:	8f 90       	pop	r8
 458:	7f 90       	pop	r7
 45a:	6f 90       	pop	r6
 45c:	5f 90       	pop	r5
 45e:	4f 90       	pop	r4
 460:	3f 90       	pop	r3
 462:	2f 90       	pop	r2
 464:	1f 90       	pop	r1
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0

	asm volatile ( "ret" );
 46c:	08 95       	ret

0000046e <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 46e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <vPortYieldFromTick>
		asm volatile ( "reti" );
 472:	18 95       	reti

00000474 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 474:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 478:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 47c:	80 81       	ld	r24, Z
 47e:	81 11       	cpse	r24, r1
 480:	07 c0       	rjmp	.+14     	; 0x490 <prvResetNextTaskUnblockTime+0x1c>
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	9f ef       	ldi	r25, 0xFF	; 255
 486:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 48a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 48e:	08 95       	ret
 490:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 494:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 498:	05 80       	ldd	r0, Z+5	; 0x05
 49a:	f6 81       	ldd	r31, Z+6	; 0x06
 49c:	e0 2d       	mov	r30, r0
 49e:	06 80       	ldd	r0, Z+6	; 0x06
 4a0:	f7 81       	ldd	r31, Z+7	; 0x07
 4a2:	e0 2d       	mov	r30, r0
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	93 81       	ldd	r25, Z+3	; 0x03
 4a8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 4ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 4b0:	08 95       	ret

000004b2 <prvIdleTask>:
 4b2:	cf e3       	ldi	r28, 0x3F	; 63
 4b4:	d1 e0       	ldi	r29, 0x01	; 1
 4b6:	88 81       	ld	r24, Y
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	e8 f3       	brcs	.-6      	; 0x4b6 <prvIdleTask+0x4>
 4bc:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 4c0:	fa cf       	rjmp	.-12     	; 0x4b6 <prvIdleTask+0x4>

000004c2 <xTaskCreate>:
 4c2:	4f 92       	push	r4
 4c4:	5f 92       	push	r5
 4c6:	6f 92       	push	r6
 4c8:	7f 92       	push	r7
 4ca:	8f 92       	push	r8
 4cc:	9f 92       	push	r9
 4ce:	af 92       	push	r10
 4d0:	bf 92       	push	r11
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	4c 01       	movw	r8, r24
 4e2:	6b 01       	movw	r12, r22
 4e4:	5a 01       	movw	r10, r20
 4e6:	29 01       	movw	r4, r18
 4e8:	ca 01       	movw	r24, r20
 4ea:	0e 94 64 00 	call	0xc8	; 0xc8 <pvPortMalloc>
 4ee:	3c 01       	movw	r6, r24
 4f0:	89 2b       	or	r24, r25
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <xTaskCreate+0x34>
 4f4:	f4 c0       	rjmp	.+488    	; 0x6de <xTaskCreate+0x21c>
 4f6:	8c e2       	ldi	r24, 0x2C	; 44
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 64 00 	call	0xc8	; 0xc8 <pvPortMalloc>
 4fe:	ec 01       	movw	r28, r24
 500:	89 2b       	or	r24, r25
 502:	c1 f0       	breq	.+48     	; 0x534 <xTaskCreate+0x72>
 504:	78 8e       	std	Y+24, r7	; 0x18
 506:	6f 8a       	std	Y+23, r6	; 0x17
 508:	a5 01       	movw	r20, r10
 50a:	65 ea       	ldi	r22, 0xA5	; 165
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	c3 01       	movw	r24, r6
 510:	0e 94 e6 06 	call	0xdcc	; 0xdcc <memset>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	a8 1a       	sub	r10, r24
 518:	b1 08       	sbc	r11, r1
 51a:	8f 89       	ldd	r24, Y+23	; 0x17
 51c:	98 8d       	ldd	r25, Y+24	; 0x18
 51e:	a8 0e       	add	r10, r24
 520:	b9 1e       	adc	r11, r25
 522:	bc a2       	std	Y+36, r11	; 0x24
 524:	ab a2       	std	Y+35, r10	; 0x23
 526:	d6 01       	movw	r26, r12
 528:	8c 91       	ld	r24, X
 52a:	89 8f       	std	Y+25, r24	; 0x19
 52c:	8c 91       	ld	r24, X
 52e:	81 11       	cpse	r24, r1
 530:	05 c0       	rjmp	.+10     	; 0x53c <xTaskCreate+0x7a>
 532:	18 c0       	rjmp	.+48     	; 0x564 <xTaskCreate+0xa2>
 534:	c3 01       	movw	r24, r6
 536:	0e 94 73 00 	call	0xe6	; 0xe6 <vPortFree>
 53a:	d1 c0       	rjmp	.+418    	; 0x6de <xTaskCreate+0x21c>
 53c:	ae 01       	movw	r20, r28
 53e:	46 5e       	subi	r20, 0xE6	; 230
 540:	5f 4f       	sbci	r21, 0xFF	; 255
 542:	f6 01       	movw	r30, r12
 544:	31 96       	adiw	r30, 0x01	; 1
 546:	b8 e0       	ldi	r27, 0x08	; 8
 548:	cb 0e       	add	r12, r27
 54a:	d1 1c       	adc	r13, r1
 54c:	cf 01       	movw	r24, r30
 54e:	21 91       	ld	r18, Z+
 550:	da 01       	movw	r26, r20
 552:	2d 93       	st	X+, r18
 554:	ad 01       	movw	r20, r26
 556:	dc 01       	movw	r26, r24
 558:	8c 91       	ld	r24, X
 55a:	88 23       	and	r24, r24
 55c:	19 f0       	breq	.+6      	; 0x564 <xTaskCreate+0xa2>
 55e:	ec 15       	cp	r30, r12
 560:	fd 05       	cpc	r31, r13
 562:	a1 f7       	brne	.-24     	; 0x54c <xTaskCreate+0x8a>
 564:	18 a2       	std	Y+32, r1	; 0x20
 566:	04 30       	cpi	r16, 0x04	; 4
 568:	08 f0       	brcs	.+2      	; 0x56c <xTaskCreate+0xaa>
 56a:	03 e0       	ldi	r16, 0x03	; 3
 56c:	0e 8b       	std	Y+22, r16	; 0x16
 56e:	0d a3       	std	Y+37, r16	; 0x25
 570:	1e a2       	std	Y+38, r1	; 0x26
 572:	6e 01       	movw	r12, r28
 574:	b2 e0       	ldi	r27, 0x02	; 2
 576:	cb 0e       	add	r12, r27
 578:	d1 1c       	adc	r13, r1
 57a:	c6 01       	movw	r24, r12
 57c:	0e 94 90 00 	call	0x120	; 0x120 <vListInitialiseItem>
 580:	ce 01       	movw	r24, r28
 582:	0c 96       	adiw	r24, 0x0c	; 12
 584:	0e 94 90 00 	call	0x120	; 0x120 <vListInitialiseItem>
 588:	d9 87       	std	Y+9, r29	; 0x09
 58a:	c8 87       	std	Y+8, r28	; 0x08
 58c:	84 e0       	ldi	r24, 0x04	; 4
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	80 1b       	sub	r24, r16
 592:	91 09       	sbc	r25, r1
 594:	9d 87       	std	Y+13, r25	; 0x0d
 596:	8c 87       	std	Y+12, r24	; 0x0c
 598:	db 8b       	std	Y+19, r29	; 0x13
 59a:	ca 8b       	std	Y+18, r28	; 0x12
 59c:	1f a2       	std	Y+39, r1	; 0x27
 59e:	18 a6       	std	Y+40, r1	; 0x28
 5a0:	19 a6       	std	Y+41, r1	; 0x29
 5a2:	1a a6       	std	Y+42, r1	; 0x2a
 5a4:	1b a6       	std	Y+43, r1	; 0x2b
 5a6:	a2 01       	movw	r20, r4
 5a8:	b4 01       	movw	r22, r8
 5aa:	c5 01       	movw	r24, r10
 5ac:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <pxPortInitialiseStack>
 5b0:	99 83       	std	Y+1, r25	; 0x01
 5b2:	88 83       	st	Y, r24
 5b4:	e1 14       	cp	r14, r1
 5b6:	f1 04       	cpc	r15, r1
 5b8:	19 f0       	breq	.+6      	; 0x5c0 <xTaskCreate+0xfe>
 5ba:	f7 01       	movw	r30, r14
 5bc:	d1 83       	std	Z+1, r29	; 0x01
 5be:	c0 83       	st	Z, r28
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	0f 92       	push	r0
 5c6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 5d0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
 5d4:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 5d8:	89 2b       	or	r24, r25
 5da:	89 f5       	brne	.+98     	; 0x63e <xTaskCreate+0x17c>
 5dc:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 5e0:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 5e4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	c9 f5       	brne	.+114    	; 0x65e <xTaskCreate+0x19c>
 5ec:	8f e3       	ldi	r24, 0x3F	; 63
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 5f4:	88 e4       	ldi	r24, 0x48	; 72
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 5fc:	81 e5       	ldi	r24, 0x51	; 81
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 604:	8a e5       	ldi	r24, 0x5A	; 90
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 60c:	86 e3       	ldi	r24, 0x36	; 54
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 614:	8d e2       	ldi	r24, 0x2D	; 45
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 61c:	80 e2       	ldi	r24, 0x20	; 32
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 82 00 	call	0x104	; 0x104 <vListInitialise>
 624:	86 e3       	ldi	r24, 0x36	; 54
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
 62c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
 630:	8d e2       	ldi	r24, 0x2D	; 45
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 638:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 63c:	10 c0       	rjmp	.+32     	; 0x65e <xTaskCreate+0x19c>
 63e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 642:	81 11       	cpse	r24, r1
 644:	0c c0       	rjmp	.+24     	; 0x65e <xTaskCreate+0x19c>
 646:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 64a:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 64e:	96 89       	ldd	r25, Z+22	; 0x16
 650:	8e 89       	ldd	r24, Y+22	; 0x16
 652:	89 17       	cp	r24, r25
 654:	20 f0       	brcs	.+8      	; 0x65e <xTaskCreate+0x19c>
 656:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 65a:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 65e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 668:	e0 90 63 01 	lds	r14, 0x0163	; 0x800163 <pxCurrentTCB>
 66c:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 670:	6b a1       	ldd	r22, Y+35	; 0x23
 672:	7c a1       	ldd	r23, Y+36	; 0x24
 674:	88 81       	ld	r24, Y
 676:	99 81       	ldd	r25, Y+1	; 0x01
 678:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 67c:	d7 01       	movw	r26, r14
 67e:	92 96       	adiw	r26, 0x22	; 34
 680:	9c 93       	st	X, r25
 682:	8e 93       	st	-X, r24
 684:	91 97       	sbiw	r26, 0x21	; 33
 686:	8e 89       	ldd	r24, Y+22	; 0x16
 688:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 68c:	98 17       	cp	r25, r24
 68e:	10 f4       	brcc	.+4      	; 0x694 <xTaskCreate+0x1d2>
 690:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	9c 01       	movw	r18, r24
 698:	22 0f       	add	r18, r18
 69a:	33 1f       	adc	r19, r19
 69c:	22 0f       	add	r18, r18
 69e:	33 1f       	adc	r19, r19
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	82 0f       	add	r24, r18
 6a6:	93 1f       	adc	r25, r19
 6a8:	b6 01       	movw	r22, r12
 6aa:	81 5c       	subi	r24, 0xC1	; 193
 6ac:	9e 4f       	sbci	r25, 0xFE	; 254
 6ae:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 6ba:	88 23       	and	r24, r24
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <xTaskCreate+0x214>
 6be:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 6c2:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 6c6:	96 89       	ldd	r25, Z+22	; 0x16
 6c8:	8e 89       	ldd	r24, Y+22	; 0x16
 6ca:	98 17       	cp	r25, r24
 6cc:	30 f4       	brcc	.+12     	; 0x6da <xTaskCreate+0x218>
 6ce:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <xTaskCreate+0x21e>
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <xTaskCreate+0x21e>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <xTaskCreate+0x21e>
 6de:	8f ef       	ldi	r24, 0xFF	; 255
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	9f 90       	pop	r9
 6f4:	8f 90       	pop	r8
 6f6:	7f 90       	pop	r7
 6f8:	6f 90       	pop	r6
 6fa:	5f 90       	pop	r5
 6fc:	4f 90       	pop	r4
 6fe:	08 95       	ret

00000700 <vTaskStartScheduler>:
 700:	ef 92       	push	r14
 702:	ff 92       	push	r15
 704:	0f 93       	push	r16
 706:	0f 2e       	mov	r0, r31
 708:	f3 e1       	ldi	r31, 0x13	; 19
 70a:	ef 2e       	mov	r14, r31
 70c:	f1 e0       	ldi	r31, 0x01	; 1
 70e:	ff 2e       	mov	r15, r31
 710:	f0 2d       	mov	r31, r0
 712:	00 e0       	ldi	r16, 0x00	; 0
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	44 e6       	ldi	r20, 0x64	; 100
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	66 e0       	ldi	r22, 0x06	; 6
 71e:	71 e0       	ldi	r23, 0x01	; 1
 720:	89 e5       	ldi	r24, 0x59	; 89
 722:	92 e0       	ldi	r25, 0x02	; 2
 724:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTaskCreate>
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	81 f4       	brne	.+32     	; 0x74c <vTaskStartScheduler+0x4c>
 72c:	f8 94       	cli
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	9f ef       	ldi	r25, 0xFF	; 255
 732:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 736:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 740:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 744:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 748:	0e 94 48 01 	call	0x290	; 0x290 <xPortStartScheduler>
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	08 95       	ret

00000754 <vTaskSuspendAll>:
 754:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 758:	8f 5f       	subi	r24, 0xFF	; 255
 75a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 75e:	08 95       	ret

00000760 <xTaskIncrementTick>:
 760:	cf 92       	push	r12
 762:	df 92       	push	r13
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 774:	81 11       	cpse	r24, r1
 776:	99 c0       	rjmp	.+306    	; 0x8aa <xTaskIncrementTick+0x14a>
 778:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 77c:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	e8 1a       	sub	r14, r24
 784:	f8 0a       	sbc	r15, r24
 786:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 78a:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 78e:	e1 14       	cp	r14, r1
 790:	f1 04       	cpc	r15, r1
 792:	b9 f4       	brne	.+46     	; 0x7c2 <xTaskIncrementTick+0x62>
 794:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
 798:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 79c:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
 7a0:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 7a4:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
 7a8:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
 7ac:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 7b0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 7b4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 7be:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 7c2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 7c6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 7ca:	e8 16       	cp	r14, r24
 7cc:	f9 06       	cpc	r15, r25
 7ce:	10 f4       	brcc	.+4      	; 0x7d4 <xTaskIncrementTick+0x74>
 7d0:	d1 2c       	mov	r13, r1
 7d2:	53 c0       	rjmp	.+166    	; 0x87a <xTaskIncrementTick+0x11a>
 7d4:	d1 2c       	mov	r13, r1
 7d6:	cc 24       	eor	r12, r12
 7d8:	c3 94       	inc	r12
 7da:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 7de:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 7e2:	80 81       	ld	r24, Z
 7e4:	81 11       	cpse	r24, r1
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <xTaskIncrementTick+0x96>
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	9f ef       	ldi	r25, 0xFF	; 255
 7ec:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 7f0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 7f4:	42 c0       	rjmp	.+132    	; 0x87a <xTaskIncrementTick+0x11a>
 7f6:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 7fa:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 7fe:	05 80       	ldd	r0, Z+5	; 0x05
 800:	f6 81       	ldd	r31, Z+6	; 0x06
 802:	e0 2d       	mov	r30, r0
 804:	c6 81       	ldd	r28, Z+6	; 0x06
 806:	d7 81       	ldd	r29, Z+7	; 0x07
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	9b 81       	ldd	r25, Y+3	; 0x03
 80c:	e8 16       	cp	r14, r24
 80e:	f9 06       	cpc	r15, r25
 810:	28 f4       	brcc	.+10     	; 0x81c <xTaskIncrementTick+0xbc>
 812:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 816:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 81a:	2f c0       	rjmp	.+94     	; 0x87a <xTaskIncrementTick+0x11a>
 81c:	8e 01       	movw	r16, r28
 81e:	0e 5f       	subi	r16, 0xFE	; 254
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	c8 01       	movw	r24, r16
 824:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 828:	8c 89       	ldd	r24, Y+20	; 0x14
 82a:	9d 89       	ldd	r25, Y+21	; 0x15
 82c:	89 2b       	or	r24, r25
 82e:	21 f0       	breq	.+8      	; 0x838 <xTaskIncrementTick+0xd8>
 830:	ce 01       	movw	r24, r28
 832:	0c 96       	adiw	r24, 0x0c	; 12
 834:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 838:	8e 89       	ldd	r24, Y+22	; 0x16
 83a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 83e:	98 17       	cp	r25, r24
 840:	10 f4       	brcc	.+4      	; 0x846 <xTaskIncrementTick+0xe6>
 842:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	9c 01       	movw	r18, r24
 84a:	22 0f       	add	r18, r18
 84c:	33 1f       	adc	r19, r19
 84e:	22 0f       	add	r18, r18
 850:	33 1f       	adc	r19, r19
 852:	22 0f       	add	r18, r18
 854:	33 1f       	adc	r19, r19
 856:	82 0f       	add	r24, r18
 858:	93 1f       	adc	r25, r19
 85a:	b8 01       	movw	r22, r16
 85c:	81 5c       	subi	r24, 0xC1	; 193
 85e:	9e 4f       	sbci	r25, 0xFE	; 254
 860:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 864:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 868:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 86c:	9e 89       	ldd	r25, Y+22	; 0x16
 86e:	86 89       	ldd	r24, Z+22	; 0x16
 870:	98 17       	cp	r25, r24
 872:	08 f4       	brcc	.+2      	; 0x876 <xTaskIncrementTick+0x116>
 874:	b2 cf       	rjmp	.-156    	; 0x7da <xTaskIncrementTick+0x7a>
 876:	dc 2c       	mov	r13, r12
 878:	b0 cf       	rjmp	.-160    	; 0x7da <xTaskIncrementTick+0x7a>
 87a:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 87e:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 882:	86 89       	ldd	r24, Z+22	; 0x16
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	fc 01       	movw	r30, r24
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	ee 0f       	add	r30, r30
 892:	ff 1f       	adc	r31, r31
 894:	8e 0f       	add	r24, r30
 896:	9f 1f       	adc	r25, r31
 898:	fc 01       	movw	r30, r24
 89a:	e1 5c       	subi	r30, 0xC1	; 193
 89c:	fe 4f       	sbci	r31, 0xFE	; 254
 89e:	80 81       	ld	r24, Z
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	48 f0       	brcs	.+18     	; 0x8b6 <xTaskIncrementTick+0x156>
 8a4:	dd 24       	eor	r13, r13
 8a6:	d3 94       	inc	r13
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <xTaskIncrementTick+0x156>
 8aa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 8b4:	d1 2c       	mov	r13, r1
 8b6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 8ba:	88 23       	and	r24, r24
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <xTaskIncrementTick+0x162>
 8be:	dd 24       	eor	r13, r13
 8c0:	d3 94       	inc	r13
 8c2:	8d 2d       	mov	r24, r13
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	08 95       	ret

000008d6 <xTaskResumeAll>:
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	0f 92       	push	r0
 8ea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 8ee:	81 50       	subi	r24, 0x01	; 1
 8f0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 8f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 8f8:	81 11       	cpse	r24, r1
 8fa:	5f c0       	rjmp	.+190    	; 0x9ba <__stack+0xbb>
 8fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 900:	81 11       	cpse	r24, r1
 902:	33 c0       	rjmp	.+102    	; 0x96a <__stack+0x6b>
 904:	5d c0       	rjmp	.+186    	; 0x9c0 <__stack+0xc1>
 906:	d7 01       	movw	r26, r14
 908:	15 96       	adiw	r26, 0x05	; 5
 90a:	ed 91       	ld	r30, X+
 90c:	fc 91       	ld	r31, X
 90e:	16 97       	sbiw	r26, 0x06	; 6
 910:	c6 81       	ldd	r28, Z+6	; 0x06
 912:	d7 81       	ldd	r29, Z+7	; 0x07
 914:	ce 01       	movw	r24, r28
 916:	0c 96       	adiw	r24, 0x0c	; 12
 918:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 91c:	8e 01       	movw	r16, r28
 91e:	0e 5f       	subi	r16, 0xFE	; 254
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	c8 01       	movw	r24, r16
 924:	0e 94 b5 00 	call	0x16a	; 0x16a <uxListRemove>
 928:	8e 89       	ldd	r24, Y+22	; 0x16
 92a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 92e:	98 17       	cp	r25, r24
 930:	10 f4       	brcc	.+4      	; 0x936 <__stack+0x37>
 932:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	9c 01       	movw	r18, r24
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	22 0f       	add	r18, r18
 940:	33 1f       	adc	r19, r19
 942:	22 0f       	add	r18, r18
 944:	33 1f       	adc	r19, r19
 946:	82 0f       	add	r24, r18
 948:	93 1f       	adc	r25, r19
 94a:	b8 01       	movw	r22, r16
 94c:	81 5c       	subi	r24, 0xC1	; 193
 94e:	9e 4f       	sbci	r25, 0xFE	; 254
 950:	0e 94 94 00 	call	0x128	; 0x128 <vListInsertEnd>
 954:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 958:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 95c:	9e 89       	ldd	r25, Y+22	; 0x16
 95e:	86 89       	ldd	r24, Z+22	; 0x16
 960:	98 17       	cp	r25, r24
 962:	68 f0       	brcs	.+26     	; 0x97e <__stack+0x7f>
 964:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 968:	0a c0       	rjmp	.+20     	; 0x97e <__stack+0x7f>
 96a:	c0 e0       	ldi	r28, 0x00	; 0
 96c:	d0 e0       	ldi	r29, 0x00	; 0
 96e:	0f 2e       	mov	r0, r31
 970:	f0 e2       	ldi	r31, 0x20	; 32
 972:	ef 2e       	mov	r14, r31
 974:	f1 e0       	ldi	r31, 0x01	; 1
 976:	ff 2e       	mov	r15, r31
 978:	f0 2d       	mov	r31, r0
 97a:	dd 24       	eor	r13, r13
 97c:	d3 94       	inc	r13
 97e:	f7 01       	movw	r30, r14
 980:	80 81       	ld	r24, Z
 982:	81 11       	cpse	r24, r1
 984:	c0 cf       	rjmp	.-128    	; 0x906 <__stack+0x7>
 986:	cd 2b       	or	r28, r29
 988:	11 f0       	breq	.+4      	; 0x98e <__stack+0x8f>
 98a:	0e 94 3a 02 	call	0x474	; 0x474 <prvResetNextTaskUnblockTime>
 98e:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 992:	cc 23       	and	r28, r28
 994:	51 f0       	breq	.+20     	; 0x9aa <__stack+0xab>
 996:	d1 e0       	ldi	r29, 0x01	; 1
 998:	0e 94 b0 03 	call	0x760	; 0x760 <xTaskIncrementTick>
 99c:	81 11       	cpse	r24, r1
 99e:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 9a2:	c1 50       	subi	r28, 0x01	; 1
 9a4:	c9 f7       	brne	.-14     	; 0x998 <__stack+0x99>
 9a6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 9aa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 9ae:	88 23       	and	r24, r24
 9b0:	31 f0       	breq	.+12     	; 0x9be <__stack+0xbf>
 9b2:	0e 94 82 01 	call	0x304	; 0x304 <vPortYield>
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <__stack+0xc1>
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <__stack+0xc1>
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	0f 90       	pop	r0
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	08 95       	ret

000009d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 9d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 9dc:	88 23       	and	r24, r24
 9de:	21 f0       	breq	.+8      	; 0x9e8 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 9e6:	8e c0       	rjmp	.+284    	; 0xb04 <vTaskSwitchContext+0x130>
	}
	else
	{
		xYieldPending = pdFALSE;
 9e8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 9ec:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
 9f0:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9f4:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 9f8:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9fc:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a00:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a04:	93 96       	adiw	r26, 0x23	; 35
 a06:	6d 91       	ld	r22, X+
 a08:	7c 91       	ld	r23, X
 a0a:	94 97       	sbiw	r26, 0x24	; 36
 a0c:	80 81       	ld	r24, Z
 a0e:	91 81       	ldd	r25, Z+1	; 0x01
 a10:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 a14:	9a a3       	std	Y+34, r25	; 0x22
 a16:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 a18:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 a1c:	82 2f       	mov	r24, r18
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	fc 01       	movw	r30, r24
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	ee 0f       	add	r30, r30
 a28:	ff 1f       	adc	r31, r31
 a2a:	ee 0f       	add	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	e8 0f       	add	r30, r24
 a30:	f9 1f       	adc	r31, r25
 a32:	e1 5c       	subi	r30, 0xC1	; 193
 a34:	fe 4f       	sbci	r31, 0xFE	; 254
 a36:	30 81       	ld	r19, Z
 a38:	31 11       	cpse	r19, r1
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <vTaskSwitchContext+0x8a>
 a3c:	21 50       	subi	r18, 0x01	; 1
 a3e:	82 2f       	mov	r24, r18
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	fc 01       	movw	r30, r24
 a44:	ee 0f       	add	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	ee 0f       	add	r30, r30
 a4e:	ff 1f       	adc	r31, r31
 a50:	e8 0f       	add	r30, r24
 a52:	f9 1f       	adc	r31, r25
 a54:	e1 5c       	subi	r30, 0xC1	; 193
 a56:	fe 4f       	sbci	r31, 0xFE	; 254
 a58:	30 81       	ld	r19, Z
 a5a:	33 23       	and	r19, r19
 a5c:	79 f3       	breq	.-34     	; 0xa3c <vTaskSwitchContext+0x68>
 a5e:	ac 01       	movw	r20, r24
 a60:	44 0f       	add	r20, r20
 a62:	55 1f       	adc	r21, r21
 a64:	44 0f       	add	r20, r20
 a66:	55 1f       	adc	r21, r21
 a68:	44 0f       	add	r20, r20
 a6a:	55 1f       	adc	r21, r21
 a6c:	48 0f       	add	r20, r24
 a6e:	59 1f       	adc	r21, r25
 a70:	da 01       	movw	r26, r20
 a72:	a1 5c       	subi	r26, 0xC1	; 193
 a74:	be 4f       	sbci	r27, 0xFE	; 254
 a76:	11 96       	adiw	r26, 0x01	; 1
 a78:	ed 91       	ld	r30, X+
 a7a:	fc 91       	ld	r31, X
 a7c:	12 97       	sbiw	r26, 0x02	; 2
 a7e:	02 80       	ldd	r0, Z+2	; 0x02
 a80:	f3 81       	ldd	r31, Z+3	; 0x03
 a82:	e0 2d       	mov	r30, r0
 a84:	12 96       	adiw	r26, 0x02	; 2
 a86:	fc 93       	st	X, r31
 a88:	ee 93       	st	-X, r30
 a8a:	11 97       	sbiw	r26, 0x01	; 1
 a8c:	4e 5b       	subi	r20, 0xBE	; 190
 a8e:	5e 4f       	sbci	r21, 0xFE	; 254
 a90:	e4 17       	cp	r30, r20
 a92:	f5 07       	cpc	r31, r21
 a94:	29 f4       	brne	.+10     	; 0xaa0 <vTaskSwitchContext+0xcc>
 a96:	42 81       	ldd	r20, Z+2	; 0x02
 a98:	53 81       	ldd	r21, Z+3	; 0x03
 a9a:	fd 01       	movw	r30, r26
 a9c:	52 83       	std	Z+2, r21	; 0x02
 a9e:	41 83       	std	Z+1, r20	; 0x01
 aa0:	fc 01       	movw	r30, r24
 aa2:	ee 0f       	add	r30, r30
 aa4:	ff 1f       	adc	r31, r31
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	ee 0f       	add	r30, r30
 aac:	ff 1f       	adc	r31, r31
 aae:	8e 0f       	add	r24, r30
 ab0:	9f 1f       	adc	r25, r31
 ab2:	fc 01       	movw	r30, r24
 ab4:	e1 5c       	subi	r30, 0xC1	; 193
 ab6:	fe 4f       	sbci	r31, 0xFE	; 254
 ab8:	01 80       	ldd	r0, Z+1	; 0x01
 aba:	f2 81       	ldd	r31, Z+2	; 0x02
 abc:	e0 2d       	mov	r30, r0
 abe:	86 81       	ldd	r24, Z+6	; 0x06
 ac0:	97 81       	ldd	r25, Z+7	; 0x07
 ac2:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 ac6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 aca:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 ace:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 ad2:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ad6:	c1 a1       	ldd	r28, Z+33	; 0x21
 ad8:	d2 a1       	ldd	r29, Z+34	; 0x22
 ada:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 ade:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ae2:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 ae6:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 aea:	93 96       	adiw	r26, 0x23	; 35
 aec:	6d 91       	ld	r22, X+
 aee:	7c 91       	ld	r23, X
 af0:	94 97       	sbiw	r26, 0x24	; 36
 af2:	80 81       	ld	r24, Z
 af4:	91 81       	ldd	r25, Z+1	; 0x01
 af6:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 afa:	c8 17       	cp	r28, r24
 afc:	d9 07       	cpc	r29, r25
 afe:	11 f4       	brne	.+4      	; 0xb04 <vTaskSwitchContext+0x130>
 b00:	0e 94 be 05 	call	0xb7c	; 0xb7c <vApplicationTaskChecksumHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 b04:	df 91       	pop	r29
 b06:	cf 91       	pop	r28
 b08:	08 95       	ret

00000b0a <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 b0a:	cf 93       	push	r28
 b0c:	df 93       	push	r29
 b0e:	00 d0       	rcall	.+0      	; 0xb10 <_Z7task_txPv+0x6>
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
 b14:	8d e2       	ldi	r24, 0x2D	; 45
 b16:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 b18:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
 b1a:	82 e3       	ldi	r24, 0x32	; 50
 b1c:	89 83       	std	Y+1, r24	; 0x01
 b1e:	fe cf       	rjmp	.-4      	; 0xb1c <_Z7task_txPv+0x12>

00000b20 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	00 d0       	rcall	.+0      	; 0xb26 <_Z7task_rxPv+0x6>
 b26:	cd b7       	in	r28, 0x3d	; 61
 b28:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
 b2a:	85 e5       	ldi	r24, 0x55	; 85
 b2c:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
 b2e:	8d e2       	ldi	r24, 0x2D	; 45
 b30:	8a 83       	std	Y+2, r24	; 0x02
 b32:	ff cf       	rjmp	.-2      	; 0xb32 <_Z7task_rxPv+0x12>

00000b34 <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
 b34:	ef 92       	push	r14
 b36:	ff 92       	push	r15
 b38:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 b3a:	8f ef       	ldi	r24, 0xFF	; 255
 b3c:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 b3e:	e1 2c       	mov	r14, r1
 b40:	f1 2c       	mov	r15, r1
 b42:	01 e0       	ldi	r16, 0x01	; 1
 b44:	20 e0       	ldi	r18, 0x00	; 0
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	44 e6       	ldi	r20, 0x64	; 100
 b4a:	50 e0       	ldi	r21, 0x00	; 0
 b4c:	6b e0       	ldi	r22, 0x0B	; 11
 b4e:	71 e0       	ldi	r23, 0x01	; 1
 b50:	85 e8       	ldi	r24, 0x85	; 133
 b52:	95 e0       	ldi	r25, 0x05	; 5
 b54:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 b58:	20 e0       	ldi	r18, 0x00	; 0
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	44 e6       	ldi	r20, 0x64	; 100
 b5e:	50 e0       	ldi	r21, 0x00	; 0
 b60:	6e e0       	ldi	r22, 0x0E	; 14
 b62:	71 e0       	ldi	r23, 0x01	; 1
 b64:	80 e9       	ldi	r24, 0x90	; 144
 b66:	95 e0       	ldi	r25, 0x05	; 5
 b68:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xTaskCreate>
	vTaskStartScheduler();
 b6c:	0e 94 80 03 	call	0x700	; 0x700 <vTaskStartScheduler>
	
	return 0;
}
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0f 91       	pop	r16
 b76:	ff 90       	pop	r15
 b78:	ef 90       	pop	r14
 b7a:	08 95       	ret

00000b7c <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
 b84:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
 b88:	08 95       	ret

00000b8a <malloc>:
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	82 30       	cpi	r24, 0x02	; 2
 b94:	91 05       	cpc	r25, r1
 b96:	10 f4       	brcc	.+4      	; 0xb9c <malloc+0x12>
 b98:	82 e0       	ldi	r24, 0x02	; 2
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
 ba0:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
 ba4:	20 e0       	ldi	r18, 0x00	; 0
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	a0 e0       	ldi	r26, 0x00	; 0
 baa:	b0 e0       	ldi	r27, 0x00	; 0
 bac:	30 97       	sbiw	r30, 0x00	; 0
 bae:	19 f1       	breq	.+70     	; 0xbf6 <malloc+0x6c>
 bb0:	40 81       	ld	r20, Z
 bb2:	51 81       	ldd	r21, Z+1	; 0x01
 bb4:	02 81       	ldd	r16, Z+2	; 0x02
 bb6:	13 81       	ldd	r17, Z+3	; 0x03
 bb8:	48 17       	cp	r20, r24
 bba:	59 07       	cpc	r21, r25
 bbc:	c8 f0       	brcs	.+50     	; 0xbf0 <malloc+0x66>
 bbe:	84 17       	cp	r24, r20
 bc0:	95 07       	cpc	r25, r21
 bc2:	69 f4       	brne	.+26     	; 0xbde <malloc+0x54>
 bc4:	10 97       	sbiw	r26, 0x00	; 0
 bc6:	31 f0       	breq	.+12     	; 0xbd4 <malloc+0x4a>
 bc8:	12 96       	adiw	r26, 0x02	; 2
 bca:	0c 93       	st	X, r16
 bcc:	12 97       	sbiw	r26, 0x02	; 2
 bce:	13 96       	adiw	r26, 0x03	; 3
 bd0:	1c 93       	st	X, r17
 bd2:	27 c0       	rjmp	.+78     	; 0xc22 <malloc+0x98>
 bd4:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
 bd8:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
 bdc:	22 c0       	rjmp	.+68     	; 0xc22 <malloc+0x98>
 bde:	21 15       	cp	r18, r1
 be0:	31 05       	cpc	r19, r1
 be2:	19 f0       	breq	.+6      	; 0xbea <malloc+0x60>
 be4:	42 17       	cp	r20, r18
 be6:	53 07       	cpc	r21, r19
 be8:	18 f4       	brcc	.+6      	; 0xbf0 <malloc+0x66>
 bea:	9a 01       	movw	r18, r20
 bec:	bd 01       	movw	r22, r26
 bee:	ef 01       	movw	r28, r30
 bf0:	df 01       	movw	r26, r30
 bf2:	f8 01       	movw	r30, r16
 bf4:	db cf       	rjmp	.-74     	; 0xbac <malloc+0x22>
 bf6:	21 15       	cp	r18, r1
 bf8:	31 05       	cpc	r19, r1
 bfa:	f9 f0       	breq	.+62     	; 0xc3a <malloc+0xb0>
 bfc:	28 1b       	sub	r18, r24
 bfe:	39 0b       	sbc	r19, r25
 c00:	24 30       	cpi	r18, 0x04	; 4
 c02:	31 05       	cpc	r19, r1
 c04:	80 f4       	brcc	.+32     	; 0xc26 <malloc+0x9c>
 c06:	8a 81       	ldd	r24, Y+2	; 0x02
 c08:	9b 81       	ldd	r25, Y+3	; 0x03
 c0a:	61 15       	cp	r22, r1
 c0c:	71 05       	cpc	r23, r1
 c0e:	21 f0       	breq	.+8      	; 0xc18 <malloc+0x8e>
 c10:	fb 01       	movw	r30, r22
 c12:	93 83       	std	Z+3, r25	; 0x03
 c14:	82 83       	std	Z+2, r24	; 0x02
 c16:	04 c0       	rjmp	.+8      	; 0xc20 <malloc+0x96>
 c18:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
 c1c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
 c20:	fe 01       	movw	r30, r28
 c22:	32 96       	adiw	r30, 0x02	; 2
 c24:	44 c0       	rjmp	.+136    	; 0xcae <malloc+0x124>
 c26:	fe 01       	movw	r30, r28
 c28:	e2 0f       	add	r30, r18
 c2a:	f3 1f       	adc	r31, r19
 c2c:	81 93       	st	Z+, r24
 c2e:	91 93       	st	Z+, r25
 c30:	22 50       	subi	r18, 0x02	; 2
 c32:	31 09       	sbc	r19, r1
 c34:	39 83       	std	Y+1, r19	; 0x01
 c36:	28 83       	st	Y, r18
 c38:	3a c0       	rjmp	.+116    	; 0xcae <malloc+0x124>
 c3a:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 c3e:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 c42:	23 2b       	or	r18, r19
 c44:	41 f4       	brne	.+16     	; 0xc56 <malloc+0xcc>
 c46:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c4a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c4e:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
 c52:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
 c56:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c5a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c5e:	21 15       	cp	r18, r1
 c60:	31 05       	cpc	r19, r1
 c62:	41 f4       	brne	.+16     	; 0xc74 <malloc+0xea>
 c64:	2d b7       	in	r18, 0x3d	; 61
 c66:	3e b7       	in	r19, 0x3e	; 62
 c68:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c6c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c70:	24 1b       	sub	r18, r20
 c72:	35 0b       	sbc	r19, r21
 c74:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
 c78:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
 c7c:	e2 17       	cp	r30, r18
 c7e:	f3 07       	cpc	r31, r19
 c80:	a0 f4       	brcc	.+40     	; 0xcaa <malloc+0x120>
 c82:	2e 1b       	sub	r18, r30
 c84:	3f 0b       	sbc	r19, r31
 c86:	28 17       	cp	r18, r24
 c88:	39 07       	cpc	r19, r25
 c8a:	78 f0       	brcs	.+30     	; 0xcaa <malloc+0x120>
 c8c:	ac 01       	movw	r20, r24
 c8e:	4e 5f       	subi	r20, 0xFE	; 254
 c90:	5f 4f       	sbci	r21, 0xFF	; 255
 c92:	24 17       	cp	r18, r20
 c94:	35 07       	cpc	r19, r21
 c96:	48 f0       	brcs	.+18     	; 0xcaa <malloc+0x120>
 c98:	4e 0f       	add	r20, r30
 c9a:	5f 1f       	adc	r21, r31
 c9c:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
 ca0:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
 ca4:	81 93       	st	Z+, r24
 ca6:	91 93       	st	Z+, r25
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <malloc+0x124>
 caa:	e0 e0       	ldi	r30, 0x00	; 0
 cac:	f0 e0       	ldi	r31, 0x00	; 0
 cae:	cf 01       	movw	r24, r30
 cb0:	df 91       	pop	r29
 cb2:	cf 91       	pop	r28
 cb4:	1f 91       	pop	r17
 cb6:	0f 91       	pop	r16
 cb8:	08 95       	ret

00000cba <free>:
 cba:	cf 93       	push	r28
 cbc:	df 93       	push	r29
 cbe:	00 97       	sbiw	r24, 0x00	; 0
 cc0:	09 f4       	brne	.+2      	; 0xcc4 <free+0xa>
 cc2:	81 c0       	rjmp	.+258    	; 0xdc6 <free+0x10c>
 cc4:	fc 01       	movw	r30, r24
 cc6:	32 97       	sbiw	r30, 0x02	; 2
 cc8:	13 82       	std	Z+3, r1	; 0x03
 cca:	12 82       	std	Z+2, r1	; 0x02
 ccc:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
 cd0:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
 cd4:	10 97       	sbiw	r26, 0x00	; 0
 cd6:	81 f4       	brne	.+32     	; 0xcf8 <free+0x3e>
 cd8:	20 81       	ld	r18, Z
 cda:	31 81       	ldd	r19, Z+1	; 0x01
 cdc:	82 0f       	add	r24, r18
 cde:	93 1f       	adc	r25, r19
 ce0:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 ce4:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 ce8:	28 17       	cp	r18, r24
 cea:	39 07       	cpc	r19, r25
 cec:	51 f5       	brne	.+84     	; 0xd42 <free+0x88>
 cee:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
 cf2:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
 cf6:	67 c0       	rjmp	.+206    	; 0xdc6 <free+0x10c>
 cf8:	ed 01       	movw	r28, r26
 cfa:	20 e0       	ldi	r18, 0x00	; 0
 cfc:	30 e0       	ldi	r19, 0x00	; 0
 cfe:	ce 17       	cp	r28, r30
 d00:	df 07       	cpc	r29, r31
 d02:	40 f4       	brcc	.+16     	; 0xd14 <free+0x5a>
 d04:	4a 81       	ldd	r20, Y+2	; 0x02
 d06:	5b 81       	ldd	r21, Y+3	; 0x03
 d08:	9e 01       	movw	r18, r28
 d0a:	41 15       	cp	r20, r1
 d0c:	51 05       	cpc	r21, r1
 d0e:	f1 f0       	breq	.+60     	; 0xd4c <free+0x92>
 d10:	ea 01       	movw	r28, r20
 d12:	f5 cf       	rjmp	.-22     	; 0xcfe <free+0x44>
 d14:	d3 83       	std	Z+3, r29	; 0x03
 d16:	c2 83       	std	Z+2, r28	; 0x02
 d18:	40 81       	ld	r20, Z
 d1a:	51 81       	ldd	r21, Z+1	; 0x01
 d1c:	84 0f       	add	r24, r20
 d1e:	95 1f       	adc	r25, r21
 d20:	c8 17       	cp	r28, r24
 d22:	d9 07       	cpc	r29, r25
 d24:	59 f4       	brne	.+22     	; 0xd3c <free+0x82>
 d26:	88 81       	ld	r24, Y
 d28:	99 81       	ldd	r25, Y+1	; 0x01
 d2a:	84 0f       	add	r24, r20
 d2c:	95 1f       	adc	r25, r21
 d2e:	02 96       	adiw	r24, 0x02	; 2
 d30:	91 83       	std	Z+1, r25	; 0x01
 d32:	80 83       	st	Z, r24
 d34:	8a 81       	ldd	r24, Y+2	; 0x02
 d36:	9b 81       	ldd	r25, Y+3	; 0x03
 d38:	93 83       	std	Z+3, r25	; 0x03
 d3a:	82 83       	std	Z+2, r24	; 0x02
 d3c:	21 15       	cp	r18, r1
 d3e:	31 05       	cpc	r19, r1
 d40:	29 f4       	brne	.+10     	; 0xd4c <free+0x92>
 d42:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
 d46:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
 d4a:	3d c0       	rjmp	.+122    	; 0xdc6 <free+0x10c>
 d4c:	e9 01       	movw	r28, r18
 d4e:	fb 83       	std	Y+3, r31	; 0x03
 d50:	ea 83       	std	Y+2, r30	; 0x02
 d52:	49 91       	ld	r20, Y+
 d54:	59 91       	ld	r21, Y+
 d56:	c4 0f       	add	r28, r20
 d58:	d5 1f       	adc	r29, r21
 d5a:	ec 17       	cp	r30, r28
 d5c:	fd 07       	cpc	r31, r29
 d5e:	61 f4       	brne	.+24     	; 0xd78 <free+0xbe>
 d60:	80 81       	ld	r24, Z
 d62:	91 81       	ldd	r25, Z+1	; 0x01
 d64:	84 0f       	add	r24, r20
 d66:	95 1f       	adc	r25, r21
 d68:	02 96       	adiw	r24, 0x02	; 2
 d6a:	e9 01       	movw	r28, r18
 d6c:	99 83       	std	Y+1, r25	; 0x01
 d6e:	88 83       	st	Y, r24
 d70:	82 81       	ldd	r24, Z+2	; 0x02
 d72:	93 81       	ldd	r25, Z+3	; 0x03
 d74:	9b 83       	std	Y+3, r25	; 0x03
 d76:	8a 83       	std	Y+2, r24	; 0x02
 d78:	e0 e0       	ldi	r30, 0x00	; 0
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	12 96       	adiw	r26, 0x02	; 2
 d7e:	8d 91       	ld	r24, X+
 d80:	9c 91       	ld	r25, X
 d82:	13 97       	sbiw	r26, 0x03	; 3
 d84:	00 97       	sbiw	r24, 0x00	; 0
 d86:	19 f0       	breq	.+6      	; 0xd8e <free+0xd4>
 d88:	fd 01       	movw	r30, r26
 d8a:	dc 01       	movw	r26, r24
 d8c:	f7 cf       	rjmp	.-18     	; 0xd7c <free+0xc2>
 d8e:	8d 91       	ld	r24, X+
 d90:	9c 91       	ld	r25, X
 d92:	11 97       	sbiw	r26, 0x01	; 1
 d94:	9d 01       	movw	r18, r26
 d96:	2e 5f       	subi	r18, 0xFE	; 254
 d98:	3f 4f       	sbci	r19, 0xFF	; 255
 d9a:	82 0f       	add	r24, r18
 d9c:	93 1f       	adc	r25, r19
 d9e:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 da2:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 da6:	28 17       	cp	r18, r24
 da8:	39 07       	cpc	r19, r25
 daa:	69 f4       	brne	.+26     	; 0xdc6 <free+0x10c>
 dac:	30 97       	sbiw	r30, 0x00	; 0
 dae:	29 f4       	brne	.+10     	; 0xdba <free+0x100>
 db0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
 db4:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
 db8:	02 c0       	rjmp	.+4      	; 0xdbe <free+0x104>
 dba:	13 82       	std	Z+3, r1	; 0x03
 dbc:	12 82       	std	Z+2, r1	; 0x02
 dbe:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
 dc2:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	08 95       	ret

00000dcc <memset>:
 dcc:	dc 01       	movw	r26, r24
 dce:	01 c0       	rjmp	.+2      	; 0xdd2 <memset+0x6>
 dd0:	6d 93       	st	X+, r22
 dd2:	41 50       	subi	r20, 0x01	; 1
 dd4:	50 40       	sbci	r21, 0x00	; 0
 dd6:	e0 f7       	brcc	.-8      	; 0xdd0 <memset+0x4>
 dd8:	08 95       	ret

00000dda <_exit>:
 dda:	f8 94       	cli

00000ddc <__stop_program>:
 ddc:	ff cf       	rjmp	.-2      	; 0xddc <__stop_program>
