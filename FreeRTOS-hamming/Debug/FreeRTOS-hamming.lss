
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000010b4  00001148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800112  00800112  0000115a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bee  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0a  00000000  00000000  00004022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019c2  00000000  00000000  00004e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f4  00000000  00000000  000067f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000118f  00000000  00000000  00006ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a93  00000000  00000000  00008073  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000ab06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 eb       	ldi	r30, 0xB4	; 180
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 36       	cpi	r26, 0x6B	; 107
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 05 07 	call	0xe0a	; 0xe0a <main>
      9e:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
         return uiR;
  }


ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
      a6:	9f 92       	push	r9
      a8:	af 92       	push	r10
      aa:	bf 92       	push	r11
      ac:	cf 92       	push	r12
      ae:	df 92       	push	r13
      b0:	ef 92       	push	r14
      b2:	ff 92       	push	r15
      b4:	0f 93       	push	r16
      b6:	1f 93       	push	r17
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
      bc:	00 d0       	rcall	.+0      	; 0xbe <uxChecksumGetTaskChecksum+0x18>
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	5c 01       	movw	r10, r24
	uint8_t * data_p=pxStartOfStack+1;
      c4:	9c 01       	movw	r18, r24
      c6:	2f 5f       	subi	r18, 0xFF	; 255
      c8:	3f 4f       	sbci	r19, 0xFF	; 255
	uint16_t length = pxEndOfStack-pxStartOfStack;
      ca:	68 1b       	sub	r22, r24
      cc:	79 0b       	sbc	r23, r25
	uint8_t poolH;
	volatile uint16_t hammingBits = 0;
      ce:	1a 82       	std	Y+2, r1	; 0x02
      d0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
      d2:	61 15       	cp	r22, r1
      d4:	71 05       	cpc	r23, r1
      d6:	09 f4       	brne	.+2      	; 0xda <uxChecksumGetTaskChecksum+0x34>
      d8:	d4 c0       	rjmp	.+424    	; 0x282 <uxChecksumGetTaskChecksum+0x1dc>
      da:	f9 01       	movw	r30, r18
      dc:	ab 01       	movw	r20, r22
      de:	4f 5f       	subi	r20, 0xFF	; 255
      e0:	5f 4f       	sbci	r21, 0xFF	; 255
      e2:	48 0f       	add	r20, r24
      e4:	59 1f       	adc	r21, r25
      e6:	d9 01       	movw	r26, r18
      e8:	90 e0       	ldi	r25, 0x00	; 0
		poolH ^= (*(data_p+i) & 0xAA);
      ea:	8d 91       	ld	r24, X+
      ec:	8a 7a       	andi	r24, 0xAA	; 170
      ee:	98 27       	eor	r25, r24
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
      f0:	a4 17       	cp	r26, r20
      f2:	b5 07       	cpc	r27, r21
      f4:	d1 f7       	brne	.-12     	; 0xea <uxChecksumGetTaskChecksum+0x44>
      f6:	ad c0       	rjmp	.+346    	; 0x252 <uxChecksumGetTaskChecksum+0x1ac>
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
      f8:	81 91       	ld	r24, Z+
      fa:	8c 7c       	andi	r24, 0xCC	; 204
      fc:	98 27       	eor	r25, r24
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
      fe:	4e 17       	cp	r20, r30
     100:	5f 07       	cpc	r21, r31
     102:	d1 f7       	brne	.-12     	; 0xf8 <uxChecksumGetTaskChecksum+0x52>
     104:	cf c0       	rjmp	.+414    	; 0x2a4 <uxChecksumGetTaskChecksum+0x1fe>
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
     106:	81 91       	ld	r24, Z+
     108:	80 7f       	andi	r24, 0xF0	; 240
     10a:	98 27       	eor	r25, r24
	}
	hammingBits += (paridade(poolH))<<pBit;
	
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
     10c:	2f 5f       	subi	r18, 0xFF	; 255
     10e:	3f 4f       	sbci	r19, 0xFF	; 255
     110:	26 17       	cp	r18, r22
     112:	37 07       	cpc	r19, r23
     114:	c0 f3       	brcs	.-16     	; 0x106 <uxChecksumGetTaskChecksum+0x60>
     116:	e3 c0       	rjmp	.+454    	; 0x2de <uxChecksumGetTaskChecksum+0x238>
	
	pBit=3;
	poolH = 0;
	posbit = (1<<(pBit-3));
	for(i=0;i<length;i++){
		if((i+1) & (posbit)){
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	80 ff       	sbrs	r24, 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <uxChecksumGetTaskChecksum+0x7c>
			poolH ^= (*(data_p+i));
     11e:	31 81       	ldd	r19, Z+1	; 0x01
     120:	23 27       	eor	r18, r19
     122:	31 96       	adiw	r30, 0x01	; 1
	hammingBits += (paridade(poolH))<<pBit;
	
	pBit=3;
	poolH = 0;
	posbit = (1<<(pBit-3));
	for(i=0;i<length;i++){
     124:	86 17       	cp	r24, r22
     126:	97 07       	cpc	r25, r23
     128:	b8 f3       	brcs	.-18     	; 0x118 <uxChecksumGetTaskChecksum+0x72>
		if((i+1) & (posbit)){
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
     12a:	49 81       	ldd	r20, Y+1	; 0x01
     12c:	5a 81       	ldd	r21, Y+2	; 0x02
     12e:	82 2f       	mov	r24, r18
     130:	82 95       	swap	r24
     132:	8f 70       	andi	r24, 0x0F	; 15
     134:	28 27       	eor	r18, r24
     136:	2f 70       	andi	r18, 0x0F	; 15
     138:	86 e9       	ldi	r24, 0x96	; 150
     13a:	99 e6       	ldi	r25, 0x69	; 105
     13c:	02 c0       	rjmp	.+4      	; 0x142 <uxChecksumGetTaskChecksum+0x9c>
     13e:	95 95       	asr	r25
     140:	87 95       	ror	r24
     142:	2a 95       	dec	r18
     144:	e2 f7       	brpl	.-8      	; 0x13e <uxChecksumGetTaskChecksum+0x98>
     146:	81 70       	andi	r24, 0x01	; 1
     148:	99 27       	eor	r25, r25
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	88 0f       	add	r24, r24
     154:	99 1f       	adc	r25, r25
     156:	84 0f       	add	r24, r20
     158:	95 1f       	adc	r25, r21
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
	
	uint8_t pBitmax = uiFls(length*8);
     15e:	cb 01       	movw	r24, r22
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25

static inline uint8_t uiFls(uint16_t uiX)
{
          uint8_t uiR = 16;
  
          if (!uiX){
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	09 f4       	brne	.+2      	; 0x172 <uxChecksumGetTaskChecksum+0xcc>
     170:	6d c0       	rjmp	.+218    	; 0x24c <uxChecksumGetTaskChecksum+0x1a6>
                  return 0;
		  }
          if (!(uiX & 0xff00u)) {
     172:	9c 01       	movw	r18, r24
     174:	22 27       	eor	r18, r18
     176:	23 2b       	or	r18, r19
     178:	21 f4       	brne	.+8      	; 0x182 <uxChecksumGetTaskChecksum+0xdc>
                  uiX <<= 8;
     17a:	98 2f       	mov	r25, r24
     17c:	88 27       	eor	r24, r24
                  uiR -= 8;
     17e:	08 e0       	ldi	r16, 0x08	; 8
     180:	01 c0       	rjmp	.+2      	; 0x184 <uxChecksumGetTaskChecksum+0xde>

#define paridade(n) ((0x6996 >> ((n^(n>>4))&0x0f))&0x01)

static inline uint8_t uiFls(uint16_t uiX)
{
          uint8_t uiR = 16;
     182:	00 e1       	ldi	r16, 0x10	; 16
		  }
          if (!(uiX & 0xff00u)) {
                  uiX <<= 8;
                  uiR -= 8;
          }
          if (!(uiX & 0xf000u)) {
     184:	9c 01       	movw	r18, r24
     186:	22 27       	eor	r18, r18
     188:	30 7f       	andi	r19, 0xF0	; 240
     18a:	23 2b       	or	r18, r19
     18c:	39 f4       	brne	.+14     	; 0x19c <uxChecksumGetTaskChecksum+0xf6>
                  uiX <<= 4;
     18e:	82 95       	swap	r24
     190:	92 95       	swap	r25
     192:	90 7f       	andi	r25, 0xF0	; 240
     194:	98 27       	eor	r25, r24
     196:	80 7f       	andi	r24, 0xF0	; 240
     198:	98 27       	eor	r25, r24
                  uiR -= 4;
     19a:	04 50       	subi	r16, 0x04	; 4
          }
          if (!(uiX & 0xc000u)) {
     19c:	9c 01       	movw	r18, r24
     19e:	22 27       	eor	r18, r18
     1a0:	30 7c       	andi	r19, 0xC0	; 192
     1a2:	23 2b       	or	r18, r19
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <uxChecksumGetTaskChecksum+0x10a>
                  uiX <<= 2;
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
                  uiR -= 2;
     1ae:	02 50       	subi	r16, 0x02	; 2
          }
          if (!(uiX & 0x8000u)) {
     1b0:	99 23       	and	r25, r25
     1b2:	0c f0       	brlt	.+2      	; 0x1b6 <uxChecksumGetTaskChecksum+0x110>
                  uiX <<= 1;
                  uiR -= 1;
     1b4:	01 50       	subi	r16, 0x01	; 1
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = uiFls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	05 30       	cpi	r16, 0x05	; 5
     1ba:	11 05       	cpc	r17, r1
     1bc:	08 f4       	brcc	.+2      	; 0x1c0 <uxChecksumGetTaskChecksum+0x11a>
     1be:	46 c0       	rjmp	.+140    	; 0x24c <uxChecksumGetTaskChecksum+0x1a6>
     1c0:	a4 e0       	ldi	r26, 0x04	; 4
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
		poolH = 0;
		posbit = (1<<(pBit-3));
     1c4:	cc 24       	eor	r12, r12
     1c6:	c3 94       	inc	r12
     1c8:	d1 2c       	mov	r13, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f6 e9       	ldi	r31, 0x96	; 150
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f9 e6       	ldi	r31, 0x69	; 105
     1d2:	ff 2e       	mov	r15, r31
     1d4:	f0 2d       	mov	r31, r0
	uint8_t pBitmax = uiFls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
     1d6:	cd 01       	movw	r24, r26
     1d8:	03 97       	sbiw	r24, 0x03	; 3
     1da:	a6 01       	movw	r20, r12
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <uxChecksumGetTaskChecksum+0x13c>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	8a 95       	dec	r24
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <uxChecksumGetTaskChecksum+0x138>
		for(i=0;i<length;i++){
     1e6:	61 15       	cp	r22, r1
     1e8:	71 05       	cpc	r23, r1
     1ea:	89 f0       	breq	.+34     	; 0x20e <uxChecksumGetTaskChecksum+0x168>
     1ec:	f5 01       	movw	r30, r10
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	91 2c       	mov	r9, r1
			if((i+1) & (posbit)){
     1f4:	01 96       	adiw	r24, 0x01	; 1
     1f6:	9a 01       	movw	r18, r20
     1f8:	28 23       	and	r18, r24
     1fa:	39 23       	and	r19, r25
     1fc:	23 2b       	or	r18, r19
     1fe:	11 f0       	breq	.+4      	; 0x204 <uxChecksumGetTaskChecksum+0x15e>
				poolH ^= (*(data_p+i));
     200:	21 81       	ldd	r18, Z+1	; 0x01
     202:	92 26       	eor	r9, r18
     204:	31 96       	adiw	r30, 0x01	; 1
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
		for(i=0;i<length;i++){
     206:	68 17       	cp	r22, r24
     208:	79 07       	cpc	r23, r25
     20a:	a1 f7       	brne	.-24     	; 0x1f4 <uxChecksumGetTaskChecksum+0x14e>
     20c:	01 c0       	rjmp	.+2      	; 0x210 <uxChecksumGetTaskChecksum+0x16a>
	
	uint8_t pBitmax = uiFls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
		poolH = 0;
     20e:	91 2c       	mov	r9, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
     210:	29 81       	ldd	r18, Y+1	; 0x01
     212:	3a 81       	ldd	r19, Y+2	; 0x02
     214:	89 2d       	mov	r24, r9
     216:	82 95       	swap	r24
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	89 25       	eor	r24, r9
     21c:	8f 70       	andi	r24, 0x0F	; 15
     21e:	a7 01       	movw	r20, r14
     220:	02 c0       	rjmp	.+4      	; 0x226 <uxChecksumGetTaskChecksum+0x180>
     222:	55 95       	asr	r21
     224:	47 95       	ror	r20
     226:	8a 95       	dec	r24
     228:	e2 f7       	brpl	.-8      	; 0x222 <uxChecksumGetTaskChecksum+0x17c>
     22a:	ca 01       	movw	r24, r20
     22c:	81 70       	andi	r24, 0x01	; 1
     22e:	99 27       	eor	r25, r25
     230:	0a 2e       	mov	r0, r26
     232:	02 c0       	rjmp	.+4      	; 0x238 <uxChecksumGetTaskChecksum+0x192>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	0a 94       	dec	r0
     23a:	e2 f7       	brpl	.-8      	; 0x234 <uxChecksumGetTaskChecksum+0x18e>
     23c:	28 0f       	add	r18, r24
     23e:	39 1f       	adc	r19, r25
     240:	3a 83       	std	Y+2, r19	; 0x02
     242:	29 83       	std	Y+1, r18	; 0x01
	hammingBits += (paridade(poolH))<<pBit;
	
	uint8_t pBitmax = uiFls(length*8);
	//for(pBit=4;((1<<(pBit-2))-1)<=(length);pBit++){
	
	for(pBit=4;pBit<pBitmax;pBit++){
     244:	11 96       	adiw	r26, 0x01	; 1
     246:	a0 17       	cp	r26, r16
     248:	b1 07       	cpc	r27, r17
     24a:	29 f6       	brne	.-118    	; 0x1d6 <uxChecksumGetTaskChecksum+0x130>
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
     250:	65 c0       	rjmp	.+202    	; 0x31c <uxChecksumGetTaskChecksum+0x276>
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xAA);
	}
	hammingBits += (paridade(poolH))<<pBit;
     252:	a9 81       	ldd	r26, Y+1	; 0x01
     254:	ba 81       	ldd	r27, Y+2	; 0x02
     256:	89 2f       	mov	r24, r25
     258:	82 95       	swap	r24
     25a:	8f 70       	andi	r24, 0x0F	; 15
     25c:	98 27       	eor	r25, r24
     25e:	9f 70       	andi	r25, 0x0F	; 15
     260:	06 e9       	ldi	r16, 0x96	; 150
     262:	19 e6       	ldi	r17, 0x69	; 105
     264:	78 01       	movw	r14, r16
     266:	02 c0       	rjmp	.+4      	; 0x26c <uxChecksumGetTaskChecksum+0x1c6>
     268:	f5 94       	asr	r15
     26a:	e7 94       	ror	r14
     26c:	9a 95       	dec	r25
     26e:	e2 f7       	brpl	.-8      	; 0x268 <uxChecksumGetTaskChecksum+0x1c2>
     270:	c7 01       	movw	r24, r14
     272:	81 70       	andi	r24, 0x01	; 1
     274:	99 27       	eor	r25, r25
     276:	8a 0f       	add	r24, r26
     278:	9b 1f       	adc	r25, r27
     27a:	9a 83       	std	Y+2, r25	; 0x02
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	3b cf       	rjmp	.-394    	; 0xf8 <uxChecksumGetTaskChecksum+0x52>
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	9a 83       	std	Y+2, r25	; 0x02
     288:	89 83       	std	Y+1, r24	; 0x01
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
	}
	hammingBits += (paridade(poolH))<<pBit;
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	9a 83       	std	Y+2, r25	; 0x02
     298:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<length;i++){
		if((i+1) & (posbit)){
			poolH ^= (*(data_p+i));
		}
	}
	hammingBits += (paridade(poolH))<<pBit;
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	9a 81       	ldd	r25, Y+2	; 0x02
     29e:	9a 83       	std	Y+2, r25	; 0x02
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	d4 cf       	rjmp	.-88     	; 0x24c <uxChecksumGetTaskChecksum+0x1a6>
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
	}
	hammingBits += (paridade(poolH))<<pBit;
     2a4:	49 81       	ldd	r20, Y+1	; 0x01
     2a6:	5a 81       	ldd	r21, Y+2	; 0x02
     2a8:	89 2f       	mov	r24, r25
     2aa:	82 95       	swap	r24
     2ac:	8f 70       	andi	r24, 0x0F	; 15
     2ae:	98 27       	eor	r25, r24
     2b0:	9f 70       	andi	r25, 0x0F	; 15
     2b2:	e6 e9       	ldi	r30, 0x96	; 150
     2b4:	f9 e6       	ldi	r31, 0x69	; 105
     2b6:	df 01       	movw	r26, r30
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <uxChecksumGetTaskChecksum+0x218>
     2ba:	b5 95       	asr	r27
     2bc:	a7 95       	ror	r26
     2be:	9a 95       	dec	r25
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <uxChecksumGetTaskChecksum+0x214>
     2c2:	cd 01       	movw	r24, r26
     2c4:	81 70       	andi	r24, 0x01	; 1
     2c6:	99 27       	eor	r25, r25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	84 0f       	add	r24, r20
     2ce:	95 1f       	adc	r25, r21
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	f9 01       	movw	r30, r18
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	14 cf       	rjmp	.-472    	; 0x106 <uxChecksumGetTaskChecksum+0x60>
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
     2de:	49 81       	ldd	r20, Y+1	; 0x01
     2e0:	5a 81       	ldd	r21, Y+2	; 0x02
     2e2:	89 2f       	mov	r24, r25
     2e4:	82 95       	swap	r24
     2e6:	8f 70       	andi	r24, 0x0F	; 15
     2e8:	98 27       	eor	r25, r24
     2ea:	9f 70       	andi	r25, 0x0F	; 15
     2ec:	26 e9       	ldi	r18, 0x96	; 150
     2ee:	39 e6       	ldi	r19, 0x69	; 105
     2f0:	f9 01       	movw	r30, r18
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <uxChecksumGetTaskChecksum+0x252>
     2f4:	f5 95       	asr	r31
     2f6:	e7 95       	ror	r30
     2f8:	9a 95       	dec	r25
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <uxChecksumGetTaskChecksum+0x24e>
     2fc:	cf 01       	movw	r24, r30
     2fe:	81 70       	andi	r24, 0x01	; 1
     300:	99 27       	eor	r25, r25
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	84 0f       	add	r24, r20
     30c:	95 1f       	adc	r25, r21
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	89 83       	std	Y+1, r24	; 0x01
     312:	f5 01       	movw	r30, r10
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	fe ce       	rjmp	.-516    	; 0x118 <uxChecksumGetTaskChecksum+0x72>
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
}
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	9f 90       	pop	r9
     336:	08 95       	ret

00000338 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     33e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     342:	ce 01       	movw	r24, r28
     344:	0e 94 30 07 	call	0xe60	; 0xe60 <malloc>
     348:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     34a:	0e 94 a3 05 	call	0xb46	; 0xb46 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     34e:	ce 01       	movw	r24, r28
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
	if( pv )
     35a:	00 97       	sbiw	r24, 0x00	; 0
     35c:	41 f0       	breq	.+16     	; 0x36e <vPortFree+0x18>
     35e:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     360:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <vTaskSuspendAll>
		{
			free( pv );
     364:	ce 01       	movw	r24, r28
     366:	0e 94 c8 07 	call	0xf90	; 0xf90 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     36a:	0e 94 a3 05 	call	0xb46	; 0xb46 <xTaskResumeAll>
	}
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     374:	fc 01       	movw	r30, r24
     376:	03 96       	adiw	r24, 0x03	; 3
     378:	92 83       	std	Z+2, r25	; 0x02
     37a:	81 83       	std	Z+1, r24	; 0x01
     37c:	2f ef       	ldi	r18, 0xFF	; 255
     37e:	3f ef       	ldi	r19, 0xFF	; 255
     380:	34 83       	std	Z+4, r19	; 0x04
     382:	23 83       	std	Z+3, r18	; 0x03
     384:	96 83       	std	Z+6, r25	; 0x06
     386:	85 83       	std	Z+5, r24	; 0x05
     388:	90 87       	std	Z+8, r25	; 0x08
     38a:	87 83       	std	Z+7, r24	; 0x07
     38c:	10 82       	st	Z, r1
     38e:	08 95       	ret

00000390 <vListInitialiseItem>:
     390:	fc 01       	movw	r30, r24
     392:	11 86       	std	Z+9, r1	; 0x09
     394:	10 86       	std	Z+8, r1	; 0x08
     396:	08 95       	ret

00000398 <vListInsertEnd>:
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	9c 01       	movw	r18, r24
     39e:	fb 01       	movw	r30, r22
     3a0:	dc 01       	movw	r26, r24
     3a2:	11 96       	adiw	r26, 0x01	; 1
     3a4:	cd 91       	ld	r28, X+
     3a6:	dc 91       	ld	r29, X
     3a8:	12 97       	sbiw	r26, 0x02	; 2
     3aa:	d3 83       	std	Z+3, r29	; 0x03
     3ac:	c2 83       	std	Z+2, r28	; 0x02
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	9d 81       	ldd	r25, Y+5	; 0x05
     3b2:	95 83       	std	Z+5, r25	; 0x05
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	8c 81       	ldd	r24, Y+4	; 0x04
     3b8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ba:	dc 01       	movw	r26, r24
     3bc:	13 96       	adiw	r26, 0x03	; 3
     3be:	7c 93       	st	X, r23
     3c0:	6e 93       	st	-X, r22
     3c2:	12 97       	sbiw	r26, 0x02	; 2
     3c4:	7d 83       	std	Y+5, r23	; 0x05
     3c6:	6c 83       	std	Y+4, r22	; 0x04
     3c8:	31 87       	std	Z+9, r19	; 0x09
     3ca:	20 87       	std	Z+8, r18	; 0x08
     3cc:	f9 01       	movw	r30, r18
     3ce:	80 81       	ld	r24, Z
     3d0:	8f 5f       	subi	r24, 0xFF	; 255
     3d2:	80 83       	st	Z, r24
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     3e0:	a0 85       	ldd	r26, Z+8	; 0x08
     3e2:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3e4:	c2 81       	ldd	r28, Z+2	; 0x02
     3e6:	d3 81       	ldd	r29, Z+3	; 0x03
     3e8:	84 81       	ldd	r24, Z+4	; 0x04
     3ea:	95 81       	ldd	r25, Z+5	; 0x05
     3ec:	9d 83       	std	Y+5, r25	; 0x05
     3ee:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3f0:	c4 81       	ldd	r28, Z+4	; 0x04
     3f2:	d5 81       	ldd	r29, Z+5	; 0x05
     3f4:	82 81       	ldd	r24, Z+2	; 0x02
     3f6:	93 81       	ldd	r25, Z+3	; 0x03
     3f8:	9b 83       	std	Y+3, r25	; 0x03
     3fa:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	8d 91       	ld	r24, X+
     400:	9c 91       	ld	r25, X
     402:	12 97       	sbiw	r26, 0x02	; 2
     404:	e8 17       	cp	r30, r24
     406:	f9 07       	cpc	r31, r25
     408:	31 f4       	brne	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	95 81       	ldd	r25, Z+5	; 0x05
     40e:	12 96       	adiw	r26, 0x02	; 2
     410:	9c 93       	st	X, r25
     412:	8e 93       	st	-X, r24
     414:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     416:	11 86       	std	Z+9, r1	; 0x09
     418:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     41a:	8c 91       	ld	r24, X
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     420:	8c 91       	ld	r24, X
}
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     428:	31 e1       	ldi	r19, 0x11	; 17
     42a:	fc 01       	movw	r30, r24
     42c:	30 83       	st	Z, r19
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	22 e2       	ldi	r18, 0x22	; 34
     432:	20 83       	st	Z, r18
     434:	31 97       	sbiw	r30, 0x01	; 1
     436:	a3 e3       	ldi	r26, 0x33	; 51
     438:	a0 83       	st	Z, r26
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	60 83       	st	Z, r22
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	70 83       	st	Z, r23
     442:	31 97       	sbiw	r30, 0x01	; 1
     444:	10 82       	st	Z, r1
     446:	31 97       	sbiw	r30, 0x01	; 1
     448:	60 e8       	ldi	r22, 0x80	; 128
     44a:	60 83       	st	Z, r22
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	10 82       	st	Z, r1
     450:	31 97       	sbiw	r30, 0x01	; 1
     452:	62 e0       	ldi	r22, 0x02	; 2
     454:	60 83       	st	Z, r22
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	63 e0       	ldi	r22, 0x03	; 3
     45a:	60 83       	st	Z, r22
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	64 e0       	ldi	r22, 0x04	; 4
     460:	60 83       	st	Z, r22
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	65 e0       	ldi	r22, 0x05	; 5
     466:	60 83       	st	Z, r22
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	66 e0       	ldi	r22, 0x06	; 6
     46c:	60 83       	st	Z, r22
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	67 e0       	ldi	r22, 0x07	; 7
     472:	60 83       	st	Z, r22
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	68 e0       	ldi	r22, 0x08	; 8
     478:	60 83       	st	Z, r22
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	69 e0       	ldi	r22, 0x09	; 9
     47e:	60 83       	st	Z, r22
     480:	31 97       	sbiw	r30, 0x01	; 1
     482:	60 e1       	ldi	r22, 0x10	; 16
     484:	60 83       	st	Z, r22
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	30 83       	st	Z, r19
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	32 e1       	ldi	r19, 0x12	; 18
     48e:	30 83       	st	Z, r19
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	33 e1       	ldi	r19, 0x13	; 19
     494:	30 83       	st	Z, r19
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	34 e1       	ldi	r19, 0x14	; 20
     49a:	30 83       	st	Z, r19
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	35 e1       	ldi	r19, 0x15	; 21
     4a0:	30 83       	st	Z, r19
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	36 e1       	ldi	r19, 0x16	; 22
     4a6:	30 83       	st	Z, r19
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	37 e1       	ldi	r19, 0x17	; 23
     4ac:	30 83       	st	Z, r19
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	38 e1       	ldi	r19, 0x18	; 24
     4b2:	30 83       	st	Z, r19
     4b4:	31 97       	sbiw	r30, 0x01	; 1
     4b6:	39 e1       	ldi	r19, 0x19	; 25
     4b8:	30 83       	st	Z, r19
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	30 e2       	ldi	r19, 0x20	; 32
     4be:	30 83       	st	Z, r19
     4c0:	31 97       	sbiw	r30, 0x01	; 1
     4c2:	31 e2       	ldi	r19, 0x21	; 33
     4c4:	30 83       	st	Z, r19
     4c6:	31 97       	sbiw	r30, 0x01	; 1
     4c8:	20 83       	st	Z, r18
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	23 e2       	ldi	r18, 0x23	; 35
     4ce:	20 83       	st	Z, r18
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	40 83       	st	Z, r20
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	50 83       	st	Z, r21
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	26 e2       	ldi	r18, 0x26	; 38
     4dc:	20 83       	st	Z, r18
     4de:	31 97       	sbiw	r30, 0x01	; 1
     4e0:	27 e2       	ldi	r18, 0x27	; 39
     4e2:	20 83       	st	Z, r18
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	28 e2       	ldi	r18, 0x28	; 40
     4e8:	20 83       	st	Z, r18
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	29 e2       	ldi	r18, 0x29	; 41
     4ee:	20 83       	st	Z, r18
     4f0:	31 97       	sbiw	r30, 0x01	; 1
     4f2:	20 e3       	ldi	r18, 0x30	; 48
     4f4:	20 83       	st	Z, r18
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	21 e3       	ldi	r18, 0x31	; 49
     4fa:	20 83       	st	Z, r18
     4fc:	86 97       	sbiw	r24, 0x26	; 38
     4fe:	08 95       	ret

00000500 <xPortStartScheduler>:
     500:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     504:	89 ef       	ldi	r24, 0xF9	; 249
     506:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     50a:	8b e0       	ldi	r24, 0x0B	; 11
     50c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     510:	ef e6       	ldi	r30, 0x6F	; 111
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	82 60       	ori	r24, 0x02	; 2
     518:	80 83       	st	Z, r24
     51a:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     51e:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     522:	cd 91       	ld	r28, X+
     524:	cd bf       	out	0x3d, r28	; 61
     526:	dd 91       	ld	r29, X+
     528:	de bf       	out	0x3e, r29	; 62
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	bf 90       	pop	r11
     554:	af 90       	pop	r10
     556:	9f 90       	pop	r9
     558:	8f 90       	pop	r8
     55a:	7f 90       	pop	r7
     55c:	6f 90       	pop	r6
     55e:	5f 90       	pop	r5
     560:	4f 90       	pop	r4
     562:	3f 90       	pop	r3
     564:	2f 90       	pop	r2
     566:	1f 90       	pop	r1
     568:	0f 90       	pop	r0
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	0f 90       	pop	r0
     56e:	08 95       	ret
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	08 95       	ret

00000574 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     574:	0f 92       	push	r0
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	0f 92       	push	r0
     57c:	1f 92       	push	r1
     57e:	11 24       	eor	r1, r1
     580:	2f 92       	push	r2
     582:	3f 92       	push	r3
     584:	4f 92       	push	r4
     586:	5f 92       	push	r5
     588:	6f 92       	push	r6
     58a:	7f 92       	push	r7
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ef 93       	push	r30
     5ba:	ff 93       	push	r31
     5bc:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     5c0:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     5c4:	0d b6       	in	r0, 0x3d	; 61
     5c6:	0d 92       	st	X+, r0
     5c8:	0e b6       	in	r0, 0x3e	; 62
     5ca:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     5cc:	0e 94 22 06 	call	0xc44	; 0xc44 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     5d0:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     5d4:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     5d8:	cd 91       	ld	r28, X+
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	dd 91       	ld	r29, X+
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	bf 90       	pop	r11
     60a:	af 90       	pop	r10
     60c:	9f 90       	pop	r9
     60e:	8f 90       	pop	r8
     610:	7f 90       	pop	r7
     612:	6f 90       	pop	r6
     614:	5f 90       	pop	r5
     616:	4f 90       	pop	r4
     618:	3f 90       	pop	r3
     61a:	2f 90       	pop	r2
     61c:	1f 90       	pop	r1
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0

	asm volatile ( "ret" );
     624:	08 95       	ret

00000626 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     626:	0f 92       	push	r0
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	0f 92       	push	r0
     62e:	1f 92       	push	r1
     630:	11 24       	eor	r1, r1
     632:	2f 92       	push	r2
     634:	3f 92       	push	r3
     636:	4f 92       	push	r4
     638:	5f 92       	push	r5
     63a:	6f 92       	push	r6
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
     66e:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     672:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     676:	0d b6       	in	r0, 0x3d	; 61
     678:	0d 92       	st	X+, r0
     67a:	0e b6       	in	r0, 0x3e	; 62
     67c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     67e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <xTaskIncrementTick>
     682:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     684:	0e 94 22 06 	call	0xc44	; 0xc44 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     688:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     68c:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     690:	cd 91       	ld	r28, X+
     692:	cd bf       	out	0x3d, r28	; 61
     694:	dd 91       	ld	r29, X+
     696:	de bf       	out	0x3e, r29	; 62
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	bf 91       	pop	r27
     6a2:	af 91       	pop	r26
     6a4:	9f 91       	pop	r25
     6a6:	8f 91       	pop	r24
     6a8:	7f 91       	pop	r23
     6aa:	6f 91       	pop	r22
     6ac:	5f 91       	pop	r21
     6ae:	4f 91       	pop	r20
     6b0:	3f 91       	pop	r19
     6b2:	2f 91       	pop	r18
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	bf 90       	pop	r11
     6c2:	af 90       	pop	r10
     6c4:	9f 90       	pop	r9
     6c6:	8f 90       	pop	r8
     6c8:	7f 90       	pop	r7
     6ca:	6f 90       	pop	r6
     6cc:	5f 90       	pop	r5
     6ce:	4f 90       	pop	r4
     6d0:	3f 90       	pop	r3
     6d2:	2f 90       	pop	r2
     6d4:	1f 90       	pop	r1
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0

	asm volatile ( "ret" );
     6dc:	08 95       	ret

000006de <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     6de:	0e 94 13 03 	call	0x626	; 0x626 <vPortYieldFromTick>
		asm volatile ( "reti" );
     6e2:	18 95       	reti

000006e4 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     6e4:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
     6e8:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
     6ec:	80 81       	ld	r24, Z
     6ee:	81 11       	cpse	r24, r1
     6f0:	07 c0       	rjmp	.+14     	; 0x700 <prvResetNextTaskUnblockTime+0x1c>
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	9f ef       	ldi	r25, 0xFF	; 255
     6f6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     6fa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     6fe:	08 95       	ret
     700:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
     704:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
     708:	05 80       	ldd	r0, Z+5	; 0x05
     70a:	f6 81       	ldd	r31, Z+6	; 0x06
     70c:	e0 2d       	mov	r30, r0
     70e:	06 80       	ldd	r0, Z+6	; 0x06
     710:	f7 81       	ldd	r31, Z+7	; 0x07
     712:	e0 2d       	mov	r30, r0
     714:	82 81       	ldd	r24, Z+2	; 0x02
     716:	93 81       	ldd	r25, Z+3	; 0x03
     718:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     71c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     720:	08 95       	ret

00000722 <prvIdleTask>:
     722:	cf e3       	ldi	r28, 0x3F	; 63
     724:	d1 e0       	ldi	r29, 0x01	; 1
     726:	88 81       	ld	r24, Y
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	e8 f3       	brcs	.-6      	; 0x726 <prvIdleTask+0x4>
     72c:	0e 94 ba 02 	call	0x574	; 0x574 <vPortYield>
     730:	fa cf       	rjmp	.-12     	; 0x726 <prvIdleTask+0x4>

00000732 <xTaskCreate>:
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	4c 01       	movw	r8, r24
     752:	6b 01       	movw	r12, r22
     754:	5a 01       	movw	r10, r20
     756:	29 01       	movw	r4, r18
     758:	ca 01       	movw	r24, r20
     75a:	0e 94 9c 01 	call	0x338	; 0x338 <pvPortMalloc>
     75e:	3c 01       	movw	r6, r24
     760:	89 2b       	or	r24, r25
     762:	09 f4       	brne	.+2      	; 0x766 <xTaskCreate+0x34>
     764:	f4 c0       	rjmp	.+488    	; 0x94e <__stack+0x4f>
     766:	8c e2       	ldi	r24, 0x2C	; 44
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 9c 01 	call	0x338	; 0x338 <pvPortMalloc>
     76e:	ec 01       	movw	r28, r24
     770:	89 2b       	or	r24, r25
     772:	c1 f0       	breq	.+48     	; 0x7a4 <xTaskCreate+0x72>
     774:	78 8e       	std	Y+24, r7	; 0x18
     776:	6f 8a       	std	Y+23, r6	; 0x17
     778:	a5 01       	movw	r20, r10
     77a:	65 ea       	ldi	r22, 0xA5	; 165
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	c3 01       	movw	r24, r6
     780:	0e 94 51 08 	call	0x10a2	; 0x10a2 <memset>
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	a8 1a       	sub	r10, r24
     788:	b1 08       	sbc	r11, r1
     78a:	8f 89       	ldd	r24, Y+23	; 0x17
     78c:	98 8d       	ldd	r25, Y+24	; 0x18
     78e:	a8 0e       	add	r10, r24
     790:	b9 1e       	adc	r11, r25
     792:	bc a2       	std	Y+36, r11	; 0x24
     794:	ab a2       	std	Y+35, r10	; 0x23
     796:	d6 01       	movw	r26, r12
     798:	8c 91       	ld	r24, X
     79a:	89 8f       	std	Y+25, r24	; 0x19
     79c:	8c 91       	ld	r24, X
     79e:	81 11       	cpse	r24, r1
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <xTaskCreate+0x7a>
     7a2:	18 c0       	rjmp	.+48     	; 0x7d4 <xTaskCreate+0xa2>
     7a4:	c3 01       	movw	r24, r6
     7a6:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
     7aa:	d1 c0       	rjmp	.+418    	; 0x94e <__stack+0x4f>
     7ac:	ae 01       	movw	r20, r28
     7ae:	46 5e       	subi	r20, 0xE6	; 230
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	f6 01       	movw	r30, r12
     7b4:	31 96       	adiw	r30, 0x01	; 1
     7b6:	b8 e0       	ldi	r27, 0x08	; 8
     7b8:	cb 0e       	add	r12, r27
     7ba:	d1 1c       	adc	r13, r1
     7bc:	cf 01       	movw	r24, r30
     7be:	21 91       	ld	r18, Z+
     7c0:	da 01       	movw	r26, r20
     7c2:	2d 93       	st	X+, r18
     7c4:	ad 01       	movw	r20, r26
     7c6:	dc 01       	movw	r26, r24
     7c8:	8c 91       	ld	r24, X
     7ca:	88 23       	and	r24, r24
     7cc:	19 f0       	breq	.+6      	; 0x7d4 <xTaskCreate+0xa2>
     7ce:	ec 15       	cp	r30, r12
     7d0:	fd 05       	cpc	r31, r13
     7d2:	a1 f7       	brne	.-24     	; 0x7bc <xTaskCreate+0x8a>
     7d4:	18 a2       	std	Y+32, r1	; 0x20
     7d6:	04 30       	cpi	r16, 0x04	; 4
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <xTaskCreate+0xaa>
     7da:	03 e0       	ldi	r16, 0x03	; 3
     7dc:	0e 8b       	std	Y+22, r16	; 0x16
     7de:	0d a3       	std	Y+37, r16	; 0x25
     7e0:	1e a2       	std	Y+38, r1	; 0x26
     7e2:	6e 01       	movw	r12, r28
     7e4:	b2 e0       	ldi	r27, 0x02	; 2
     7e6:	cb 0e       	add	r12, r27
     7e8:	d1 1c       	adc	r13, r1
     7ea:	c6 01       	movw	r24, r12
     7ec:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialiseItem>
     7f0:	ce 01       	movw	r24, r28
     7f2:	0c 96       	adiw	r24, 0x0c	; 12
     7f4:	0e 94 c8 01 	call	0x390	; 0x390 <vListInitialiseItem>
     7f8:	d9 87       	std	Y+9, r29	; 0x09
     7fa:	c8 87       	std	Y+8, r28	; 0x08
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	80 1b       	sub	r24, r16
     802:	91 09       	sbc	r25, r1
     804:	9d 87       	std	Y+13, r25	; 0x0d
     806:	8c 87       	std	Y+12, r24	; 0x0c
     808:	db 8b       	std	Y+19, r29	; 0x13
     80a:	ca 8b       	std	Y+18, r28	; 0x12
     80c:	1f a2       	std	Y+39, r1	; 0x27
     80e:	18 a6       	std	Y+40, r1	; 0x28
     810:	19 a6       	std	Y+41, r1	; 0x29
     812:	1a a6       	std	Y+42, r1	; 0x2a
     814:	1b a6       	std	Y+43, r1	; 0x2b
     816:	a2 01       	movw	r20, r4
     818:	b4 01       	movw	r22, r8
     81a:	c5 01       	movw	r24, r10
     81c:	0e 94 14 02 	call	0x428	; 0x428 <pxPortInitialiseStack>
     820:	99 83       	std	Y+1, r25	; 0x01
     822:	88 83       	st	Y, r24
     824:	e1 14       	cp	r14, r1
     826:	f1 04       	cpc	r15, r1
     828:	19 f0       	breq	.+6      	; 0x830 <xTaskCreate+0xfe>
     82a:	f7 01       	movw	r30, r14
     82c:	d1 83       	std	Z+1, r29	; 0x01
     82e:	c0 83       	st	Z, r28
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	0f 92       	push	r0
     836:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
     840:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
     844:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     848:	89 2b       	or	r24, r25
     84a:	89 f5       	brne	.+98     	; 0x8ae <xTaskCreate+0x17c>
     84c:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
     850:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
     854:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	c9 f5       	brne	.+114    	; 0x8ce <xTaskCreate+0x19c>
     85c:	8f e3       	ldi	r24, 0x3F	; 63
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     864:	88 e4       	ldi	r24, 0x48	; 72
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     86c:	81 e5       	ldi	r24, 0x51	; 81
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     874:	8a e5       	ldi	r24, 0x5A	; 90
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     87c:	86 e3       	ldi	r24, 0x36	; 54
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     884:	8d e2       	ldi	r24, 0x2D	; 45
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     88c:	80 e2       	ldi	r24, 0x20	; 32
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 ba 01 	call	0x374	; 0x374 <vListInitialise>
     894:	86 e3       	ldi	r24, 0x36	; 54
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
     89c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
     8a0:	8d e2       	ldi	r24, 0x2D	; 45
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
     8a8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
     8ac:	10 c0       	rjmp	.+32     	; 0x8ce <xTaskCreate+0x19c>
     8ae:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
     8b2:	81 11       	cpse	r24, r1
     8b4:	0c c0       	rjmp	.+24     	; 0x8ce <xTaskCreate+0x19c>
     8b6:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     8ba:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     8be:	96 89       	ldd	r25, Z+22	; 0x16
     8c0:	8e 89       	ldd	r24, Y+22	; 0x16
     8c2:	89 17       	cp	r24, r25
     8c4:	20 f0       	brcs	.+8      	; 0x8ce <xTaskCreate+0x19c>
     8c6:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
     8ca:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
     8ce:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
     8d8:	e0 90 63 01 	lds	r14, 0x0163	; 0x800163 <pxCurrentTCB>
     8dc:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     8e0:	6b a1       	ldd	r22, Y+35	; 0x23
     8e2:	7c a1       	ldd	r23, Y+36	; 0x24
     8e4:	88 81       	ld	r24, Y
     8e6:	99 81       	ldd	r25, Y+1	; 0x01
     8e8:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     8ec:	d7 01       	movw	r26, r14
     8ee:	92 96       	adiw	r26, 0x22	; 34
     8f0:	9c 93       	st	X, r25
     8f2:	8e 93       	st	-X, r24
     8f4:	91 97       	sbiw	r26, 0x21	; 33
     8f6:	8e 89       	ldd	r24, Y+22	; 0x16
     8f8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     8fc:	98 17       	cp	r25, r24
     8fe:	10 f4       	brcc	.+4      	; 0x904 <__stack+0x5>
     900:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	9c 01       	movw	r18, r24
     908:	22 0f       	add	r18, r18
     90a:	33 1f       	adc	r19, r19
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	b6 01       	movw	r22, r12
     91a:	81 5c       	subi	r24, 0xC1	; 193
     91c:	9e 4f       	sbci	r25, 0xFE	; 254
     91e:	0e 94 cc 01 	call	0x398	; 0x398 <vListInsertEnd>
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
     92a:	88 23       	and	r24, r24
     92c:	61 f0       	breq	.+24     	; 0x946 <__stack+0x47>
     92e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     932:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     936:	96 89       	ldd	r25, Z+22	; 0x16
     938:	8e 89       	ldd	r24, Y+22	; 0x16
     93a:	98 17       	cp	r25, r24
     93c:	30 f4       	brcc	.+12     	; 0x94a <__stack+0x4b>
     93e:	0e 94 ba 02 	call	0x574	; 0x574 <vPortYield>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	05 c0       	rjmp	.+10     	; 0x950 <__stack+0x51>
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	df 90       	pop	r13
     95c:	cf 90       	pop	r12
     95e:	bf 90       	pop	r11
     960:	af 90       	pop	r10
     962:	9f 90       	pop	r9
     964:	8f 90       	pop	r8
     966:	7f 90       	pop	r7
     968:	6f 90       	pop	r6
     96a:	5f 90       	pop	r5
     96c:	4f 90       	pop	r4
     96e:	08 95       	ret

00000970 <vTaskStartScheduler>:
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	0f 2e       	mov	r0, r31
     978:	f3 e1       	ldi	r31, 0x13	; 19
     97a:	ef 2e       	mov	r14, r31
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	ff 2e       	mov	r15, r31
     980:	f0 2d       	mov	r31, r0
     982:	00 e0       	ldi	r16, 0x00	; 0
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	44 e6       	ldi	r20, 0x64	; 100
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	66 e0       	ldi	r22, 0x06	; 6
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	81 e9       	ldi	r24, 0x91	; 145
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	0e 94 99 03 	call	0x732	; 0x732 <xTaskCreate>
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	81 f4       	brne	.+32     	; 0x9bc <vTaskStartScheduler+0x4c>
     99c:	f8 94       	cli
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	9f ef       	ldi	r25, 0xFF	; 255
     9a2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     9a6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
     9b0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
     9b4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
     9b8:	0e 94 80 02 	call	0x500	; 0x500 <xPortStartScheduler>
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	08 95       	ret

000009c4 <vTaskSuspendAll>:
     9c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     9ce:	08 95       	ret

000009d0 <xTaskIncrementTick>:
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     9e4:	81 11       	cpse	r24, r1
     9e6:	99 c0       	rjmp	.+306    	; 0xb1a <xTaskIncrementTick+0x14a>
     9e8:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
     9ec:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	e8 1a       	sub	r14, r24
     9f4:	f8 0a       	sbc	r15, r24
     9f6:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
     9fa:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
     9fe:	e1 14       	cp	r14, r1
     a00:	f1 04       	cpc	r15, r1
     a02:	b9 f4       	brne	.+46     	; 0xa32 <xTaskIncrementTick+0x62>
     a04:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
     a08:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
     a0c:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
     a10:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
     a14:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
     a18:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
     a1c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
     a20:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
     a24:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
     a2e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <prvResetNextTaskUnblockTime>
     a32:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
     a36:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
     a3a:	e8 16       	cp	r14, r24
     a3c:	f9 06       	cpc	r15, r25
     a3e:	10 f4       	brcc	.+4      	; 0xa44 <xTaskIncrementTick+0x74>
     a40:	d1 2c       	mov	r13, r1
     a42:	53 c0       	rjmp	.+166    	; 0xaea <xTaskIncrementTick+0x11a>
     a44:	d1 2c       	mov	r13, r1
     a46:	cc 24       	eor	r12, r12
     a48:	c3 94       	inc	r12
     a4a:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
     a4e:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
     a52:	80 81       	ld	r24, Z
     a54:	81 11       	cpse	r24, r1
     a56:	07 c0       	rjmp	.+14     	; 0xa66 <xTaskIncrementTick+0x96>
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     a60:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     a64:	42 c0       	rjmp	.+132    	; 0xaea <xTaskIncrementTick+0x11a>
     a66:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
     a6a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
     a6e:	05 80       	ldd	r0, Z+5	; 0x05
     a70:	f6 81       	ldd	r31, Z+6	; 0x06
     a72:	e0 2d       	mov	r30, r0
     a74:	c6 81       	ldd	r28, Z+6	; 0x06
     a76:	d7 81       	ldd	r29, Z+7	; 0x07
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	9b 81       	ldd	r25, Y+3	; 0x03
     a7c:	e8 16       	cp	r14, r24
     a7e:	f9 06       	cpc	r15, r25
     a80:	28 f4       	brcc	.+10     	; 0xa8c <xTaskIncrementTick+0xbc>
     a82:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     a86:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     a8a:	2f c0       	rjmp	.+94     	; 0xaea <xTaskIncrementTick+0x11a>
     a8c:	8e 01       	movw	r16, r28
     a8e:	0e 5f       	subi	r16, 0xFE	; 254
     a90:	1f 4f       	sbci	r17, 0xFF	; 255
     a92:	c8 01       	movw	r24, r16
     a94:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
     a98:	8c 89       	ldd	r24, Y+20	; 0x14
     a9a:	9d 89       	ldd	r25, Y+21	; 0x15
     a9c:	89 2b       	or	r24, r25
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <xTaskIncrementTick+0xd8>
     aa0:	ce 01       	movw	r24, r28
     aa2:	0c 96       	adiw	r24, 0x0c	; 12
     aa4:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
     aa8:	8e 89       	ldd	r24, Y+22	; 0x16
     aaa:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     aae:	98 17       	cp	r25, r24
     ab0:	10 f4       	brcc	.+4      	; 0xab6 <xTaskIncrementTick+0xe6>
     ab2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	9c 01       	movw	r18, r24
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	22 0f       	add	r18, r18
     ac0:	33 1f       	adc	r19, r19
     ac2:	22 0f       	add	r18, r18
     ac4:	33 1f       	adc	r19, r19
     ac6:	82 0f       	add	r24, r18
     ac8:	93 1f       	adc	r25, r19
     aca:	b8 01       	movw	r22, r16
     acc:	81 5c       	subi	r24, 0xC1	; 193
     ace:	9e 4f       	sbci	r25, 0xFE	; 254
     ad0:	0e 94 cc 01 	call	0x398	; 0x398 <vListInsertEnd>
     ad4:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     ad8:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     adc:	9e 89       	ldd	r25, Y+22	; 0x16
     ade:	86 89       	ldd	r24, Z+22	; 0x16
     ae0:	98 17       	cp	r25, r24
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <xTaskIncrementTick+0x116>
     ae4:	b2 cf       	rjmp	.-156    	; 0xa4a <xTaskIncrementTick+0x7a>
     ae6:	dc 2c       	mov	r13, r12
     ae8:	b0 cf       	rjmp	.-160    	; 0xa4a <xTaskIncrementTick+0x7a>
     aea:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     aee:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     af2:	86 89       	ldd	r24, Z+22	; 0x16
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	8e 0f       	add	r24, r30
     b06:	9f 1f       	adc	r25, r31
     b08:	fc 01       	movw	r30, r24
     b0a:	e1 5c       	subi	r30, 0xC1	; 193
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	80 81       	ld	r24, Z
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	48 f0       	brcs	.+18     	; 0xb26 <xTaskIncrementTick+0x156>
     b14:	dd 24       	eor	r13, r13
     b16:	d3 94       	inc	r13
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <xTaskIncrementTick+0x156>
     b1a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
     b24:	d1 2c       	mov	r13, r1
     b26:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
     b2a:	88 23       	and	r24, r24
     b2c:	11 f0       	breq	.+4      	; 0xb32 <xTaskIncrementTick+0x162>
     b2e:	dd 24       	eor	r13, r13
     b30:	d3 94       	inc	r13
     b32:	8d 2d       	mov	r24, r13
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	08 95       	ret

00000b46 <xTaskResumeAll>:
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	0f 92       	push	r0
     b5a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     b5e:	81 50       	subi	r24, 0x01	; 1
     b60:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     b64:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     b68:	81 11       	cpse	r24, r1
     b6a:	5f c0       	rjmp	.+190    	; 0xc2a <xTaskResumeAll+0xe4>
     b6c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     b70:	81 11       	cpse	r24, r1
     b72:	33 c0       	rjmp	.+102    	; 0xbda <xTaskResumeAll+0x94>
     b74:	5d c0       	rjmp	.+186    	; 0xc30 <xTaskResumeAll+0xea>
     b76:	d7 01       	movw	r26, r14
     b78:	15 96       	adiw	r26, 0x05	; 5
     b7a:	ed 91       	ld	r30, X+
     b7c:	fc 91       	ld	r31, X
     b7e:	16 97       	sbiw	r26, 0x06	; 6
     b80:	c6 81       	ldd	r28, Z+6	; 0x06
     b82:	d7 81       	ldd	r29, Z+7	; 0x07
     b84:	ce 01       	movw	r24, r28
     b86:	0c 96       	adiw	r24, 0x0c	; 12
     b88:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
     b8c:	8e 01       	movw	r16, r28
     b8e:	0e 5f       	subi	r16, 0xFE	; 254
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	c8 01       	movw	r24, r16
     b94:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
     b98:	8e 89       	ldd	r24, Y+22	; 0x16
     b9a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     b9e:	98 17       	cp	r25, r24
     ba0:	10 f4       	brcc	.+4      	; 0xba6 <xTaskResumeAll+0x60>
     ba2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	9c 01       	movw	r18, r24
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	b8 01       	movw	r22, r16
     bbc:	81 5c       	subi	r24, 0xC1	; 193
     bbe:	9e 4f       	sbci	r25, 0xFE	; 254
     bc0:	0e 94 cc 01 	call	0x398	; 0x398 <vListInsertEnd>
     bc4:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     bc8:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     bcc:	9e 89       	ldd	r25, Y+22	; 0x16
     bce:	86 89       	ldd	r24, Z+22	; 0x16
     bd0:	98 17       	cp	r25, r24
     bd2:	68 f0       	brcs	.+26     	; 0xbee <xTaskResumeAll+0xa8>
     bd4:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
     bd8:	0a c0       	rjmp	.+20     	; 0xbee <xTaskResumeAll+0xa8>
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
     bde:	0f 2e       	mov	r0, r31
     be0:	f0 e2       	ldi	r31, 0x20	; 32
     be2:	ef 2e       	mov	r14, r31
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	ff 2e       	mov	r15, r31
     be8:	f0 2d       	mov	r31, r0
     bea:	dd 24       	eor	r13, r13
     bec:	d3 94       	inc	r13
     bee:	f7 01       	movw	r30, r14
     bf0:	80 81       	ld	r24, Z
     bf2:	81 11       	cpse	r24, r1
     bf4:	c0 cf       	rjmp	.-128    	; 0xb76 <xTaskResumeAll+0x30>
     bf6:	cd 2b       	or	r28, r29
     bf8:	11 f0       	breq	.+4      	; 0xbfe <xTaskResumeAll+0xb8>
     bfa:	0e 94 72 03 	call	0x6e4	; 0x6e4 <prvResetNextTaskUnblockTime>
     bfe:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
     c02:	cc 23       	and	r28, r28
     c04:	51 f0       	breq	.+20     	; 0xc1a <xTaskResumeAll+0xd4>
     c06:	d1 e0       	ldi	r29, 0x01	; 1
     c08:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <xTaskIncrementTick>
     c0c:	81 11       	cpse	r24, r1
     c0e:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
     c12:	c1 50       	subi	r28, 0x01	; 1
     c14:	c9 f7       	brne	.-14     	; 0xc08 <xTaskResumeAll+0xc2>
     c16:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
     c1a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
     c1e:	88 23       	and	r24, r24
     c20:	31 f0       	breq	.+12     	; 0xc2e <xTaskResumeAll+0xe8>
     c22:	0e 94 ba 02 	call	0x574	; 0x574 <vPortYield>
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <xTaskResumeAll+0xea>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <xTaskResumeAll+0xea>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	08 95       	ret

00000c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     c48:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     c4c:	88 23       	and	r24, r24
     c4e:	21 f0       	breq	.+8      	; 0xc58 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
     c56:	c1 c0       	rjmp	.+386    	; 0xdda <vTaskSwitchContext+0x196>
	}
	else
	{
		xYieldPending = pdFALSE;
     c58:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
     c5c:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
     c60:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     c64:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     c68:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     c6c:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     c70:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     c74:	93 96       	adiw	r26, 0x23	; 35
     c76:	6d 91       	ld	r22, X+
     c78:	7c 91       	ld	r23, X
     c7a:	94 97       	sbiw	r26, 0x24	; 36
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     c84:	9a a3       	std	Y+34, r25	; 0x22
     c86:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
     c88:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
     c8c:	82 2f       	mov	r24, r18
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
     ca2:	e1 5c       	subi	r30, 0xC1	; 193
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	30 81       	ld	r19, Z
     ca8:	31 11       	cpse	r19, r1
     caa:	11 c0       	rjmp	.+34     	; 0xcce <vTaskSwitchContext+0x8a>
     cac:	21 50       	subi	r18, 0x01	; 1
     cae:	82 2f       	mov	r24, r18
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	e8 0f       	add	r30, r24
     cc2:	f9 1f       	adc	r31, r25
     cc4:	e1 5c       	subi	r30, 0xC1	; 193
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	30 81       	ld	r19, Z
     cca:	33 23       	and	r19, r19
     ccc:	79 f3       	breq	.-34     	; 0xcac <vTaskSwitchContext+0x68>
     cce:	ac 01       	movw	r20, r24
     cd0:	44 0f       	add	r20, r20
     cd2:	55 1f       	adc	r21, r21
     cd4:	44 0f       	add	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	44 0f       	add	r20, r20
     cda:	55 1f       	adc	r21, r21
     cdc:	48 0f       	add	r20, r24
     cde:	59 1f       	adc	r21, r25
     ce0:	da 01       	movw	r26, r20
     ce2:	a1 5c       	subi	r26, 0xC1	; 193
     ce4:	be 4f       	sbci	r27, 0xFE	; 254
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	ed 91       	ld	r30, X+
     cea:	fc 91       	ld	r31, X
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	02 80       	ldd	r0, Z+2	; 0x02
     cf0:	f3 81       	ldd	r31, Z+3	; 0x03
     cf2:	e0 2d       	mov	r30, r0
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	fc 93       	st	X, r31
     cf8:	ee 93       	st	-X, r30
     cfa:	11 97       	sbiw	r26, 0x01	; 1
     cfc:	4e 5b       	subi	r20, 0xBE	; 190
     cfe:	5e 4f       	sbci	r21, 0xFE	; 254
     d00:	e4 17       	cp	r30, r20
     d02:	f5 07       	cpc	r31, r21
     d04:	29 f4       	brne	.+10     	; 0xd10 <vTaskSwitchContext+0xcc>
     d06:	42 81       	ldd	r20, Z+2	; 0x02
     d08:	53 81       	ldd	r21, Z+3	; 0x03
     d0a:	fd 01       	movw	r30, r26
     d0c:	52 83       	std	Z+2, r21	; 0x02
     d0e:	41 83       	std	Z+1, r20	; 0x01
     d10:	fc 01       	movw	r30, r24
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	8e 0f       	add	r24, r30
     d20:	9f 1f       	adc	r25, r31
     d22:	fc 01       	movw	r30, r24
     d24:	e1 5c       	subi	r30, 0xC1	; 193
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	01 80       	ldd	r0, Z+1	; 0x01
     d2a:	f2 81       	ldd	r31, Z+2	; 0x02
     d2c:	e0 2d       	mov	r30, r0
     d2e:	86 81       	ldd	r24, Z+6	; 0x06
     d30:	97 81       	ldd	r25, Z+7	; 0x07
     d32:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
     d36:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
     d3a:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
     d3e:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     d42:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     d46:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     d4a:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     d4e:	93 96       	adiw	r26, 0x23	; 35
     d50:	6d 91       	ld	r22, X+
     d52:	7c 91       	ld	r23, X
     d54:	94 97       	sbiw	r26, 0x24	; 36
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     d5e:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     d62:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     d66:	21 a1       	ldd	r18, Z+33	; 0x21
     d68:	32 a1       	ldd	r19, Z+34	; 0x22
     d6a:	82 27       	eor	r24, r18
     d6c:	93 27       	eor	r25, r19
     d6e:	92 a3       	std	Z+34, r25	; 0x22
     d70:	81 a3       	std	Z+33, r24	; 0x21
     d72:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     d76:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     d7a:	81 a1       	ldd	r24, Z+33	; 0x21
     d7c:	92 a1       	ldd	r25, Z+34	; 0x22
     d7e:	89 2b       	or	r24, r25
     d80:	19 f4       	brne	.+6      	; 0xd88 <vTaskSwitchContext+0x144>
     d82:	0e 94 29 07 	call	0xe52	; 0xe52 <vApplicationTaskChecksumHook>
     d86:	29 c0       	rjmp	.+82     	; 0xdda <vTaskSwitchContext+0x196>
     d88:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
     d8c:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     d90:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
     d94:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     d98:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
     d9c:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
     da0:	01 a0       	ldd	r0, Z+33	; 0x21
     da2:	f2 a1       	ldd	r31, Z+34	; 0x22
     da4:	e0 2d       	mov	r30, r0
     da6:	f6 95       	lsr	r31
     da8:	e7 95       	ror	r30
     daa:	f6 95       	lsr	r31
     dac:	e7 95       	ror	r30
     dae:	f6 95       	lsr	r31
     db0:	e7 95       	ror	r30
     db2:	88 81       	ld	r24, Y
     db4:	99 81       	ldd	r25, Y+1	; 0x01
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	40 81       	ld	r20, Z
     dbc:	91 96       	adiw	r26, 0x21	; 33
     dbe:	2d 91       	ld	r18, X+
     dc0:	3c 91       	ld	r19, X
     dc2:	92 97       	sbiw	r26, 0x22	; 34
     dc4:	27 70       	andi	r18, 0x07	; 7
     dc6:	33 27       	eor	r19, r19
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <vTaskSwitchContext+0x18e>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <vTaskSwitchContext+0x18a>
     dd6:	84 27       	eor	r24, r20
     dd8:	80 83       	st	Z, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	00 d0       	rcall	.+0      	; 0xde6 <_Z7task_txPv+0x6>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
     dea:	8d e2       	ldi	r24, 0x2D	; 45
     dec:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
     dee:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
     df0:	82 e3       	ldi	r24, 0x32	; 50
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	fe cf       	rjmp	.-4      	; 0xdf2 <_Z7task_txPv+0x12>

00000df6 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <_Z7task_rxPv+0x6>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
     e00:	85 e5       	ldi	r24, 0x55	; 85
     e02:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
     e04:	8d e2       	ldi	r24, 0x2D	; 45
     e06:	8a 83       	std	Y+2, r24	; 0x02
     e08:	ff cf       	rjmp	.-2      	; 0xe08 <_Z7task_rxPv+0x12>

00000e0a <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
     e14:	e1 2c       	mov	r14, r1
     e16:	f1 2c       	mov	r15, r1
     e18:	01 e0       	ldi	r16, 0x01	; 1
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	44 e6       	ldi	r20, 0x64	; 100
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	6b e0       	ldi	r22, 0x0B	; 11
     e24:	71 e0       	ldi	r23, 0x01	; 1
     e26:	80 ef       	ldi	r24, 0xF0	; 240
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	0e 94 99 03 	call	0x732	; 0x732 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	44 e6       	ldi	r20, 0x64	; 100
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	6e e0       	ldi	r22, 0x0E	; 14
     e38:	71 e0       	ldi	r23, 0x01	; 1
     e3a:	8b ef       	ldi	r24, 0xFB	; 251
     e3c:	96 e0       	ldi	r25, 0x06	; 6
     e3e:	0e 94 99 03 	call	0x732	; 0x732 <xTaskCreate>
	vTaskStartScheduler();
     e42:	0e 94 b8 04 	call	0x970	; 0x970 <vTaskStartScheduler>
	
	return 0;
}
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	08 95       	ret

00000e52 <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
     e5a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
     e5e:	08 95       	ret

00000e60 <malloc>:
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	91 05       	cpc	r25, r1
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <malloc+0x12>
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
     e76:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	30 97       	sbiw	r30, 0x00	; 0
     e84:	19 f1       	breq	.+70     	; 0xecc <malloc+0x6c>
     e86:	40 81       	ld	r20, Z
     e88:	51 81       	ldd	r21, Z+1	; 0x01
     e8a:	02 81       	ldd	r16, Z+2	; 0x02
     e8c:	13 81       	ldd	r17, Z+3	; 0x03
     e8e:	48 17       	cp	r20, r24
     e90:	59 07       	cpc	r21, r25
     e92:	c8 f0       	brcs	.+50     	; 0xec6 <malloc+0x66>
     e94:	84 17       	cp	r24, r20
     e96:	95 07       	cpc	r25, r21
     e98:	69 f4       	brne	.+26     	; 0xeb4 <malloc+0x54>
     e9a:	10 97       	sbiw	r26, 0x00	; 0
     e9c:	31 f0       	breq	.+12     	; 0xeaa <malloc+0x4a>
     e9e:	12 96       	adiw	r26, 0x02	; 2
     ea0:	0c 93       	st	X, r16
     ea2:	12 97       	sbiw	r26, 0x02	; 2
     ea4:	13 96       	adiw	r26, 0x03	; 3
     ea6:	1c 93       	st	X, r17
     ea8:	27 c0       	rjmp	.+78     	; 0xef8 <malloc+0x98>
     eaa:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
     eae:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
     eb2:	22 c0       	rjmp	.+68     	; 0xef8 <malloc+0x98>
     eb4:	21 15       	cp	r18, r1
     eb6:	31 05       	cpc	r19, r1
     eb8:	19 f0       	breq	.+6      	; 0xec0 <malloc+0x60>
     eba:	42 17       	cp	r20, r18
     ebc:	53 07       	cpc	r21, r19
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <malloc+0x66>
     ec0:	9a 01       	movw	r18, r20
     ec2:	bd 01       	movw	r22, r26
     ec4:	ef 01       	movw	r28, r30
     ec6:	df 01       	movw	r26, r30
     ec8:	f8 01       	movw	r30, r16
     eca:	db cf       	rjmp	.-74     	; 0xe82 <malloc+0x22>
     ecc:	21 15       	cp	r18, r1
     ece:	31 05       	cpc	r19, r1
     ed0:	f9 f0       	breq	.+62     	; 0xf10 <malloc+0xb0>
     ed2:	28 1b       	sub	r18, r24
     ed4:	39 0b       	sbc	r19, r25
     ed6:	24 30       	cpi	r18, 0x04	; 4
     ed8:	31 05       	cpc	r19, r1
     eda:	80 f4       	brcc	.+32     	; 0xefc <malloc+0x9c>
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	61 15       	cp	r22, r1
     ee2:	71 05       	cpc	r23, r1
     ee4:	21 f0       	breq	.+8      	; 0xeee <malloc+0x8e>
     ee6:	fb 01       	movw	r30, r22
     ee8:	93 83       	std	Z+3, r25	; 0x03
     eea:	82 83       	std	Z+2, r24	; 0x02
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <malloc+0x96>
     eee:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
     ef2:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
     ef6:	fe 01       	movw	r30, r28
     ef8:	32 96       	adiw	r30, 0x02	; 2
     efa:	44 c0       	rjmp	.+136    	; 0xf84 <malloc+0x124>
     efc:	fe 01       	movw	r30, r28
     efe:	e2 0f       	add	r30, r18
     f00:	f3 1f       	adc	r31, r19
     f02:	81 93       	st	Z+, r24
     f04:	91 93       	st	Z+, r25
     f06:	22 50       	subi	r18, 0x02	; 2
     f08:	31 09       	sbc	r19, r1
     f0a:	39 83       	std	Y+1, r19	; 0x01
     f0c:	28 83       	st	Y, r18
     f0e:	3a c0       	rjmp	.+116    	; 0xf84 <malloc+0x124>
     f10:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
     f14:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
     f18:	23 2b       	or	r18, r19
     f1a:	41 f4       	brne	.+16     	; 0xf2c <malloc+0xcc>
     f1c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f20:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f24:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
     f28:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
     f2c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f30:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f34:	21 15       	cp	r18, r1
     f36:	31 05       	cpc	r19, r1
     f38:	41 f4       	brne	.+16     	; 0xf4a <malloc+0xea>
     f3a:	2d b7       	in	r18, 0x3d	; 61
     f3c:	3e b7       	in	r19, 0x3e	; 62
     f3e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f42:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f46:	24 1b       	sub	r18, r20
     f48:	35 0b       	sbc	r19, r21
     f4a:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
     f4e:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
     f52:	e2 17       	cp	r30, r18
     f54:	f3 07       	cpc	r31, r19
     f56:	a0 f4       	brcc	.+40     	; 0xf80 <malloc+0x120>
     f58:	2e 1b       	sub	r18, r30
     f5a:	3f 0b       	sbc	r19, r31
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	78 f0       	brcs	.+30     	; 0xf80 <malloc+0x120>
     f62:	ac 01       	movw	r20, r24
     f64:	4e 5f       	subi	r20, 0xFE	; 254
     f66:	5f 4f       	sbci	r21, 0xFF	; 255
     f68:	24 17       	cp	r18, r20
     f6a:	35 07       	cpc	r19, r21
     f6c:	48 f0       	brcs	.+18     	; 0xf80 <malloc+0x120>
     f6e:	4e 0f       	add	r20, r30
     f70:	5f 1f       	adc	r21, r31
     f72:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
     f76:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
     f7a:	81 93       	st	Z+, r24
     f7c:	91 93       	st	Z+, r25
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <malloc+0x124>
     f80:	e0 e0       	ldi	r30, 0x00	; 0
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	cf 01       	movw	r24, r30
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <free>:
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	09 f4       	brne	.+2      	; 0xf9a <free+0xa>
     f98:	81 c0       	rjmp	.+258    	; 0x109c <free+0x10c>
     f9a:	fc 01       	movw	r30, r24
     f9c:	32 97       	sbiw	r30, 0x02	; 2
     f9e:	13 82       	std	Z+3, r1	; 0x03
     fa0:	12 82       	std	Z+2, r1	; 0x02
     fa2:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
     fa6:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
     faa:	10 97       	sbiw	r26, 0x00	; 0
     fac:	81 f4       	brne	.+32     	; 0xfce <free+0x3e>
     fae:	20 81       	ld	r18, Z
     fb0:	31 81       	ldd	r19, Z+1	; 0x01
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
     fba:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
     fbe:	28 17       	cp	r18, r24
     fc0:	39 07       	cpc	r19, r25
     fc2:	51 f5       	brne	.+84     	; 0x1018 <free+0x88>
     fc4:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
     fc8:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
     fcc:	67 c0       	rjmp	.+206    	; 0x109c <free+0x10c>
     fce:	ed 01       	movw	r28, r26
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	ce 17       	cp	r28, r30
     fd6:	df 07       	cpc	r29, r31
     fd8:	40 f4       	brcc	.+16     	; 0xfea <free+0x5a>
     fda:	4a 81       	ldd	r20, Y+2	; 0x02
     fdc:	5b 81       	ldd	r21, Y+3	; 0x03
     fde:	9e 01       	movw	r18, r28
     fe0:	41 15       	cp	r20, r1
     fe2:	51 05       	cpc	r21, r1
     fe4:	f1 f0       	breq	.+60     	; 0x1022 <free+0x92>
     fe6:	ea 01       	movw	r28, r20
     fe8:	f5 cf       	rjmp	.-22     	; 0xfd4 <free+0x44>
     fea:	d3 83       	std	Z+3, r29	; 0x03
     fec:	c2 83       	std	Z+2, r28	; 0x02
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	84 0f       	add	r24, r20
     ff4:	95 1f       	adc	r25, r21
     ff6:	c8 17       	cp	r28, r24
     ff8:	d9 07       	cpc	r29, r25
     ffa:	59 f4       	brne	.+22     	; 0x1012 <free+0x82>
     ffc:	88 81       	ld	r24, Y
     ffe:	99 81       	ldd	r25, Y+1	; 0x01
    1000:	84 0f       	add	r24, r20
    1002:	95 1f       	adc	r25, r21
    1004:	02 96       	adiw	r24, 0x02	; 2
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	93 83       	std	Z+3, r25	; 0x03
    1010:	82 83       	std	Z+2, r24	; 0x02
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	29 f4       	brne	.+10     	; 0x1022 <free+0x92>
    1018:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
    101c:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
    1020:	3d c0       	rjmp	.+122    	; 0x109c <free+0x10c>
    1022:	e9 01       	movw	r28, r18
    1024:	fb 83       	std	Y+3, r31	; 0x03
    1026:	ea 83       	std	Y+2, r30	; 0x02
    1028:	49 91       	ld	r20, Y+
    102a:	59 91       	ld	r21, Y+
    102c:	c4 0f       	add	r28, r20
    102e:	d5 1f       	adc	r29, r21
    1030:	ec 17       	cp	r30, r28
    1032:	fd 07       	cpc	r31, r29
    1034:	61 f4       	brne	.+24     	; 0x104e <free+0xbe>
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	84 0f       	add	r24, r20
    103c:	95 1f       	adc	r25, r21
    103e:	02 96       	adiw	r24, 0x02	; 2
    1040:	e9 01       	movw	r28, r18
    1042:	99 83       	std	Y+1, r25	; 0x01
    1044:	88 83       	st	Y, r24
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	e0 e0       	ldi	r30, 0x00	; 0
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8d 91       	ld	r24, X+
    1056:	9c 91       	ld	r25, X
    1058:	13 97       	sbiw	r26, 0x03	; 3
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	19 f0       	breq	.+6      	; 0x1064 <free+0xd4>
    105e:	fd 01       	movw	r30, r26
    1060:	dc 01       	movw	r26, r24
    1062:	f7 cf       	rjmp	.-18     	; 0x1052 <free+0xc2>
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	9d 01       	movw	r18, r26
    106c:	2e 5f       	subi	r18, 0xFE	; 254
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	82 0f       	add	r24, r18
    1072:	93 1f       	adc	r25, r19
    1074:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
    1078:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
    107c:	28 17       	cp	r18, r24
    107e:	39 07       	cpc	r19, r25
    1080:	69 f4       	brne	.+26     	; 0x109c <free+0x10c>
    1082:	30 97       	sbiw	r30, 0x00	; 0
    1084:	29 f4       	brne	.+10     	; 0x1090 <free+0x100>
    1086:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
    108a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <free+0x104>
    1090:	13 82       	std	Z+3, r1	; 0x03
    1092:	12 82       	std	Z+2, r1	; 0x02
    1094:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
    1098:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <memset>:
    10a2:	dc 01       	movw	r26, r24
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <memset+0x6>
    10a6:	6d 93       	st	X+, r22
    10a8:	41 50       	subi	r20, 0x01	; 1
    10aa:	50 40       	sbci	r21, 0x00	; 0
    10ac:	e0 f7       	brcc	.-8      	; 0x10a6 <memset+0x4>
    10ae:	08 95       	ret

000010b0 <_exit>:
    10b0:	f8 94       	cli

000010b2 <__stop_program>:
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <__stop_program>
