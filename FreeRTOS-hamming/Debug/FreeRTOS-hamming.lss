
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000dea  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800112  00800112  00000e90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ad1  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d64  00000000  00000000  00003c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001802  00000000  00000000  00004985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  00006188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001166  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002601  00000000  00000000  0000798e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 05 	call	0xb12	; 0xb12 <main>
  9e:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
  ac:	0e 94 99 03 	call	0x732	; 0x732 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
  b0:	ce 01       	movw	r24, r28
  b2:	0e 94 cb 05 	call	0xb96	; 0xb96 <malloc>
  b6:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  b8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
  bc:	ce 01       	movw	r24, r28
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	if( pv )
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	41 f0       	breq	.+16     	; 0xdc <vPortFree+0x18>
  cc:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
  ce:	0e 94 99 03 	call	0x732	; 0x732 <vTaskSuspendAll>
		{
			free( pv );
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  d8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <xTaskResumeAll>
	}
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
  e2:	fc 01       	movw	r30, r24
  e4:	03 96       	adiw	r24, 0x03	; 3
  e6:	92 83       	std	Z+2, r25	; 0x02
  e8:	81 83       	std	Z+1, r24	; 0x01
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	3f ef       	ldi	r19, 0xFF	; 255
  ee:	34 83       	std	Z+4, r19	; 0x04
  f0:	23 83       	std	Z+3, r18	; 0x03
  f2:	96 83       	std	Z+6, r25	; 0x06
  f4:	85 83       	std	Z+5, r24	; 0x05
  f6:	90 87       	std	Z+8, r25	; 0x08
  f8:	87 83       	std	Z+7, r24	; 0x07
  fa:	10 82       	st	Z, r1
  fc:	08 95       	ret

000000fe <vListInitialiseItem>:
  fe:	fc 01       	movw	r30, r24
 100:	11 86       	std	Z+9, r1	; 0x09
 102:	10 86       	std	Z+8, r1	; 0x08
 104:	08 95       	ret

00000106 <vListInsertEnd>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	9c 01       	movw	r18, r24
 10c:	fb 01       	movw	r30, r22
 10e:	dc 01       	movw	r26, r24
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	cd 91       	ld	r28, X+
 114:	dc 91       	ld	r29, X
 116:	12 97       	sbiw	r26, 0x02	; 2
 118:	d3 83       	std	Z+3, r29	; 0x03
 11a:	c2 83       	std	Z+2, r28	; 0x02
 11c:	8c 81       	ldd	r24, Y+4	; 0x04
 11e:	9d 81       	ldd	r25, Y+5	; 0x05
 120:	95 83       	std	Z+5, r25	; 0x05
 122:	84 83       	std	Z+4, r24	; 0x04
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	9d 81       	ldd	r25, Y+5	; 0x05
 128:	dc 01       	movw	r26, r24
 12a:	13 96       	adiw	r26, 0x03	; 3
 12c:	7c 93       	st	X, r23
 12e:	6e 93       	st	-X, r22
 130:	12 97       	sbiw	r26, 0x02	; 2
 132:	7d 83       	std	Y+5, r23	; 0x05
 134:	6c 83       	std	Y+4, r22	; 0x04
 136:	31 87       	std	Z+9, r19	; 0x09
 138:	20 87       	std	Z+8, r18	; 0x08
 13a:	f9 01       	movw	r30, r18
 13c:	80 81       	ld	r24, Z
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 83       	st	Z, r24
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 14e:	a0 85       	ldd	r26, Z+8	; 0x08
 150:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 152:	c2 81       	ldd	r28, Z+2	; 0x02
 154:	d3 81       	ldd	r29, Z+3	; 0x03
 156:	84 81       	ldd	r24, Z+4	; 0x04
 158:	95 81       	ldd	r25, Z+5	; 0x05
 15a:	9d 83       	std	Y+5, r25	; 0x05
 15c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 15e:	c4 81       	ldd	r28, Z+4	; 0x04
 160:	d5 81       	ldd	r29, Z+5	; 0x05
 162:	82 81       	ldd	r24, Z+2	; 0x02
 164:	93 81       	ldd	r25, Z+3	; 0x03
 166:	9b 83       	std	Y+3, r25	; 0x03
 168:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	8d 91       	ld	r24, X+
 16e:	9c 91       	ld	r25, X
 170:	12 97       	sbiw	r26, 0x02	; 2
 172:	e8 17       	cp	r30, r24
 174:	f9 07       	cpc	r31, r25
 176:	31 f4       	brne	.+12     	; 0x184 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	95 81       	ldd	r25, Z+5	; 0x05
 17c:	12 96       	adiw	r26, 0x02	; 2
 17e:	9c 93       	st	X, r25
 180:	8e 93       	st	-X, r24
 182:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 184:	11 86       	std	Z+9, r1	; 0x09
 186:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 188:	8c 91       	ld	r24, X
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 18e:	8c 91       	ld	r24, X
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 196:	31 e1       	ldi	r19, 0x11	; 17
 198:	fc 01       	movw	r30, r24
 19a:	30 83       	st	Z, r19
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	22 e2       	ldi	r18, 0x22	; 34
 1a0:	20 83       	st	Z, r18
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	a3 e3       	ldi	r26, 0x33	; 51
 1a6:	a0 83       	st	Z, r26
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	60 83       	st	Z, r22
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	70 83       	st	Z, r23
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	10 82       	st	Z, r1
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	60 e8       	ldi	r22, 0x80	; 128
 1b8:	60 83       	st	Z, r22
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	10 82       	st	Z, r1
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	60 83       	st	Z, r22
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	63 e0       	ldi	r22, 0x03	; 3
 1c8:	60 83       	st	Z, r22
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	60 83       	st	Z, r22
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	65 e0       	ldi	r22, 0x05	; 5
 1d4:	60 83       	st	Z, r22
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	60 83       	st	Z, r22
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	60 83       	st	Z, r22
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	68 e0       	ldi	r22, 0x08	; 8
 1e6:	60 83       	st	Z, r22
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	69 e0       	ldi	r22, 0x09	; 9
 1ec:	60 83       	st	Z, r22
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	60 e1       	ldi	r22, 0x10	; 16
 1f2:	60 83       	st	Z, r22
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	30 83       	st	Z, r19
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	32 e1       	ldi	r19, 0x12	; 18
 1fc:	30 83       	st	Z, r19
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	33 e1       	ldi	r19, 0x13	; 19
 202:	30 83       	st	Z, r19
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	34 e1       	ldi	r19, 0x14	; 20
 208:	30 83       	st	Z, r19
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	35 e1       	ldi	r19, 0x15	; 21
 20e:	30 83       	st	Z, r19
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	36 e1       	ldi	r19, 0x16	; 22
 214:	30 83       	st	Z, r19
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	37 e1       	ldi	r19, 0x17	; 23
 21a:	30 83       	st	Z, r19
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	38 e1       	ldi	r19, 0x18	; 24
 220:	30 83       	st	Z, r19
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	39 e1       	ldi	r19, 0x19	; 25
 226:	30 83       	st	Z, r19
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	30 e2       	ldi	r19, 0x20	; 32
 22c:	30 83       	st	Z, r19
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	31 e2       	ldi	r19, 0x21	; 33
 232:	30 83       	st	Z, r19
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	20 83       	st	Z, r18
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	23 e2       	ldi	r18, 0x23	; 35
 23c:	20 83       	st	Z, r18
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	40 83       	st	Z, r20
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	50 83       	st	Z, r21
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	26 e2       	ldi	r18, 0x26	; 38
 24a:	20 83       	st	Z, r18
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	27 e2       	ldi	r18, 0x27	; 39
 250:	20 83       	st	Z, r18
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	28 e2       	ldi	r18, 0x28	; 40
 256:	20 83       	st	Z, r18
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	29 e2       	ldi	r18, 0x29	; 41
 25c:	20 83       	st	Z, r18
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	20 e3       	ldi	r18, 0x30	; 48
 262:	20 83       	st	Z, r18
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	21 e3       	ldi	r18, 0x31	; 49
 268:	20 83       	st	Z, r18
 26a:	86 97       	sbiw	r24, 0x26	; 38
 26c:	08 95       	ret

0000026e <xPortStartScheduler>:
 26e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 272:	89 ef       	ldi	r24, 0xF9	; 249
 274:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 278:	8b e0       	ldi	r24, 0x0B	; 11
 27a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 27e:	ef e6       	ldi	r30, 0x6F	; 111
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
 288:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 28c:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 290:	cd 91       	ld	r28, X+
 292:	cd bf       	out	0x3d, r28	; 61
 294:	dd 91       	ld	r29, X+
 296:	de bf       	out	0x3e, r29	; 62
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	7f 90       	pop	r7
 2ca:	6f 90       	pop	r6
 2cc:	5f 90       	pop	r5
 2ce:	4f 90       	pop	r4
 2d0:	3f 90       	pop	r3
 2d2:	2f 90       	pop	r2
 2d4:	1f 90       	pop	r1
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	08 95       	ret
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret

000002e2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	0f 92       	push	r0
 2ea:	1f 92       	push	r1
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 92       	push	r2
 2f0:	3f 92       	push	r3
 2f2:	4f 92       	push	r4
 2f4:	5f 92       	push	r5
 2f6:	6f 92       	push	r6
 2f8:	7f 92       	push	r7
 2fa:	8f 92       	push	r8
 2fc:	9f 92       	push	r9
 2fe:	af 92       	push	r10
 300:	bf 92       	push	r11
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
 32a:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 32e:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 332:	0d b6       	in	r0, 0x3d	; 61
 334:	0d 92       	st	X+, r0
 336:	0e b6       	in	r0, 0x3e	; 62
 338:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 33a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 33e:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 342:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 346:	cd 91       	ld	r28, X+
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	dd 91       	ld	r29, X+
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	bf 90       	pop	r11
 378:	af 90       	pop	r10
 37a:	9f 90       	pop	r9
 37c:	8f 90       	pop	r8
 37e:	7f 90       	pop	r7
 380:	6f 90       	pop	r6
 382:	5f 90       	pop	r5
 384:	4f 90       	pop	r4
 386:	3f 90       	pop	r3
 388:	2f 90       	pop	r2
 38a:	1f 90       	pop	r1
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0

	asm volatile ( "ret" );
 392:	08 95       	ret

00000394 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	0f 92       	push	r0
 39c:	1f 92       	push	r1
 39e:	11 24       	eor	r1, r1
 3a0:	2f 92       	push	r2
 3a2:	3f 92       	push	r3
 3a4:	4f 92       	push	r4
 3a6:	5f 92       	push	r5
 3a8:	6f 92       	push	r6
 3aa:	7f 92       	push	r7
 3ac:	8f 92       	push	r8
 3ae:	9f 92       	push	r9
 3b0:	af 92       	push	r10
 3b2:	bf 92       	push	r11
 3b4:	cf 92       	push	r12
 3b6:	df 92       	push	r13
 3b8:	ef 92       	push	r14
 3ba:	ff 92       	push	r15
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
 3dc:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 3e0:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 3e4:	0d b6       	in	r0, 0x3d	; 61
 3e6:	0d 92       	st	X+, r0
 3e8:	0e b6       	in	r0, 0x3e	; 62
 3ea:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 3ec:	0e 94 9f 03 	call	0x73e	; 0x73e <xTaskIncrementTick>
 3f0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 3f2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 3f6:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 3fa:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 3fe:	cd 91       	ld	r28, X+
 400:	cd bf       	out	0x3d, r28	; 61
 402:	dd 91       	ld	r29, X+
 404:	de bf       	out	0x3e, r29	; 62
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	7f 90       	pop	r7
 438:	6f 90       	pop	r6
 43a:	5f 90       	pop	r5
 43c:	4f 90       	pop	r4
 43e:	3f 90       	pop	r3
 440:	2f 90       	pop	r2
 442:	1f 90       	pop	r1
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0

	asm volatile ( "ret" );
 44a:	08 95       	ret

0000044c <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 44c:	0e 94 ca 01 	call	0x394	; 0x394 <vPortYieldFromTick>
		asm volatile ( "reti" );
 450:	18 95       	reti

00000452 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 452:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 456:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 45a:	80 81       	ld	r24, Z
 45c:	81 11       	cpse	r24, r1
 45e:	07 c0       	rjmp	.+14     	; 0x46e <prvResetNextTaskUnblockTime+0x1c>
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	9f ef       	ldi	r25, 0xFF	; 255
 464:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 468:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 46c:	08 95       	ret
 46e:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 472:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 476:	05 80       	ldd	r0, Z+5	; 0x05
 478:	f6 81       	ldd	r31, Z+6	; 0x06
 47a:	e0 2d       	mov	r30, r0
 47c:	06 80       	ldd	r0, Z+6	; 0x06
 47e:	f7 81       	ldd	r31, Z+7	; 0x07
 480:	e0 2d       	mov	r30, r0
 482:	82 81       	ldd	r24, Z+2	; 0x02
 484:	93 81       	ldd	r25, Z+3	; 0x03
 486:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 48a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 48e:	08 95       	ret

00000490 <prvIdleTask>:
 490:	cf e3       	ldi	r28, 0x3F	; 63
 492:	d1 e0       	ldi	r29, 0x01	; 1
 494:	88 81       	ld	r24, Y
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	e8 f3       	brcs	.-6      	; 0x494 <prvIdleTask+0x4>
 49a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <vPortYield>
 49e:	fa cf       	rjmp	.-12     	; 0x494 <prvIdleTask+0x4>

000004a0 <xTaskCreate>:
 4a0:	4f 92       	push	r4
 4a2:	5f 92       	push	r5
 4a4:	6f 92       	push	r6
 4a6:	7f 92       	push	r7
 4a8:	8f 92       	push	r8
 4aa:	9f 92       	push	r9
 4ac:	af 92       	push	r10
 4ae:	bf 92       	push	r11
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	4c 01       	movw	r8, r24
 4c0:	6b 01       	movw	r12, r22
 4c2:	5a 01       	movw	r10, r20
 4c4:	29 01       	movw	r4, r18
 4c6:	ca 01       	movw	r24, r20
 4c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
 4cc:	3c 01       	movw	r6, r24
 4ce:	89 2b       	or	r24, r25
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <xTaskCreate+0x34>
 4d2:	f4 c0       	rjmp	.+488    	; 0x6bc <xTaskCreate+0x21c>
 4d4:	8c e2       	ldi	r24, 0x2C	; 44
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
 4dc:	ec 01       	movw	r28, r24
 4de:	89 2b       	or	r24, r25
 4e0:	c1 f0       	breq	.+48     	; 0x512 <xTaskCreate+0x72>
 4e2:	78 8e       	std	Y+24, r7	; 0x18
 4e4:	6f 8a       	std	Y+23, r6	; 0x17
 4e6:	a5 01       	movw	r20, r10
 4e8:	65 ea       	ldi	r22, 0xA5	; 165
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	c3 01       	movw	r24, r6
 4ee:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <memset>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	a8 1a       	sub	r10, r24
 4f6:	b1 08       	sbc	r11, r1
 4f8:	8f 89       	ldd	r24, Y+23	; 0x17
 4fa:	98 8d       	ldd	r25, Y+24	; 0x18
 4fc:	a8 0e       	add	r10, r24
 4fe:	b9 1e       	adc	r11, r25
 500:	bc a2       	std	Y+36, r11	; 0x24
 502:	ab a2       	std	Y+35, r10	; 0x23
 504:	d6 01       	movw	r26, r12
 506:	8c 91       	ld	r24, X
 508:	89 8f       	std	Y+25, r24	; 0x19
 50a:	8c 91       	ld	r24, X
 50c:	81 11       	cpse	r24, r1
 50e:	05 c0       	rjmp	.+10     	; 0x51a <xTaskCreate+0x7a>
 510:	18 c0       	rjmp	.+48     	; 0x542 <xTaskCreate+0xa2>
 512:	c3 01       	movw	r24, r6
 514:	0e 94 62 00 	call	0xc4	; 0xc4 <vPortFree>
 518:	d1 c0       	rjmp	.+418    	; 0x6bc <xTaskCreate+0x21c>
 51a:	ae 01       	movw	r20, r28
 51c:	46 5e       	subi	r20, 0xE6	; 230
 51e:	5f 4f       	sbci	r21, 0xFF	; 255
 520:	f6 01       	movw	r30, r12
 522:	31 96       	adiw	r30, 0x01	; 1
 524:	b8 e0       	ldi	r27, 0x08	; 8
 526:	cb 0e       	add	r12, r27
 528:	d1 1c       	adc	r13, r1
 52a:	cf 01       	movw	r24, r30
 52c:	21 91       	ld	r18, Z+
 52e:	da 01       	movw	r26, r20
 530:	2d 93       	st	X+, r18
 532:	ad 01       	movw	r20, r26
 534:	dc 01       	movw	r26, r24
 536:	8c 91       	ld	r24, X
 538:	88 23       	and	r24, r24
 53a:	19 f0       	breq	.+6      	; 0x542 <xTaskCreate+0xa2>
 53c:	ec 15       	cp	r30, r12
 53e:	fd 05       	cpc	r31, r13
 540:	a1 f7       	brne	.-24     	; 0x52a <xTaskCreate+0x8a>
 542:	18 a2       	std	Y+32, r1	; 0x20
 544:	04 30       	cpi	r16, 0x04	; 4
 546:	08 f0       	brcs	.+2      	; 0x54a <xTaskCreate+0xaa>
 548:	03 e0       	ldi	r16, 0x03	; 3
 54a:	0e 8b       	std	Y+22, r16	; 0x16
 54c:	0d a3       	std	Y+37, r16	; 0x25
 54e:	1e a2       	std	Y+38, r1	; 0x26
 550:	6e 01       	movw	r12, r28
 552:	b2 e0       	ldi	r27, 0x02	; 2
 554:	cb 0e       	add	r12, r27
 556:	d1 1c       	adc	r13, r1
 558:	c6 01       	movw	r24, r12
 55a:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialiseItem>
 55e:	ce 01       	movw	r24, r28
 560:	0c 96       	adiw	r24, 0x0c	; 12
 562:	0e 94 7f 00 	call	0xfe	; 0xfe <vListInitialiseItem>
 566:	d9 87       	std	Y+9, r29	; 0x09
 568:	c8 87       	std	Y+8, r28	; 0x08
 56a:	84 e0       	ldi	r24, 0x04	; 4
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	80 1b       	sub	r24, r16
 570:	91 09       	sbc	r25, r1
 572:	9d 87       	std	Y+13, r25	; 0x0d
 574:	8c 87       	std	Y+12, r24	; 0x0c
 576:	db 8b       	std	Y+19, r29	; 0x13
 578:	ca 8b       	std	Y+18, r28	; 0x12
 57a:	1f a2       	std	Y+39, r1	; 0x27
 57c:	18 a6       	std	Y+40, r1	; 0x28
 57e:	19 a6       	std	Y+41, r1	; 0x29
 580:	1a a6       	std	Y+42, r1	; 0x2a
 582:	1b a6       	std	Y+43, r1	; 0x2b
 584:	a2 01       	movw	r20, r4
 586:	b4 01       	movw	r22, r8
 588:	c5 01       	movw	r24, r10
 58a:	0e 94 cb 00 	call	0x196	; 0x196 <pxPortInitialiseStack>
 58e:	99 83       	std	Y+1, r25	; 0x01
 590:	88 83       	st	Y, r24
 592:	e1 14       	cp	r14, r1
 594:	f1 04       	cpc	r15, r1
 596:	19 f0       	breq	.+6      	; 0x59e <xTaskCreate+0xfe>
 598:	f7 01       	movw	r30, r14
 59a:	d1 83       	std	Z+1, r29	; 0x01
 59c:	c0 83       	st	Z, r28
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	0f 92       	push	r0
 5a4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 5ae:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
 5b2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 5b6:	89 2b       	or	r24, r25
 5b8:	89 f5       	brne	.+98     	; 0x61c <xTaskCreate+0x17c>
 5ba:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 5be:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 5c2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	c9 f5       	brne	.+114    	; 0x63c <xTaskCreate+0x19c>
 5ca:	8f e3       	ldi	r24, 0x3F	; 63
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 5d2:	88 e4       	ldi	r24, 0x48	; 72
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 5da:	81 e5       	ldi	r24, 0x51	; 81
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 5e2:	8a e5       	ldi	r24, 0x5A	; 90
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 5ea:	86 e3       	ldi	r24, 0x36	; 54
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 5f2:	8d e2       	ldi	r24, 0x2D	; 45
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 5fa:	80 e2       	ldi	r24, 0x20	; 32
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 71 00 	call	0xe2	; 0xe2 <vListInitialise>
 602:	86 e3       	ldi	r24, 0x36	; 54
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
 60a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
 60e:	8d e2       	ldi	r24, 0x2D	; 45
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 616:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 61a:	10 c0       	rjmp	.+32     	; 0x63c <xTaskCreate+0x19c>
 61c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 620:	81 11       	cpse	r24, r1
 622:	0c c0       	rjmp	.+24     	; 0x63c <xTaskCreate+0x19c>
 624:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 628:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 62c:	96 89       	ldd	r25, Z+22	; 0x16
 62e:	8e 89       	ldd	r24, Y+22	; 0x16
 630:	89 17       	cp	r24, r25
 632:	20 f0       	brcs	.+8      	; 0x63c <xTaskCreate+0x19c>
 634:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 638:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 63c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 640:	8f 5f       	subi	r24, 0xFF	; 255
 642:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 646:	e0 90 63 01 	lds	r14, 0x0163	; 0x800163 <pxCurrentTCB>
 64a:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 64e:	6b a1       	ldd	r22, Y+35	; 0x23
 650:	7c a1       	ldd	r23, Y+36	; 0x24
 652:	88 81       	ld	r24, Y
 654:	99 81       	ldd	r25, Y+1	; 0x01
 656:	0e 94 b4 05 	call	0xb68	; 0xb68 <uxChecksumGetTaskChecksum>
 65a:	d7 01       	movw	r26, r14
 65c:	92 96       	adiw	r26, 0x22	; 34
 65e:	9c 93       	st	X, r25
 660:	8e 93       	st	-X, r24
 662:	91 97       	sbiw	r26, 0x21	; 33
 664:	8e 89       	ldd	r24, Y+22	; 0x16
 666:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 66a:	98 17       	cp	r25, r24
 66c:	10 f4       	brcc	.+4      	; 0x672 <xTaskCreate+0x1d2>
 66e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	9c 01       	movw	r18, r24
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	22 0f       	add	r18, r18
 680:	33 1f       	adc	r19, r19
 682:	82 0f       	add	r24, r18
 684:	93 1f       	adc	r25, r19
 686:	b6 01       	movw	r22, r12
 688:	81 5c       	subi	r24, 0xC1	; 193
 68a:	9e 4f       	sbci	r25, 0xFE	; 254
 68c:	0e 94 83 00 	call	0x106	; 0x106 <vListInsertEnd>
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 698:	88 23       	and	r24, r24
 69a:	61 f0       	breq	.+24     	; 0x6b4 <xTaskCreate+0x214>
 69c:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 6a0:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 6a4:	96 89       	ldd	r25, Z+22	; 0x16
 6a6:	8e 89       	ldd	r24, Y+22	; 0x16
 6a8:	98 17       	cp	r25, r24
 6aa:	30 f4       	brcc	.+12     	; 0x6b8 <xTaskCreate+0x218>
 6ac:	0e 94 71 01 	call	0x2e2	; 0x2e2 <vPortYield>
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <xTaskCreate+0x21e>
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	03 c0       	rjmp	.+6      	; 0x6be <xTaskCreate+0x21e>
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <xTaskCreate+0x21e>
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	bf 90       	pop	r11
 6ce:	af 90       	pop	r10
 6d0:	9f 90       	pop	r9
 6d2:	8f 90       	pop	r8
 6d4:	7f 90       	pop	r7
 6d6:	6f 90       	pop	r6
 6d8:	5f 90       	pop	r5
 6da:	4f 90       	pop	r4
 6dc:	08 95       	ret

000006de <vTaskStartScheduler>:
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	0f 2e       	mov	r0, r31
 6e6:	f3 e1       	ldi	r31, 0x13	; 19
 6e8:	ef 2e       	mov	r14, r31
 6ea:	f1 e0       	ldi	r31, 0x01	; 1
 6ec:	ff 2e       	mov	r15, r31
 6ee:	f0 2d       	mov	r31, r0
 6f0:	00 e0       	ldi	r16, 0x00	; 0
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	44 e6       	ldi	r20, 0x64	; 100
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	66 e0       	ldi	r22, 0x06	; 6
 6fc:	71 e0       	ldi	r23, 0x01	; 1
 6fe:	88 e4       	ldi	r24, 0x48	; 72
 700:	92 e0       	ldi	r25, 0x02	; 2
 702:	0e 94 50 02 	call	0x4a0	; 0x4a0 <xTaskCreate>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	81 f4       	brne	.+32     	; 0x72a <vTaskStartScheduler+0x4c>
 70a:	f8 94       	cli
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 714:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 71e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 722:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 726:	0e 94 37 01 	call	0x26e	; 0x26e <xPortStartScheduler>
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	08 95       	ret

00000732 <vTaskSuspendAll>:
 732:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 736:	8f 5f       	subi	r24, 0xFF	; 255
 738:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 73c:	08 95       	ret

0000073e <xTaskIncrementTick>:
 73e:	cf 92       	push	r12
 740:	df 92       	push	r13
 742:	ef 92       	push	r14
 744:	ff 92       	push	r15
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 752:	81 11       	cpse	r24, r1
 754:	99 c0       	rjmp	.+306    	; 0x888 <xTaskIncrementTick+0x14a>
 756:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 75a:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	e8 1a       	sub	r14, r24
 762:	f8 0a       	sbc	r15, r24
 764:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 768:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 76c:	e1 14       	cp	r14, r1
 76e:	f1 04       	cpc	r15, r1
 770:	b9 f4       	brne	.+46     	; 0x7a0 <xTaskIncrementTick+0x62>
 772:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
 776:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 77a:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
 77e:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 782:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
 786:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
 78a:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 78e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 792:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 796:	8f 5f       	subi	r24, 0xFF	; 255
 798:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 79c:	0e 94 29 02 	call	0x452	; 0x452 <prvResetNextTaskUnblockTime>
 7a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 7a4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 7a8:	e8 16       	cp	r14, r24
 7aa:	f9 06       	cpc	r15, r25
 7ac:	10 f4       	brcc	.+4      	; 0x7b2 <xTaskIncrementTick+0x74>
 7ae:	d1 2c       	mov	r13, r1
 7b0:	53 c0       	rjmp	.+166    	; 0x858 <xTaskIncrementTick+0x11a>
 7b2:	d1 2c       	mov	r13, r1
 7b4:	cc 24       	eor	r12, r12
 7b6:	c3 94       	inc	r12
 7b8:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 7bc:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 7c0:	80 81       	ld	r24, Z
 7c2:	81 11       	cpse	r24, r1
 7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <xTaskIncrementTick+0x96>
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	9f ef       	ldi	r25, 0xFF	; 255
 7ca:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 7ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 7d2:	42 c0       	rjmp	.+132    	; 0x858 <xTaskIncrementTick+0x11a>
 7d4:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 7d8:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 7dc:	05 80       	ldd	r0, Z+5	; 0x05
 7de:	f6 81       	ldd	r31, Z+6	; 0x06
 7e0:	e0 2d       	mov	r30, r0
 7e2:	c6 81       	ldd	r28, Z+6	; 0x06
 7e4:	d7 81       	ldd	r29, Z+7	; 0x07
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	9b 81       	ldd	r25, Y+3	; 0x03
 7ea:	e8 16       	cp	r14, r24
 7ec:	f9 06       	cpc	r15, r25
 7ee:	28 f4       	brcc	.+10     	; 0x7fa <xTaskIncrementTick+0xbc>
 7f0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 7f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 7f8:	2f c0       	rjmp	.+94     	; 0x858 <xTaskIncrementTick+0x11a>
 7fa:	8e 01       	movw	r16, r28
 7fc:	0e 5f       	subi	r16, 0xFE	; 254
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	c8 01       	movw	r24, r16
 802:	0e 94 a4 00 	call	0x148	; 0x148 <uxListRemove>
 806:	8c 89       	ldd	r24, Y+20	; 0x14
 808:	9d 89       	ldd	r25, Y+21	; 0x15
 80a:	89 2b       	or	r24, r25
 80c:	21 f0       	breq	.+8      	; 0x816 <xTaskIncrementTick+0xd8>
 80e:	ce 01       	movw	r24, r28
 810:	0c 96       	adiw	r24, 0x0c	; 12
 812:	0e 94 a4 00 	call	0x148	; 0x148 <uxListRemove>
 816:	8e 89       	ldd	r24, Y+22	; 0x16
 818:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 81c:	98 17       	cp	r25, r24
 81e:	10 f4       	brcc	.+4      	; 0x824 <xTaskIncrementTick+0xe6>
 820:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	9c 01       	movw	r18, r24
 828:	22 0f       	add	r18, r18
 82a:	33 1f       	adc	r19, r19
 82c:	22 0f       	add	r18, r18
 82e:	33 1f       	adc	r19, r19
 830:	22 0f       	add	r18, r18
 832:	33 1f       	adc	r19, r19
 834:	82 0f       	add	r24, r18
 836:	93 1f       	adc	r25, r19
 838:	b8 01       	movw	r22, r16
 83a:	81 5c       	subi	r24, 0xC1	; 193
 83c:	9e 4f       	sbci	r25, 0xFE	; 254
 83e:	0e 94 83 00 	call	0x106	; 0x106 <vListInsertEnd>
 842:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 846:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 84a:	9e 89       	ldd	r25, Y+22	; 0x16
 84c:	86 89       	ldd	r24, Z+22	; 0x16
 84e:	98 17       	cp	r25, r24
 850:	08 f4       	brcc	.+2      	; 0x854 <xTaskIncrementTick+0x116>
 852:	b2 cf       	rjmp	.-156    	; 0x7b8 <xTaskIncrementTick+0x7a>
 854:	dc 2c       	mov	r13, r12
 856:	b0 cf       	rjmp	.-160    	; 0x7b8 <xTaskIncrementTick+0x7a>
 858:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 85c:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 860:	86 89       	ldd	r24, Z+22	; 0x16
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	fc 01       	movw	r30, r24
 866:	ee 0f       	add	r30, r30
 868:	ff 1f       	adc	r31, r31
 86a:	ee 0f       	add	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	ee 0f       	add	r30, r30
 870:	ff 1f       	adc	r31, r31
 872:	8e 0f       	add	r24, r30
 874:	9f 1f       	adc	r25, r31
 876:	fc 01       	movw	r30, r24
 878:	e1 5c       	subi	r30, 0xC1	; 193
 87a:	fe 4f       	sbci	r31, 0xFE	; 254
 87c:	80 81       	ld	r24, Z
 87e:	82 30       	cpi	r24, 0x02	; 2
 880:	48 f0       	brcs	.+18     	; 0x894 <xTaskIncrementTick+0x156>
 882:	dd 24       	eor	r13, r13
 884:	d3 94       	inc	r13
 886:	06 c0       	rjmp	.+12     	; 0x894 <xTaskIncrementTick+0x156>
 888:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 88c:	8f 5f       	subi	r24, 0xFF	; 255
 88e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 892:	d1 2c       	mov	r13, r1
 894:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 898:	88 23       	and	r24, r24
 89a:	11 f0       	breq	.+4      	; 0x8a0 <xTaskIncrementTick+0x162>
 89c:	dd 24       	eor	r13, r13
 89e:	d3 94       	inc	r13
 8a0:	8d 2d       	mov	r24, r13
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	08 95       	ret

000008b4 <xTaskResumeAll>:
 8b4:	df 92       	push	r13
 8b6:	ef 92       	push	r14
 8b8:	ff 92       	push	r15
 8ba:	0f 93       	push	r16
 8bc:	1f 93       	push	r17
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	0f 92       	push	r0
 8c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 8cc:	81 50       	subi	r24, 0x01	; 1
 8ce:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 8d2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 8d6:	81 11       	cpse	r24, r1
 8d8:	5f c0       	rjmp	.+190    	; 0x998 <__stack+0x99>
 8da:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 8de:	81 11       	cpse	r24, r1
 8e0:	33 c0       	rjmp	.+102    	; 0x948 <__stack+0x49>
 8e2:	5d c0       	rjmp	.+186    	; 0x99e <__stack+0x9f>
 8e4:	d7 01       	movw	r26, r14
 8e6:	15 96       	adiw	r26, 0x05	; 5
 8e8:	ed 91       	ld	r30, X+
 8ea:	fc 91       	ld	r31, X
 8ec:	16 97       	sbiw	r26, 0x06	; 6
 8ee:	c6 81       	ldd	r28, Z+6	; 0x06
 8f0:	d7 81       	ldd	r29, Z+7	; 0x07
 8f2:	ce 01       	movw	r24, r28
 8f4:	0c 96       	adiw	r24, 0x0c	; 12
 8f6:	0e 94 a4 00 	call	0x148	; 0x148 <uxListRemove>
 8fa:	8e 01       	movw	r16, r28
 8fc:	0e 5f       	subi	r16, 0xFE	; 254
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	c8 01       	movw	r24, r16
 902:	0e 94 a4 00 	call	0x148	; 0x148 <uxListRemove>
 906:	8e 89       	ldd	r24, Y+22	; 0x16
 908:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 90c:	98 17       	cp	r25, r24
 90e:	10 f4       	brcc	.+4      	; 0x914 <__stack+0x15>
 910:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	9c 01       	movw	r18, r24
 918:	22 0f       	add	r18, r18
 91a:	33 1f       	adc	r19, r19
 91c:	22 0f       	add	r18, r18
 91e:	33 1f       	adc	r19, r19
 920:	22 0f       	add	r18, r18
 922:	33 1f       	adc	r19, r19
 924:	82 0f       	add	r24, r18
 926:	93 1f       	adc	r25, r19
 928:	b8 01       	movw	r22, r16
 92a:	81 5c       	subi	r24, 0xC1	; 193
 92c:	9e 4f       	sbci	r25, 0xFE	; 254
 92e:	0e 94 83 00 	call	0x106	; 0x106 <vListInsertEnd>
 932:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 936:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 93a:	9e 89       	ldd	r25, Y+22	; 0x16
 93c:	86 89       	ldd	r24, Z+22	; 0x16
 93e:	98 17       	cp	r25, r24
 940:	68 f0       	brcs	.+26     	; 0x95c <__stack+0x5d>
 942:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 946:	0a c0       	rjmp	.+20     	; 0x95c <__stack+0x5d>
 948:	c0 e0       	ldi	r28, 0x00	; 0
 94a:	d0 e0       	ldi	r29, 0x00	; 0
 94c:	0f 2e       	mov	r0, r31
 94e:	f0 e2       	ldi	r31, 0x20	; 32
 950:	ef 2e       	mov	r14, r31
 952:	f1 e0       	ldi	r31, 0x01	; 1
 954:	ff 2e       	mov	r15, r31
 956:	f0 2d       	mov	r31, r0
 958:	dd 24       	eor	r13, r13
 95a:	d3 94       	inc	r13
 95c:	f7 01       	movw	r30, r14
 95e:	80 81       	ld	r24, Z
 960:	81 11       	cpse	r24, r1
 962:	c0 cf       	rjmp	.-128    	; 0x8e4 <xTaskResumeAll+0x30>
 964:	cd 2b       	or	r28, r29
 966:	11 f0       	breq	.+4      	; 0x96c <__stack+0x6d>
 968:	0e 94 29 02 	call	0x452	; 0x452 <prvResetNextTaskUnblockTime>
 96c:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 970:	cc 23       	and	r28, r28
 972:	51 f0       	breq	.+20     	; 0x988 <__stack+0x89>
 974:	d1 e0       	ldi	r29, 0x01	; 1
 976:	0e 94 9f 03 	call	0x73e	; 0x73e <xTaskIncrementTick>
 97a:	81 11       	cpse	r24, r1
 97c:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 980:	c1 50       	subi	r28, 0x01	; 1
 982:	c9 f7       	brne	.-14     	; 0x976 <__stack+0x77>
 984:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 988:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 98c:	88 23       	and	r24, r24
 98e:	31 f0       	breq	.+12     	; 0x99c <__stack+0x9d>
 990:	0e 94 71 01 	call	0x2e2	; 0x2e2 <vPortYield>
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	03 c0       	rjmp	.+6      	; 0x99e <__stack+0x9f>
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	01 c0       	rjmp	.+2      	; 0x99e <__stack+0x9f>
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	1f 91       	pop	r17
 9a8:	0f 91       	pop	r16
 9aa:	ff 90       	pop	r15
 9ac:	ef 90       	pop	r14
 9ae:	df 90       	pop	r13
 9b0:	08 95       	ret

000009b2 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 9b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 9ba:	88 23       	and	r24, r24
 9bc:	21 f0       	breq	.+8      	; 0x9c6 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 9c4:	8e c0       	rjmp	.+284    	; 0xae2 <vTaskSwitchContext+0x130>
	}
	else
	{
		xYieldPending = pdFALSE;
 9c6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 9ca:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
 9ce:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9d2:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 9d6:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9da:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 9de:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9e2:	93 96       	adiw	r26, 0x23	; 35
 9e4:	6d 91       	ld	r22, X+
 9e6:	7c 91       	ld	r23, X
 9e8:	94 97       	sbiw	r26, 0x24	; 36
 9ea:	80 81       	ld	r24, Z
 9ec:	91 81       	ldd	r25, Z+1	; 0x01
 9ee:	0e 94 b4 05 	call	0xb68	; 0xb68 <uxChecksumGetTaskChecksum>
 9f2:	9a a3       	std	Y+34, r25	; 0x22
 9f4:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 9f6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 9fa:	82 2f       	mov	r24, r18
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	fc 01       	movw	r30, r24
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	ee 0f       	add	r30, r30
 a0a:	ff 1f       	adc	r31, r31
 a0c:	e8 0f       	add	r30, r24
 a0e:	f9 1f       	adc	r31, r25
 a10:	e1 5c       	subi	r30, 0xC1	; 193
 a12:	fe 4f       	sbci	r31, 0xFE	; 254
 a14:	30 81       	ld	r19, Z
 a16:	31 11       	cpse	r19, r1
 a18:	11 c0       	rjmp	.+34     	; 0xa3c <vTaskSwitchContext+0x8a>
 a1a:	21 50       	subi	r18, 0x01	; 1
 a1c:	82 2f       	mov	r24, r18
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	fc 01       	movw	r30, r24
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	ee 0f       	add	r30, r30
 a28:	ff 1f       	adc	r31, r31
 a2a:	ee 0f       	add	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	e8 0f       	add	r30, r24
 a30:	f9 1f       	adc	r31, r25
 a32:	e1 5c       	subi	r30, 0xC1	; 193
 a34:	fe 4f       	sbci	r31, 0xFE	; 254
 a36:	30 81       	ld	r19, Z
 a38:	33 23       	and	r19, r19
 a3a:	79 f3       	breq	.-34     	; 0xa1a <vTaskSwitchContext+0x68>
 a3c:	ac 01       	movw	r20, r24
 a3e:	44 0f       	add	r20, r20
 a40:	55 1f       	adc	r21, r21
 a42:	44 0f       	add	r20, r20
 a44:	55 1f       	adc	r21, r21
 a46:	44 0f       	add	r20, r20
 a48:	55 1f       	adc	r21, r21
 a4a:	48 0f       	add	r20, r24
 a4c:	59 1f       	adc	r21, r25
 a4e:	da 01       	movw	r26, r20
 a50:	a1 5c       	subi	r26, 0xC1	; 193
 a52:	be 4f       	sbci	r27, 0xFE	; 254
 a54:	11 96       	adiw	r26, 0x01	; 1
 a56:	ed 91       	ld	r30, X+
 a58:	fc 91       	ld	r31, X
 a5a:	12 97       	sbiw	r26, 0x02	; 2
 a5c:	02 80       	ldd	r0, Z+2	; 0x02
 a5e:	f3 81       	ldd	r31, Z+3	; 0x03
 a60:	e0 2d       	mov	r30, r0
 a62:	12 96       	adiw	r26, 0x02	; 2
 a64:	fc 93       	st	X, r31
 a66:	ee 93       	st	-X, r30
 a68:	11 97       	sbiw	r26, 0x01	; 1
 a6a:	4e 5b       	subi	r20, 0xBE	; 190
 a6c:	5e 4f       	sbci	r21, 0xFE	; 254
 a6e:	e4 17       	cp	r30, r20
 a70:	f5 07       	cpc	r31, r21
 a72:	29 f4       	brne	.+10     	; 0xa7e <vTaskSwitchContext+0xcc>
 a74:	42 81       	ldd	r20, Z+2	; 0x02
 a76:	53 81       	ldd	r21, Z+3	; 0x03
 a78:	fd 01       	movw	r30, r26
 a7a:	52 83       	std	Z+2, r21	; 0x02
 a7c:	41 83       	std	Z+1, r20	; 0x01
 a7e:	fc 01       	movw	r30, r24
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	ee 0f       	add	r30, r30
 a86:	ff 1f       	adc	r31, r31
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	8e 0f       	add	r24, r30
 a8e:	9f 1f       	adc	r25, r31
 a90:	fc 01       	movw	r30, r24
 a92:	e1 5c       	subi	r30, 0xC1	; 193
 a94:	fe 4f       	sbci	r31, 0xFE	; 254
 a96:	01 80       	ldd	r0, Z+1	; 0x01
 a98:	f2 81       	ldd	r31, Z+2	; 0x02
 a9a:	e0 2d       	mov	r30, r0
 a9c:	86 81       	ldd	r24, Z+6	; 0x06
 a9e:	97 81       	ldd	r25, Z+7	; 0x07
 aa0:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 aa4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 aa8:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 aac:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 ab0:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ab4:	c1 a1       	ldd	r28, Z+33	; 0x21
 ab6:	d2 a1       	ldd	r29, Z+34	; 0x22
 ab8:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 abc:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ac0:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 ac4:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ac8:	93 96       	adiw	r26, 0x23	; 35
 aca:	6d 91       	ld	r22, X+
 acc:	7c 91       	ld	r23, X
 ace:	94 97       	sbiw	r26, 0x24	; 36
 ad0:	80 81       	ld	r24, Z
 ad2:	91 81       	ldd	r25, Z+1	; 0x01
 ad4:	0e 94 b4 05 	call	0xb68	; 0xb68 <uxChecksumGetTaskChecksum>
 ad8:	c8 17       	cp	r28, r24
 ada:	d9 07       	cpc	r29, r25
 adc:	11 f4       	brne	.+4      	; 0xae2 <vTaskSwitchContext+0x130>
 ade:	0e 94 ad 05 	call	0xb5a	; 0xb5a <vApplicationTaskChecksumHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <_Z7task_txPv>:
		globa=0x01;
	}
	
	
	void vApplicationTaskChecksumHook1( void ){
		globa1=0x02;
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	00 d0       	rcall	.+0      	; 0xaee <_Z7task_txPv+0x6>
 aee:	cd b7       	in	r28, 0x3d	; 61
 af0:	de b7       	in	r29, 0x3e	; 62
 af2:	8d e2       	ldi	r24, 0x2D	; 45
 af4:	89 83       	std	Y+1, r24	; 0x01
 af6:	8a 83       	std	Y+2, r24	; 0x02
 af8:	82 e3       	ldi	r24, 0x32	; 50
 afa:	89 83       	std	Y+1, r24	; 0x01
 afc:	fe cf       	rjmp	.-4      	; 0xafa <_Z7task_txPv+0x12>

00000afe <_Z7task_rxPv>:
 afe:	cf 93       	push	r28
 b00:	df 93       	push	r29
 b02:	00 d0       	rcall	.+0      	; 0xb04 <_Z7task_rxPv+0x6>
 b04:	cd b7       	in	r28, 0x3d	; 61
 b06:	de b7       	in	r29, 0x3e	; 62
 b08:	85 e5       	ldi	r24, 0x55	; 85
 b0a:	89 83       	std	Y+1, r24	; 0x01
 b0c:	8d e2       	ldi	r24, 0x2D	; 45
 b0e:	8a 83       	std	Y+2, r24	; 0x02
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <_Z7task_rxPv+0x12>

00000b12 <main>:
 b12:	ef 92       	push	r14
 b14:	ff 92       	push	r15
 b16:	0f 93       	push	r16
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	84 b9       	out	0x04, r24	; 4
 b1c:	e1 2c       	mov	r14, r1
 b1e:	f1 2c       	mov	r15, r1
 b20:	01 e0       	ldi	r16, 0x01	; 1
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	44 e6       	ldi	r20, 0x64	; 100
 b28:	50 e0       	ldi	r21, 0x00	; 0
 b2a:	6b e0       	ldi	r22, 0x0B	; 11
 b2c:	71 e0       	ldi	r23, 0x01	; 1
 b2e:	84 e7       	ldi	r24, 0x74	; 116
 b30:	95 e0       	ldi	r25, 0x05	; 5
 b32:	0e 94 50 02 	call	0x4a0	; 0x4a0 <xTaskCreate>
 b36:	20 e0       	ldi	r18, 0x00	; 0
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	44 e6       	ldi	r20, 0x64	; 100
 b3c:	50 e0       	ldi	r21, 0x00	; 0
 b3e:	6e e0       	ldi	r22, 0x0E	; 14
 b40:	71 e0       	ldi	r23, 0x01	; 1
 b42:	8f e7       	ldi	r24, 0x7F	; 127
 b44:	95 e0       	ldi	r25, 0x05	; 5
 b46:	0e 94 50 02 	call	0x4a0	; 0x4a0 <xTaskCreate>
 b4a:	0e 94 6f 03 	call	0x6de	; 0x6de <vTaskStartScheduler>
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0f 91       	pop	r16
 b54:	ff 90       	pop	r15
 b56:	ef 90       	pop	r14
 b58:	08 95       	ret

00000b5a <vApplicationTaskChecksumHook>:
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <globa+0x1>
 b62:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <globa>
 b66:	08 95       	ret

00000b68 <uxChecksumGetTaskChecksum>:
	}

uint16_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
	{
 b68:	ac 01       	movw	r20, r24
 b6a:	fb 01       	movw	r30, r22
		volatile StackType_t* i;
		uint16_t xChecksum = 0;
		for(i = pxEndOfStack ;i > pxStartOfStack ;i--)
 b6c:	86 17       	cp	r24, r22
 b6e:	97 07       	cpc	r25, r23
 b70:	48 f4       	brcc	.+18     	; 0xb84 <uxChecksumGetTaskChecksum+0x1c>
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	90 e0       	ldi	r25, 0x00	; 0
		{
			xChecksum^=*i;
 b76:	20 81       	ld	r18, Z
 b78:	82 27       	eor	r24, r18

uint16_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
	{
		volatile StackType_t* i;
		uint16_t xChecksum = 0;
		for(i = pxEndOfStack ;i > pxStartOfStack ;i--)
 b7a:	31 97       	sbiw	r30, 0x01	; 1
 b7c:	4e 17       	cp	r20, r30
 b7e:	5f 07       	cpc	r21, r31
 b80:	d1 f7       	brne	.-12     	; 0xb76 <uxChecksumGetTaskChecksum+0xe>
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <uxChecksumGetTaskChecksum+0x20>
	}

uint16_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
	{
		volatile StackType_t* i;
		uint16_t xChecksum = 0;
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	90 e0       	ldi	r25, 0x00	; 0
		for(i = pxEndOfStack ;i > pxStartOfStack ;i--)
		{
			xChecksum^=*i;
		}
		globa=0xaa;
 b88:	2a ea       	ldi	r18, 0xAA	; 170
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <globa+0x1>
 b90:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <globa>
		return (uint16_t)xChecksum;
	}
 b94:	08 95       	ret

00000b96 <malloc>:
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	91 05       	cpc	r25, r1
 ba2:	10 f4       	brcc	.+4      	; 0xba8 <malloc+0x12>
 ba4:	82 e0       	ldi	r24, 0x02	; 2
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <__flp>
 bac:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <__flp+0x1>
 bb0:	20 e0       	ldi	r18, 0x00	; 0
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	a0 e0       	ldi	r26, 0x00	; 0
 bb6:	b0 e0       	ldi	r27, 0x00	; 0
 bb8:	30 97       	sbiw	r30, 0x00	; 0
 bba:	19 f1       	breq	.+70     	; 0xc02 <malloc+0x6c>
 bbc:	40 81       	ld	r20, Z
 bbe:	51 81       	ldd	r21, Z+1	; 0x01
 bc0:	02 81       	ldd	r16, Z+2	; 0x02
 bc2:	13 81       	ldd	r17, Z+3	; 0x03
 bc4:	48 17       	cp	r20, r24
 bc6:	59 07       	cpc	r21, r25
 bc8:	c8 f0       	brcs	.+50     	; 0xbfc <malloc+0x66>
 bca:	84 17       	cp	r24, r20
 bcc:	95 07       	cpc	r25, r21
 bce:	69 f4       	brne	.+26     	; 0xbea <malloc+0x54>
 bd0:	10 97       	sbiw	r26, 0x00	; 0
 bd2:	31 f0       	breq	.+12     	; 0xbe0 <malloc+0x4a>
 bd4:	12 96       	adiw	r26, 0x02	; 2
 bd6:	0c 93       	st	X, r16
 bd8:	12 97       	sbiw	r26, 0x02	; 2
 bda:	13 96       	adiw	r26, 0x03	; 3
 bdc:	1c 93       	st	X, r17
 bde:	27 c0       	rjmp	.+78     	; 0xc2e <malloc+0x98>
 be0:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <__flp>
 be4:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <__flp+0x1>
 be8:	22 c0       	rjmp	.+68     	; 0xc2e <malloc+0x98>
 bea:	21 15       	cp	r18, r1
 bec:	31 05       	cpc	r19, r1
 bee:	19 f0       	breq	.+6      	; 0xbf6 <malloc+0x60>
 bf0:	42 17       	cp	r20, r18
 bf2:	53 07       	cpc	r21, r19
 bf4:	18 f4       	brcc	.+6      	; 0xbfc <malloc+0x66>
 bf6:	9a 01       	movw	r18, r20
 bf8:	bd 01       	movw	r22, r26
 bfa:	ef 01       	movw	r28, r30
 bfc:	df 01       	movw	r26, r30
 bfe:	f8 01       	movw	r30, r16
 c00:	db cf       	rjmp	.-74     	; 0xbb8 <malloc+0x22>
 c02:	21 15       	cp	r18, r1
 c04:	31 05       	cpc	r19, r1
 c06:	f9 f0       	breq	.+62     	; 0xc46 <malloc+0xb0>
 c08:	28 1b       	sub	r18, r24
 c0a:	39 0b       	sbc	r19, r25
 c0c:	24 30       	cpi	r18, 0x04	; 4
 c0e:	31 05       	cpc	r19, r1
 c10:	80 f4       	brcc	.+32     	; 0xc32 <malloc+0x9c>
 c12:	8a 81       	ldd	r24, Y+2	; 0x02
 c14:	9b 81       	ldd	r25, Y+3	; 0x03
 c16:	61 15       	cp	r22, r1
 c18:	71 05       	cpc	r23, r1
 c1a:	21 f0       	breq	.+8      	; 0xc24 <malloc+0x8e>
 c1c:	fb 01       	movw	r30, r22
 c1e:	93 83       	std	Z+3, r25	; 0x03
 c20:	82 83       	std	Z+2, r24	; 0x02
 c22:	04 c0       	rjmp	.+8      	; 0xc2c <malloc+0x96>
 c24:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <__flp+0x1>
 c28:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__flp>
 c2c:	fe 01       	movw	r30, r28
 c2e:	32 96       	adiw	r30, 0x02	; 2
 c30:	44 c0       	rjmp	.+136    	; 0xcba <malloc+0x124>
 c32:	fe 01       	movw	r30, r28
 c34:	e2 0f       	add	r30, r18
 c36:	f3 1f       	adc	r31, r19
 c38:	81 93       	st	Z+, r24
 c3a:	91 93       	st	Z+, r25
 c3c:	22 50       	subi	r18, 0x02	; 2
 c3e:	31 09       	sbc	r19, r1
 c40:	39 83       	std	Y+1, r19	; 0x01
 c42:	28 83       	st	Y, r18
 c44:	3a c0       	rjmp	.+116    	; 0xcba <malloc+0x124>
 c46:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 c4a:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 c4e:	23 2b       	or	r18, r19
 c50:	41 f4       	brne	.+16     	; 0xc62 <malloc+0xcc>
 c52:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c56:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c5a:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <__brkval+0x1>
 c5e:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__brkval>
 c62:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c66:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c6a:	21 15       	cp	r18, r1
 c6c:	31 05       	cpc	r19, r1
 c6e:	41 f4       	brne	.+16     	; 0xc80 <malloc+0xea>
 c70:	2d b7       	in	r18, 0x3d	; 61
 c72:	3e b7       	in	r19, 0x3e	; 62
 c74:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c78:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c7c:	24 1b       	sub	r18, r20
 c7e:	35 0b       	sbc	r19, r21
 c80:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__brkval>
 c84:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__brkval+0x1>
 c88:	e2 17       	cp	r30, r18
 c8a:	f3 07       	cpc	r31, r19
 c8c:	a0 f4       	brcc	.+40     	; 0xcb6 <malloc+0x120>
 c8e:	2e 1b       	sub	r18, r30
 c90:	3f 0b       	sbc	r19, r31
 c92:	28 17       	cp	r18, r24
 c94:	39 07       	cpc	r19, r25
 c96:	78 f0       	brcs	.+30     	; 0xcb6 <malloc+0x120>
 c98:	ac 01       	movw	r20, r24
 c9a:	4e 5f       	subi	r20, 0xFE	; 254
 c9c:	5f 4f       	sbci	r21, 0xFF	; 255
 c9e:	24 17       	cp	r18, r20
 ca0:	35 07       	cpc	r19, r21
 ca2:	48 f0       	brcs	.+18     	; 0xcb6 <malloc+0x120>
 ca4:	4e 0f       	add	r20, r30
 ca6:	5f 1f       	adc	r21, r31
 ca8:	50 93 68 01 	sts	0x0168, r21	; 0x800168 <__brkval+0x1>
 cac:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <__brkval>
 cb0:	81 93       	st	Z+, r24
 cb2:	91 93       	st	Z+, r25
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <malloc+0x124>
 cb6:	e0 e0       	ldi	r30, 0x00	; 0
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	cf 01       	movw	r24, r30
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	1f 91       	pop	r17
 cc2:	0f 91       	pop	r16
 cc4:	08 95       	ret

00000cc6 <free>:
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	00 97       	sbiw	r24, 0x00	; 0
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <free+0xa>
 cce:	81 c0       	rjmp	.+258    	; 0xdd2 <free+0x10c>
 cd0:	fc 01       	movw	r30, r24
 cd2:	32 97       	sbiw	r30, 0x02	; 2
 cd4:	13 82       	std	Z+3, r1	; 0x03
 cd6:	12 82       	std	Z+2, r1	; 0x02
 cd8:	a0 91 69 01 	lds	r26, 0x0169	; 0x800169 <__flp>
 cdc:	b0 91 6a 01 	lds	r27, 0x016A	; 0x80016a <__flp+0x1>
 ce0:	10 97       	sbiw	r26, 0x00	; 0
 ce2:	81 f4       	brne	.+32     	; 0xd04 <free+0x3e>
 ce4:	20 81       	ld	r18, Z
 ce6:	31 81       	ldd	r19, Z+1	; 0x01
 ce8:	82 0f       	add	r24, r18
 cea:	93 1f       	adc	r25, r19
 cec:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 cf0:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 cf4:	28 17       	cp	r18, r24
 cf6:	39 07       	cpc	r19, r25
 cf8:	51 f5       	brne	.+84     	; 0xd4e <free+0x88>
 cfa:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__brkval+0x1>
 cfe:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__brkval>
 d02:	67 c0       	rjmp	.+206    	; 0xdd2 <free+0x10c>
 d04:	ed 01       	movw	r28, r26
 d06:	20 e0       	ldi	r18, 0x00	; 0
 d08:	30 e0       	ldi	r19, 0x00	; 0
 d0a:	ce 17       	cp	r28, r30
 d0c:	df 07       	cpc	r29, r31
 d0e:	40 f4       	brcc	.+16     	; 0xd20 <free+0x5a>
 d10:	4a 81       	ldd	r20, Y+2	; 0x02
 d12:	5b 81       	ldd	r21, Y+3	; 0x03
 d14:	9e 01       	movw	r18, r28
 d16:	41 15       	cp	r20, r1
 d18:	51 05       	cpc	r21, r1
 d1a:	f1 f0       	breq	.+60     	; 0xd58 <free+0x92>
 d1c:	ea 01       	movw	r28, r20
 d1e:	f5 cf       	rjmp	.-22     	; 0xd0a <free+0x44>
 d20:	d3 83       	std	Z+3, r29	; 0x03
 d22:	c2 83       	std	Z+2, r28	; 0x02
 d24:	40 81       	ld	r20, Z
 d26:	51 81       	ldd	r21, Z+1	; 0x01
 d28:	84 0f       	add	r24, r20
 d2a:	95 1f       	adc	r25, r21
 d2c:	c8 17       	cp	r28, r24
 d2e:	d9 07       	cpc	r29, r25
 d30:	59 f4       	brne	.+22     	; 0xd48 <free+0x82>
 d32:	88 81       	ld	r24, Y
 d34:	99 81       	ldd	r25, Y+1	; 0x01
 d36:	84 0f       	add	r24, r20
 d38:	95 1f       	adc	r25, r21
 d3a:	02 96       	adiw	r24, 0x02	; 2
 d3c:	91 83       	std	Z+1, r25	; 0x01
 d3e:	80 83       	st	Z, r24
 d40:	8a 81       	ldd	r24, Y+2	; 0x02
 d42:	9b 81       	ldd	r25, Y+3	; 0x03
 d44:	93 83       	std	Z+3, r25	; 0x03
 d46:	82 83       	std	Z+2, r24	; 0x02
 d48:	21 15       	cp	r18, r1
 d4a:	31 05       	cpc	r19, r1
 d4c:	29 f4       	brne	.+10     	; 0xd58 <free+0x92>
 d4e:	f0 93 6a 01 	sts	0x016A, r31	; 0x80016a <__flp+0x1>
 d52:	e0 93 69 01 	sts	0x0169, r30	; 0x800169 <__flp>
 d56:	3d c0       	rjmp	.+122    	; 0xdd2 <free+0x10c>
 d58:	e9 01       	movw	r28, r18
 d5a:	fb 83       	std	Y+3, r31	; 0x03
 d5c:	ea 83       	std	Y+2, r30	; 0x02
 d5e:	49 91       	ld	r20, Y+
 d60:	59 91       	ld	r21, Y+
 d62:	c4 0f       	add	r28, r20
 d64:	d5 1f       	adc	r29, r21
 d66:	ec 17       	cp	r30, r28
 d68:	fd 07       	cpc	r31, r29
 d6a:	61 f4       	brne	.+24     	; 0xd84 <free+0xbe>
 d6c:	80 81       	ld	r24, Z
 d6e:	91 81       	ldd	r25, Z+1	; 0x01
 d70:	84 0f       	add	r24, r20
 d72:	95 1f       	adc	r25, r21
 d74:	02 96       	adiw	r24, 0x02	; 2
 d76:	e9 01       	movw	r28, r18
 d78:	99 83       	std	Y+1, r25	; 0x01
 d7a:	88 83       	st	Y, r24
 d7c:	82 81       	ldd	r24, Z+2	; 0x02
 d7e:	93 81       	ldd	r25, Z+3	; 0x03
 d80:	9b 83       	std	Y+3, r25	; 0x03
 d82:	8a 83       	std	Y+2, r24	; 0x02
 d84:	e0 e0       	ldi	r30, 0x00	; 0
 d86:	f0 e0       	ldi	r31, 0x00	; 0
 d88:	12 96       	adiw	r26, 0x02	; 2
 d8a:	8d 91       	ld	r24, X+
 d8c:	9c 91       	ld	r25, X
 d8e:	13 97       	sbiw	r26, 0x03	; 3
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	19 f0       	breq	.+6      	; 0xd9a <free+0xd4>
 d94:	fd 01       	movw	r30, r26
 d96:	dc 01       	movw	r26, r24
 d98:	f7 cf       	rjmp	.-18     	; 0xd88 <free+0xc2>
 d9a:	8d 91       	ld	r24, X+
 d9c:	9c 91       	ld	r25, X
 d9e:	11 97       	sbiw	r26, 0x01	; 1
 da0:	9d 01       	movw	r18, r26
 da2:	2e 5f       	subi	r18, 0xFE	; 254
 da4:	3f 4f       	sbci	r19, 0xFF	; 255
 da6:	82 0f       	add	r24, r18
 da8:	93 1f       	adc	r25, r19
 daa:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <__brkval>
 dae:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <__brkval+0x1>
 db2:	28 17       	cp	r18, r24
 db4:	39 07       	cpc	r19, r25
 db6:	69 f4       	brne	.+26     	; 0xdd2 <free+0x10c>
 db8:	30 97       	sbiw	r30, 0x00	; 0
 dba:	29 f4       	brne	.+10     	; 0xdc6 <free+0x100>
 dbc:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__flp+0x1>
 dc0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp>
 dc4:	02 c0       	rjmp	.+4      	; 0xdca <free+0x104>
 dc6:	13 82       	std	Z+3, r1	; 0x03
 dc8:	12 82       	std	Z+2, r1	; 0x02
 dca:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <__brkval+0x1>
 dce:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <__brkval>
 dd2:	df 91       	pop	r29
 dd4:	cf 91       	pop	r28
 dd6:	08 95       	ret

00000dd8 <memset>:
 dd8:	dc 01       	movw	r26, r24
 dda:	01 c0       	rjmp	.+2      	; 0xdde <memset+0x6>
 ddc:	6d 93       	st	X+, r22
 dde:	41 50       	subi	r20, 0x01	; 1
 de0:	50 40       	sbci	r21, 0x00	; 0
 de2:	e0 f7       	brcc	.-8      	; 0xddc <memset+0x4>
 de4:	08 95       	ret

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
