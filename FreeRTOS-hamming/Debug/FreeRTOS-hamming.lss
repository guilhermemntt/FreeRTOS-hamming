
FreeRTOS-hamming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000010f2  00001186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800112  00800112  00001198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e5e  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  000042ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa1  00000000  00000000  000050f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00006b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001221  00000000  00000000  000072a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c29  00000000  00000000  000084c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ef       	ldi	r30, 0xF2	; 242
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 37       	cpi	r26, 0x75	; 117
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 24 07 	call	0xe48	; 0xe48 <main>
      9e:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
    ucR -= 1;
  }
  return ucR;
}

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t *pxEndOfStack) {  // pxStack
      a6:	7f 92       	push	r7
      a8:	8f 92       	push	r8
      aa:	9f 92       	push	r9
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	4c 01       	movw	r8, r24
  uint8_t *pucDataP = pxStartOfStack - portSTACK_GROWTH;
      c2:	fc 01       	movw	r30, r24
      c4:	31 96       	adiw	r30, 0x01	; 1
  int16_t sLength = pxEndOfStack - pxStartOfStack;
      c6:	68 1b       	sub	r22, r24
      c8:	79 0b       	sbc	r23, r25
  uint16_t usPosBit;
  uint8_t ucPBitMax;

  ucPoolH = 0;
  usPBit = 0;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
      ca:	09 f4       	brne	.+2      	; 0xce <uxChecksumGetTaskChecksum+0x28>
      cc:	3f c0       	rjmp	.+126    	; 0x14c <uxChecksumGetTaskChecksum+0xa6>
      ce:	df 01       	movw	r26, r30
      d0:	ab 01       	movw	r20, r22
      d2:	4f 5f       	subi	r20, 0xFF	; 255
      d4:	5f 4f       	sbci	r21, 0xFF	; 255
      d6:	48 0f       	add	r20, r24
      d8:	59 1f       	adc	r21, r25
      da:	ef 01       	movw	r28, r30
      dc:	90 e0       	ldi	r25, 0x00	; 0
    ucPoolH ^= (*(pucDataP + i) & 0xAA);
      de:	89 91       	ld	r24, Y+
      e0:	8a 7a       	andi	r24, 0xAA	; 170
      e2:	98 27       	eor	r25, r24
  uint16_t usPosBit;
  uint8_t ucPBitMax;

  ucPoolH = 0;
  usPBit = 0;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
      e4:	c4 17       	cp	r28, r20
      e6:	d5 07       	cpc	r29, r21
      e8:	d1 f7       	brne	.-12     	; 0xde <uxChecksumGetTaskChecksum+0x38>
    ucPoolH ^= (*(pucDataP + i) & 0xAA);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
      ea:	89 2f       	mov	r24, r25
      ec:	82 95       	swap	r24
      ee:	8f 70       	andi	r24, 0x0F	; 15
      f0:	98 27       	eor	r25, r24
      f2:	9f 70       	andi	r25, 0x0F	; 15
      f4:	c6 e9       	ldi	r28, 0x96	; 150
      f6:	d9 e6       	ldi	r29, 0x69	; 105
      f8:	02 c0       	rjmp	.+4      	; 0xfe <uxChecksumGetTaskChecksum+0x58>
      fa:	d5 95       	asr	r29
      fc:	c7 95       	ror	r28
      fe:	9a 95       	dec	r25
     100:	e2 f7       	brpl	.-8      	; 0xfa <uxChecksumGetTaskChecksum+0x54>
     102:	c1 70       	andi	r28, 0x01	; 1
     104:	dd 27       	eor	r29, r29
     106:	20 e0       	ldi	r18, 0x00	; 0

  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xCC);
     108:	9d 91       	ld	r25, X+
     10a:	9c 7c       	andi	r25, 0xCC	; 204
     10c:	29 27       	eor	r18, r25
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
     10e:	a4 17       	cp	r26, r20
     110:	b5 07       	cpc	r27, r21
     112:	d1 f7       	brne	.-12     	; 0x108 <uxChecksumGetTaskChecksum+0x62>
     114:	b9 c0       	rjmp	.+370    	; 0x288 <uxChecksumGetTaskChecksum+0x1e2>
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPoolH = 0;
  usPBit = 2;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xF0);
     116:	91 91       	ld	r25, Z+
     118:	90 7f       	andi	r25, 0xF0	; 240
     11a:	29 27       	eor	r18, r25
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPoolH = 0;
  usPBit = 2;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
     11c:	e4 17       	cp	r30, r20
     11e:	f5 07       	cpc	r31, r21
     120:	d1 f7       	brne	.-12     	; 0x116 <uxChecksumGetTaskChecksum+0x70>
     122:	cd c0       	rjmp	.+410    	; 0x2be <uxChecksumGetTaskChecksum+0x218>

  usPBit = 3;
  ucPoolH = 0;
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     124:	2f 5f       	subi	r18, 0xFF	; 255
     126:	3f 4f       	sbci	r19, 0xFF	; 255
#elif ( configSUPPORT_TASK_CHECKSUM==3 )

#define checksumPARITY(n) ((0x6996 >> ((n ^ (n >> 4)) & 0x0f)) & 0x01)

static inline uint16_t prvAbs(int16_t sX) {
	int16_t sT = (sX >> 15);
     128:	a9 01       	movw	r20, r18
     12a:	55 0f       	add	r21, r21
     12c:	44 0b       	sbc	r20, r20
     12e:	54 2f       	mov	r21, r20

  usPBit = 3;
  ucPoolH = 0;
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     130:	d9 01       	movw	r26, r18
     132:	a4 0f       	add	r26, r20
     134:	b5 1f       	adc	r27, r21
     136:	4a 27       	eor	r20, r26
     138:	5b 27       	eor	r21, r27
     13a:	40 ff       	sbrs	r20, 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <uxChecksumGetTaskChecksum+0x9c>
      ucPoolH ^= (*(pucDataP + i));
     13e:	81 81       	ldd	r24, Z+1	; 0x01
     140:	98 27       	eor	r25, r24
     142:	31 96       	adiw	r30, 0x01	; 1
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  usPBit = 3;
  ucPoolH = 0;
  usPosBit = (1 << (usPBit - 3));
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
     144:	62 17       	cp	r22, r18
     146:	73 07       	cpc	r23, r19
     148:	69 f7       	brne	.-38     	; 0x124 <uxChecksumGetTaskChecksum+0x7e>
     14a:	03 c0       	rjmp	.+6      	; 0x152 <uxChecksumGetTaskChecksum+0xac>
  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xCC);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     14c:	c0 e0       	ldi	r28, 0x00	; 0
     14e:	d0 e0       	ldi	r29, 0x00	; 0
    ucPoolH ^= (*(pucDataP + i) & 0xF0);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  usPBit = 3;
  ucPoolH = 0;
     150:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
      ucPoolH ^= (*(pucDataP + i));
    }
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     152:	89 2f       	mov	r24, r25
     154:	82 95       	swap	r24
     156:	8f 70       	andi	r24, 0x0F	; 15
     158:	98 27       	eor	r25, r24
     15a:	9f 70       	andi	r25, 0x0F	; 15
     15c:	26 e9       	ldi	r18, 0x96	; 150
     15e:	39 e6       	ldi	r19, 0x69	; 105
     160:	a9 01       	movw	r20, r18
     162:	02 c0       	rjmp	.+4      	; 0x168 <uxChecksumGetTaskChecksum+0xc2>
     164:	55 95       	asr	r21
     166:	47 95       	ror	r20
     168:	9a 95       	dec	r25
     16a:	e2 f7       	brpl	.-8      	; 0x164 <uxChecksumGetTaskChecksum+0xbe>
     16c:	ca 01       	movw	r24, r20
     16e:	81 70       	andi	r24, 0x01	; 1
     170:	99 27       	eor	r25, r25
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	8c 0f       	add	r24, r28
     180:	9d 1f       	adc	r25, r29

  ucPBitMax = prvFls(sLength * 8  * -portSTACK_GROWTH);
     182:	9b 01       	movw	r18, r22
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	22 0f       	add	r18, r18
     18a:	33 1f       	adc	r19, r19
     18c:	22 0f       	add	r18, r18
     18e:	33 1f       	adc	r19, r19
}

static inline uint8_t prvFls(uint16_t usX) {
  uint8_t ucR = 16;

  if (!usX) {
     190:	21 15       	cp	r18, r1
     192:	31 05       	cpc	r19, r1
     194:	09 f4       	brne	.+2      	; 0x198 <uxChecksumGetTaskChecksum+0xf2>
     196:	ad c0       	rjmp	.+346    	; 0x2f2 <uxChecksumGetTaskChecksum+0x24c>
    return 0;
  }
  if (!(usX & 0xff00u)) {
     198:	a9 01       	movw	r20, r18
     19a:	44 27       	eor	r20, r20
     19c:	45 2b       	or	r20, r21
     19e:	21 f4       	brne	.+8      	; 0x1a8 <uxChecksumGetTaskChecksum+0x102>
    usX <<= 8;
     1a0:	32 2f       	mov	r19, r18
     1a2:	22 27       	eor	r18, r18
    ucR -= 8;
     1a4:	48 e0       	ldi	r20, 0x08	; 8
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <uxChecksumGetTaskChecksum+0x104>
	int16_t sT = (sX >> 15);
	return sT ^ (sX + sT);
}

static inline uint8_t prvFls(uint16_t usX) {
  uint8_t ucR = 16;
     1a8:	40 e1       	ldi	r20, 0x10	; 16
  }
  if (!(usX & 0xff00u)) {
    usX <<= 8;
    ucR -= 8;
  }
  if (!(usX & 0xf000u)) {
     1aa:	f9 01       	movw	r30, r18
     1ac:	ee 27       	eor	r30, r30
     1ae:	f0 7f       	andi	r31, 0xF0	; 240
     1b0:	ef 2b       	or	r30, r31
     1b2:	39 f4       	brne	.+14     	; 0x1c2 <uxChecksumGetTaskChecksum+0x11c>
    usX <<= 4;
     1b4:	22 95       	swap	r18
     1b6:	32 95       	swap	r19
     1b8:	30 7f       	andi	r19, 0xF0	; 240
     1ba:	32 27       	eor	r19, r18
     1bc:	20 7f       	andi	r18, 0xF0	; 240
     1be:	32 27       	eor	r19, r18
    ucR -= 4;
     1c0:	44 50       	subi	r20, 0x04	; 4
  }
  if (!(usX & 0xc000u)) {
     1c2:	f9 01       	movw	r30, r18
     1c4:	ee 27       	eor	r30, r30
     1c6:	f0 7c       	andi	r31, 0xC0	; 192
     1c8:	ef 2b       	or	r30, r31
     1ca:	29 f4       	brne	.+10     	; 0x1d6 <uxChecksumGetTaskChecksum+0x130>
    usX <<= 2;
     1cc:	22 0f       	add	r18, r18
     1ce:	33 1f       	adc	r19, r19
     1d0:	22 0f       	add	r18, r18
     1d2:	33 1f       	adc	r19, r19
    ucR -= 2;
     1d4:	42 50       	subi	r20, 0x02	; 2
  }
  if (!(usX & 0x8000u)) {
     1d6:	33 23       	and	r19, r19
     1d8:	0c f0       	brlt	.+2      	; 0x1dc <uxChecksumGetTaskChecksum+0x136>
    usX <<= 1;
    ucR -= 1;
     1da:	41 50       	subi	r20, 0x01	; 1
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPBitMax = prvFls(sLength * 8  * -portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
     1dc:	a4 2e       	mov	r10, r20
     1de:	b1 2c       	mov	r11, r1
     1e0:	55 e0       	ldi	r21, 0x05	; 5
     1e2:	a5 16       	cp	r10, r21
     1e4:	b1 04       	cpc	r11, r1
     1e6:	08 f4       	brcc	.+2      	; 0x1ea <uxChecksumGetTaskChecksum+0x144>
     1e8:	84 c0       	rjmp	.+264    	; 0x2f2 <uxChecksumGetTaskChecksum+0x24c>
     1ea:	04 e0       	ldi	r16, 0x04	; 4
     1ec:	10 e0       	ldi	r17, 0x00	; 0
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
     1ee:	cc 24       	eor	r12, r12
     1f0:	c3 94       	inc	r12
     1f2:	d1 2c       	mov	r13, r1
    for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
        ucPoolH ^= (*(pucDataP + i));
      }
    }
    usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     1f4:	0f 2e       	mov	r0, r31
     1f6:	f6 e9       	ldi	r31, 0x96	; 150
     1f8:	ef 2e       	mov	r14, r31
     1fa:	f9 e6       	ldi	r31, 0x69	; 105
     1fc:	ff 2e       	mov	r15, r31
     1fe:	f0 2d       	mov	r31, r0

  ucPBitMax = prvFls(sLength * 8  * -portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
     200:	98 01       	movw	r18, r16
     202:	23 50       	subi	r18, 0x03	; 3
     204:	31 09       	sbc	r19, r1
     206:	e6 01       	movw	r28, r12
     208:	02 c0       	rjmp	.+4      	; 0x20e <uxChecksumGetTaskChecksum+0x168>
     20a:	cc 0f       	add	r28, r28
     20c:	dd 1f       	adc	r29, r29
     20e:	2a 95       	dec	r18
     210:	e2 f7       	brpl	.-8      	; 0x20a <uxChecksumGetTaskChecksum+0x164>
    for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
     212:	61 15       	cp	r22, r1
     214:	71 05       	cpc	r23, r1
     216:	d1 f0       	breq	.+52     	; 0x24c <uxChecksumGetTaskChecksum+0x1a6>
     218:	f4 01       	movw	r30, r8
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	71 2c       	mov	r7, r1
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     220:	4f 5f       	subi	r20, 0xFF	; 255
     222:	5f 4f       	sbci	r21, 0xFF	; 255
#elif ( configSUPPORT_TASK_CHECKSUM==3 )

#define checksumPARITY(n) ((0x6996 >> ((n ^ (n >> 4)) & 0x0f)) & 0x01)

static inline uint16_t prvAbs(int16_t sX) {
	int16_t sT = (sX >> 15);
     224:	9a 01       	movw	r18, r20
     226:	33 0f       	add	r19, r19
     228:	22 0b       	sbc	r18, r18
     22a:	32 2f       	mov	r19, r18

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
    for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
     22c:	da 01       	movw	r26, r20
     22e:	a2 0f       	add	r26, r18
     230:	b3 1f       	adc	r27, r19
     232:	2a 27       	eor	r18, r26
     234:	3b 27       	eor	r19, r27
     236:	2c 23       	and	r18, r28
     238:	3d 23       	and	r19, r29
     23a:	23 2b       	or	r18, r19
     23c:	11 f0       	breq	.+4      	; 0x242 <uxChecksumGetTaskChecksum+0x19c>
        ucPoolH ^= (*(pucDataP + i));
     23e:	21 81       	ldd	r18, Z+1	; 0x01
     240:	72 26       	eor	r7, r18
     242:	31 96       	adiw	r30, 0x01	; 1
  ucPBitMax = prvFls(sLength * 8  * -portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
    usPosBit = (1 << (usPBit - 3));
    for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
     244:	64 17       	cp	r22, r20
     246:	75 07       	cpc	r23, r21
     248:	59 f7       	brne	.-42     	; 0x220 <uxChecksumGetTaskChecksum+0x17a>
     24a:	01 c0       	rjmp	.+2      	; 0x24e <uxChecksumGetTaskChecksum+0x1a8>
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPBitMax = prvFls(sLength * 8  * -portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
    ucPoolH = 0;
     24c:	71 2c       	mov	r7, r1
    for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
      if (prvAbs(i - portSTACK_GROWTH) & (usPosBit)) {
        ucPoolH ^= (*(pucDataP + i));
      }
    }
    usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     24e:	27 2d       	mov	r18, r7
     250:	22 95       	swap	r18
     252:	2f 70       	andi	r18, 0x0F	; 15
     254:	27 25       	eor	r18, r7
     256:	2f 70       	andi	r18, 0x0F	; 15
     258:	a7 01       	movw	r20, r14
     25a:	02 c0       	rjmp	.+4      	; 0x260 <uxChecksumGetTaskChecksum+0x1ba>
     25c:	55 95       	asr	r21
     25e:	47 95       	ror	r20
     260:	2a 95       	dec	r18
     262:	e2 f7       	brpl	.-8      	; 0x25c <uxChecksumGetTaskChecksum+0x1b6>
     264:	9a 01       	movw	r18, r20
     266:	21 70       	andi	r18, 0x01	; 1
     268:	33 27       	eor	r19, r19
     26a:	00 2e       	mov	r0, r16
     26c:	02 c0       	rjmp	.+4      	; 0x272 <uxChecksumGetTaskChecksum+0x1cc>
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	0a 94       	dec	r0
     274:	e2 f7       	brpl	.-8      	; 0x26e <uxChecksumGetTaskChecksum+0x1c8>
     276:	82 0f       	add	r24, r18
     278:	93 1f       	adc	r25, r19
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;

  ucPBitMax = prvFls(sLength * 8  * -portSTACK_GROWTH);

  for (usPBit = 4; usPBit < ucPBitMax; usPBit++) {
     27a:	0f 5f       	subi	r16, 0xFF	; 255
     27c:	1f 4f       	sbci	r17, 0xFF	; 255
     27e:	0a 15       	cp	r16, r10
     280:	1b 05       	cpc	r17, r11
     282:	09 f0       	breq	.+2      	; 0x286 <uxChecksumGetTaskChecksum+0x1e0>
     284:	bd cf       	rjmp	.-134    	; 0x200 <uxChecksumGetTaskChecksum+0x15a>
     286:	35 c0       	rjmp	.+106    	; 0x2f2 <uxChecksumGetTaskChecksum+0x24c>
  ucPoolH = 0;
  usPBit = 1;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xCC);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     288:	82 2f       	mov	r24, r18
     28a:	82 95       	swap	r24
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	28 27       	eor	r18, r24
     290:	2f 70       	andi	r18, 0x0F	; 15
     292:	a6 e9       	ldi	r26, 0x96	; 150
     294:	b9 e6       	ldi	r27, 0x69	; 105
     296:	02 c0       	rjmp	.+4      	; 0x29c <uxChecksumGetTaskChecksum+0x1f6>
     298:	b5 95       	asr	r27
     29a:	a7 95       	ror	r26
     29c:	2a 95       	dec	r18
     29e:	e2 f7       	brpl	.-8      	; 0x298 <uxChecksumGetTaskChecksum+0x1f2>
     2a0:	a1 70       	andi	r26, 0x01	; 1
     2a2:	bb 27       	eor	r27, r27
     2a4:	cd 01       	movw	r24, r26
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	dc 01       	movw	r26, r24
     2ac:	ac 0f       	add	r26, r28
     2ae:	bd 1f       	adc	r27, r29
     2b0:	ab 01       	movw	r20, r22
     2b2:	4f 5f       	subi	r20, 0xFF	; 255
     2b4:	5f 4f       	sbci	r21, 0xFF	; 255
     2b6:	48 0d       	add	r20, r8
     2b8:	59 1d       	adc	r21, r9
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	2c cf       	rjmp	.-424    	; 0x116 <uxChecksumGetTaskChecksum+0x70>
  ucPoolH = 0;
  usPBit = 2;
  for (i = 0; i != sLength; i -= portSTACK_GROWTH) {
    ucPoolH ^= (*(pucDataP + i) & 0xF0);
  }
  usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
     2be:	82 2f       	mov	r24, r18
     2c0:	82 95       	swap	r24
     2c2:	8f 70       	andi	r24, 0x0F	; 15
     2c4:	28 27       	eor	r18, r24
     2c6:	2f 70       	andi	r18, 0x0F	; 15
     2c8:	86 e9       	ldi	r24, 0x96	; 150
     2ca:	99 e6       	ldi	r25, 0x69	; 105
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <uxChecksumGetTaskChecksum+0x22c>
     2ce:	95 95       	asr	r25
     2d0:	87 95       	ror	r24
     2d2:	2a 95       	dec	r18
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <uxChecksumGetTaskChecksum+0x228>
     2d6:	81 70       	andi	r24, 0x01	; 1
     2d8:	99 27       	eor	r25, r25
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	ec 01       	movw	r28, r24
     2e4:	ca 0f       	add	r28, r26
     2e6:	db 1f       	adc	r29, r27
     2e8:	f4 01       	movw	r30, r8
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	19 cf       	rjmp	.-462    	; 0x124 <uxChecksumGetTaskChecksum+0x7e>
    }
    usHammingBits += (checksumPARITY(ucPoolH)) << usPBit;
  }

  return usHammingBits;
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	df 90       	pop	r13
     300:	cf 90       	pop	r12
     302:	bf 90       	pop	r11
     304:	af 90       	pop	r10
     306:	9f 90       	pop	r9
     308:	8f 90       	pop	r8
     30a:	7f 90       	pop	r7
     30c:	08 95       	ret

0000030e <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
     314:	0e 94 01 05 	call	0xa02	; 0xa02 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
     318:	ce 01       	movw	r24, r28
     31a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <malloc>
     31e:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     320:	0e 94 c2 05 	call	0xb84	; 0xb84 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     324:	ce 01       	movw	r24, r28
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
	if( pv )
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	41 f0       	breq	.+16     	; 0x344 <vPortFree+0x18>
     334:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
     336:	0e 94 01 05 	call	0xa02	; 0xa02 <vTaskSuspendAll>
		{
			free( pv );
     33a:	ce 01       	movw	r24, r28
     33c:	0e 94 e7 07 	call	0xfce	; 0xfce <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
     340:	0e 94 c2 05 	call	0xb84	; 0xb84 <xTaskResumeAll>
	}
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
     34a:	fc 01       	movw	r30, r24
     34c:	03 96       	adiw	r24, 0x03	; 3
     34e:	92 83       	std	Z+2, r25	; 0x02
     350:	81 83       	std	Z+1, r24	; 0x01
     352:	2f ef       	ldi	r18, 0xFF	; 255
     354:	3f ef       	ldi	r19, 0xFF	; 255
     356:	34 83       	std	Z+4, r19	; 0x04
     358:	23 83       	std	Z+3, r18	; 0x03
     35a:	96 83       	std	Z+6, r25	; 0x06
     35c:	85 83       	std	Z+5, r24	; 0x05
     35e:	90 87       	std	Z+8, r25	; 0x08
     360:	87 83       	std	Z+7, r24	; 0x07
     362:	10 82       	st	Z, r1
     364:	08 95       	ret

00000366 <vListInitialiseItem>:
     366:	fc 01       	movw	r30, r24
     368:	11 86       	std	Z+9, r1	; 0x09
     36a:	10 86       	std	Z+8, r1	; 0x08
     36c:	08 95       	ret

0000036e <vListInsertEnd>:
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	9c 01       	movw	r18, r24
     374:	fb 01       	movw	r30, r22
     376:	dc 01       	movw	r26, r24
     378:	11 96       	adiw	r26, 0x01	; 1
     37a:	cd 91       	ld	r28, X+
     37c:	dc 91       	ld	r29, X
     37e:	12 97       	sbiw	r26, 0x02	; 2
     380:	d3 83       	std	Z+3, r29	; 0x03
     382:	c2 83       	std	Z+2, r28	; 0x02
     384:	8c 81       	ldd	r24, Y+4	; 0x04
     386:	9d 81       	ldd	r25, Y+5	; 0x05
     388:	95 83       	std	Z+5, r25	; 0x05
     38a:	84 83       	std	Z+4, r24	; 0x04
     38c:	8c 81       	ldd	r24, Y+4	; 0x04
     38e:	9d 81       	ldd	r25, Y+5	; 0x05
     390:	dc 01       	movw	r26, r24
     392:	13 96       	adiw	r26, 0x03	; 3
     394:	7c 93       	st	X, r23
     396:	6e 93       	st	-X, r22
     398:	12 97       	sbiw	r26, 0x02	; 2
     39a:	7d 83       	std	Y+5, r23	; 0x05
     39c:	6c 83       	std	Y+4, r22	; 0x04
     39e:	31 87       	std	Z+9, r19	; 0x09
     3a0:	20 87       	std	Z+8, r18	; 0x08
     3a2:	f9 01       	movw	r30, r18
     3a4:	80 81       	ld	r24, Z
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 83       	st	Z, r24
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     3b6:	a0 85       	ldd	r26, Z+8	; 0x08
     3b8:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3ba:	c2 81       	ldd	r28, Z+2	; 0x02
     3bc:	d3 81       	ldd	r29, Z+3	; 0x03
     3be:	84 81       	ldd	r24, Z+4	; 0x04
     3c0:	95 81       	ldd	r25, Z+5	; 0x05
     3c2:	9d 83       	std	Y+5, r25	; 0x05
     3c4:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3c6:	c4 81       	ldd	r28, Z+4	; 0x04
     3c8:	d5 81       	ldd	r29, Z+5	; 0x05
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
     3cc:	93 81       	ldd	r25, Z+3	; 0x03
     3ce:	9b 83       	std	Y+3, r25	; 0x03
     3d0:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	8d 91       	ld	r24, X+
     3d6:	9c 91       	ld	r25, X
     3d8:	12 97       	sbiw	r26, 0x02	; 2
     3da:	e8 17       	cp	r30, r24
     3dc:	f9 07       	cpc	r31, r25
     3de:	31 f4       	brne	.+12     	; 0x3ec <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3e0:	84 81       	ldd	r24, Z+4	; 0x04
     3e2:	95 81       	ldd	r25, Z+5	; 0x05
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	9c 93       	st	X, r25
     3e8:	8e 93       	st	-X, r24
     3ea:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     3ec:	11 86       	std	Z+9, r1	; 0x09
     3ee:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     3f0:	8c 91       	ld	r24, X
     3f2:	81 50       	subi	r24, 0x01	; 1
     3f4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     3f6:	8c 91       	ld	r24, X
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     3fe:	31 e1       	ldi	r19, 0x11	; 17
     400:	fc 01       	movw	r30, r24
     402:	30 83       	st	Z, r19
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	22 e2       	ldi	r18, 0x22	; 34
     408:	20 83       	st	Z, r18
     40a:	31 97       	sbiw	r30, 0x01	; 1
     40c:	a3 e3       	ldi	r26, 0x33	; 51
     40e:	a0 83       	st	Z, r26
     410:	31 97       	sbiw	r30, 0x01	; 1
     412:	60 83       	st	Z, r22
     414:	31 97       	sbiw	r30, 0x01	; 1
     416:	70 83       	st	Z, r23
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	10 82       	st	Z, r1
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	60 e8       	ldi	r22, 0x80	; 128
     420:	60 83       	st	Z, r22
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	10 82       	st	Z, r1
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	62 e0       	ldi	r22, 0x02	; 2
     42a:	60 83       	st	Z, r22
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	63 e0       	ldi	r22, 0x03	; 3
     430:	60 83       	st	Z, r22
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	60 83       	st	Z, r22
     438:	31 97       	sbiw	r30, 0x01	; 1
     43a:	65 e0       	ldi	r22, 0x05	; 5
     43c:	60 83       	st	Z, r22
     43e:	31 97       	sbiw	r30, 0x01	; 1
     440:	66 e0       	ldi	r22, 0x06	; 6
     442:	60 83       	st	Z, r22
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	67 e0       	ldi	r22, 0x07	; 7
     448:	60 83       	st	Z, r22
     44a:	31 97       	sbiw	r30, 0x01	; 1
     44c:	68 e0       	ldi	r22, 0x08	; 8
     44e:	60 83       	st	Z, r22
     450:	31 97       	sbiw	r30, 0x01	; 1
     452:	69 e0       	ldi	r22, 0x09	; 9
     454:	60 83       	st	Z, r22
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	60 e1       	ldi	r22, 0x10	; 16
     45a:	60 83       	st	Z, r22
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	30 83       	st	Z, r19
     460:	31 97       	sbiw	r30, 0x01	; 1
     462:	32 e1       	ldi	r19, 0x12	; 18
     464:	30 83       	st	Z, r19
     466:	31 97       	sbiw	r30, 0x01	; 1
     468:	33 e1       	ldi	r19, 0x13	; 19
     46a:	30 83       	st	Z, r19
     46c:	31 97       	sbiw	r30, 0x01	; 1
     46e:	34 e1       	ldi	r19, 0x14	; 20
     470:	30 83       	st	Z, r19
     472:	31 97       	sbiw	r30, 0x01	; 1
     474:	35 e1       	ldi	r19, 0x15	; 21
     476:	30 83       	st	Z, r19
     478:	31 97       	sbiw	r30, 0x01	; 1
     47a:	36 e1       	ldi	r19, 0x16	; 22
     47c:	30 83       	st	Z, r19
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	37 e1       	ldi	r19, 0x17	; 23
     482:	30 83       	st	Z, r19
     484:	31 97       	sbiw	r30, 0x01	; 1
     486:	38 e1       	ldi	r19, 0x18	; 24
     488:	30 83       	st	Z, r19
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	39 e1       	ldi	r19, 0x19	; 25
     48e:	30 83       	st	Z, r19
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	30 e2       	ldi	r19, 0x20	; 32
     494:	30 83       	st	Z, r19
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	31 e2       	ldi	r19, 0x21	; 33
     49a:	30 83       	st	Z, r19
     49c:	31 97       	sbiw	r30, 0x01	; 1
     49e:	20 83       	st	Z, r18
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	23 e2       	ldi	r18, 0x23	; 35
     4a4:	20 83       	st	Z, r18
     4a6:	31 97       	sbiw	r30, 0x01	; 1
     4a8:	40 83       	st	Z, r20
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	50 83       	st	Z, r21
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	26 e2       	ldi	r18, 0x26	; 38
     4b2:	20 83       	st	Z, r18
     4b4:	31 97       	sbiw	r30, 0x01	; 1
     4b6:	27 e2       	ldi	r18, 0x27	; 39
     4b8:	20 83       	st	Z, r18
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	28 e2       	ldi	r18, 0x28	; 40
     4be:	20 83       	st	Z, r18
     4c0:	31 97       	sbiw	r30, 0x01	; 1
     4c2:	29 e2       	ldi	r18, 0x29	; 41
     4c4:	20 83       	st	Z, r18
     4c6:	31 97       	sbiw	r30, 0x01	; 1
     4c8:	20 e3       	ldi	r18, 0x30	; 48
     4ca:	20 83       	st	Z, r18
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	21 e3       	ldi	r18, 0x31	; 49
     4d0:	20 83       	st	Z, r18
     4d2:	86 97       	sbiw	r24, 0x26	; 38
     4d4:	08 95       	ret

000004d6 <xPortStartScheduler>:
     4d6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4da:	89 ef       	ldi	r24, 0xF9	; 249
     4dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4e0:	8b e0       	ldi	r24, 0x0B	; 11
     4e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     4e6:	ef e6       	ldi	r30, 0x6F	; 111
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	82 60       	ori	r24, 0x02	; 2
     4ee:	80 83       	st	Z, r24
     4f0:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     4f4:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     4f8:	cd 91       	ld	r28, X+
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	dd 91       	ld	r29, X+
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	bf 91       	pop	r27
     50a:	af 91       	pop	r26
     50c:	9f 91       	pop	r25
     50e:	8f 91       	pop	r24
     510:	7f 91       	pop	r23
     512:	6f 91       	pop	r22
     514:	5f 91       	pop	r21
     516:	4f 91       	pop	r20
     518:	3f 91       	pop	r19
     51a:	2f 91       	pop	r18
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	bf 90       	pop	r11
     52a:	af 90       	pop	r10
     52c:	9f 90       	pop	r9
     52e:	8f 90       	pop	r8
     530:	7f 90       	pop	r7
     532:	6f 90       	pop	r6
     534:	5f 90       	pop	r5
     536:	4f 90       	pop	r4
     538:	3f 90       	pop	r3
     53a:	2f 90       	pop	r2
     53c:	1f 90       	pop	r1
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	08 95       	ret
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	08 95       	ret

0000054a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	0f 92       	push	r0
     552:	1f 92       	push	r1
     554:	11 24       	eor	r1, r1
     556:	2f 92       	push	r2
     558:	3f 92       	push	r3
     55a:	4f 92       	push	r4
     55c:	5f 92       	push	r5
     55e:	6f 92       	push	r6
     560:	7f 92       	push	r7
     562:	8f 92       	push	r8
     564:	9f 92       	push	r9
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	2f 93       	push	r18
     578:	3f 93       	push	r19
     57a:	4f 93       	push	r20
     57c:	5f 93       	push	r21
     57e:	6f 93       	push	r22
     580:	7f 93       	push	r23
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	af 93       	push	r26
     588:	bf 93       	push	r27
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
     592:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     596:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     59a:	0d b6       	in	r0, 0x3d	; 61
     59c:	0d 92       	st	X+, r0
     59e:	0e b6       	in	r0, 0x3e	; 62
     5a0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     5a2:	0e 94 41 06 	call	0xc82	; 0xc82 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     5a6:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     5aa:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     5ae:	cd 91       	ld	r28, X+
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	dd 91       	ld	r29, X+
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	ff 91       	pop	r31
     5b8:	ef 91       	pop	r30
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	bf 91       	pop	r27
     5c0:	af 91       	pop	r26
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	7f 91       	pop	r23
     5c8:	6f 91       	pop	r22
     5ca:	5f 91       	pop	r21
     5cc:	4f 91       	pop	r20
     5ce:	3f 91       	pop	r19
     5d0:	2f 91       	pop	r18
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	7f 90       	pop	r7
     5e8:	6f 90       	pop	r6
     5ea:	5f 90       	pop	r5
     5ec:	4f 90       	pop	r4
     5ee:	3f 90       	pop	r3
     5f0:	2f 90       	pop	r2
     5f2:	1f 90       	pop	r1
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5fa:	08 95       	ret

000005fc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	0f 92       	push	r0
     604:	1f 92       	push	r1
     606:	11 24       	eor	r1, r1
     608:	2f 92       	push	r2
     60a:	3f 92       	push	r3
     60c:	4f 92       	push	r4
     60e:	5f 92       	push	r5
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
     644:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     648:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     64c:	0d b6       	in	r0, 0x3d	; 61
     64e:	0d 92       	st	X+, r0
     650:	0e b6       	in	r0, 0x3e	; 62
     652:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     654:	0e 94 07 05 	call	0xa0e	; 0xa0e <xTaskIncrementTick>
     658:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     65a:	0e 94 41 06 	call	0xc82	; 0xc82 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     65e:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     662:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     666:	cd 91       	ld	r28, X+
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	dd 91       	ld	r29, X+
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	ff 91       	pop	r31
     670:	ef 91       	pop	r30
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	bf 90       	pop	r11
     698:	af 90       	pop	r10
     69a:	9f 90       	pop	r9
     69c:	8f 90       	pop	r8
     69e:	7f 90       	pop	r7
     6a0:	6f 90       	pop	r6
     6a2:	5f 90       	pop	r5
     6a4:	4f 90       	pop	r4
     6a6:	3f 90       	pop	r3
     6a8:	2f 90       	pop	r2
     6aa:	1f 90       	pop	r1
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0

	asm volatile ( "ret" );
     6b2:	08 95       	ret

000006b4 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     6b4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <vPortYieldFromTick>
		asm volatile ( "reti" );
     6b8:	18 95       	reti

000006ba <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     6ba:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     6be:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     6c2:	80 81       	ld	r24, Z
     6c4:	81 11       	cpse	r24, r1
     6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <prvResetNextTaskUnblockTime+0x1c>
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
     6cc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     6d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     6d4:	08 95       	ret
     6d6:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     6da:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     6de:	05 80       	ldd	r0, Z+5	; 0x05
     6e0:	f6 81       	ldd	r31, Z+6	; 0x06
     6e2:	e0 2d       	mov	r30, r0
     6e4:	06 80       	ldd	r0, Z+6	; 0x06
     6e6:	f7 81       	ldd	r31, Z+7	; 0x07
     6e8:	e0 2d       	mov	r30, r0
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     6f2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     6f6:	08 95       	ret

000006f8 <prvIdleTask>:
     6f8:	01 e2       	ldi	r16, 0x21	; 33
     6fa:	11 e0       	ldi	r17, 0x01	; 1
     6fc:	0f 2e       	mov	r0, r31
     6fe:	f9 e4       	ldi	r31, 0x49	; 73
     700:	ef 2e       	mov	r14, r31
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	ff 2e       	mov	r15, r31
     706:	f0 2d       	mov	r31, r0
     708:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     70c:	88 23       	and	r24, r24
     70e:	29 f1       	breq	.+74     	; 0x75a <prvIdleTask+0x62>
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	0f 92       	push	r0
     716:	d8 01       	movw	r26, r16
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	16 97       	sbiw	r26, 0x06	; 6
     720:	c6 81       	ldd	r28, Z+6	; 0x06
     722:	d7 81       	ldd	r29, Z+7	; 0x07
     724:	ce 01       	movw	r24, r28
     726:	02 96       	adiw	r24, 0x02	; 2
     728:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uxListRemove>
     72c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     730:	81 50       	subi	r24, 0x01	; 1
     732:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
     736:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	8f 89       	ldd	r24, Y+23	; 0x17
     746:	98 8d       	ldd	r25, Y+24	; 0x18
     748:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
     74c:	ce 01       	movw	r24, r28
     74e:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
     752:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <uxDeletedTasksWaitingCleanUp>
     756:	81 11       	cpse	r24, r1
     758:	db cf       	rjmp	.-74     	; 0x710 <prvIdleTask+0x18>
     75a:	f7 01       	movw	r30, r14
     75c:	80 81       	ld	r24, Z
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	98 f2       	brcs	.-90     	; 0x708 <prvIdleTask+0x10>
     762:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortYield>
     766:	d0 cf       	rjmp	.-96     	; 0x708 <prvIdleTask+0x10>

00000768 <xTaskCreate>:
     768:	4f 92       	push	r4
     76a:	5f 92       	push	r5
     76c:	6f 92       	push	r6
     76e:	7f 92       	push	r7
     770:	8f 92       	push	r8
     772:	9f 92       	push	r9
     774:	af 92       	push	r10
     776:	bf 92       	push	r11
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	4c 01       	movw	r8, r24
     788:	6b 01       	movw	r12, r22
     78a:	5a 01       	movw	r10, r20
     78c:	29 01       	movw	r4, r18
     78e:	ca 01       	movw	r24, r20
     790:	0e 94 87 01 	call	0x30e	; 0x30e <pvPortMalloc>
     794:	3c 01       	movw	r6, r24
     796:	89 2b       	or	r24, r25
     798:	09 f4       	brne	.+2      	; 0x79c <xTaskCreate+0x34>
     79a:	f8 c0       	rjmp	.+496    	; 0x98c <__stack+0x8d>
     79c:	8c e2       	ldi	r24, 0x2C	; 44
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 87 01 	call	0x30e	; 0x30e <pvPortMalloc>
     7a4:	ec 01       	movw	r28, r24
     7a6:	89 2b       	or	r24, r25
     7a8:	c1 f0       	breq	.+48     	; 0x7da <xTaskCreate+0x72>
     7aa:	78 8e       	std	Y+24, r7	; 0x18
     7ac:	6f 8a       	std	Y+23, r6	; 0x17
     7ae:	a5 01       	movw	r20, r10
     7b0:	65 ea       	ldi	r22, 0xA5	; 165
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	c3 01       	movw	r24, r6
     7b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <memset>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	a8 1a       	sub	r10, r24
     7be:	b1 08       	sbc	r11, r1
     7c0:	8f 89       	ldd	r24, Y+23	; 0x17
     7c2:	98 8d       	ldd	r25, Y+24	; 0x18
     7c4:	a8 0e       	add	r10, r24
     7c6:	b9 1e       	adc	r11, r25
     7c8:	bc a2       	std	Y+36, r11	; 0x24
     7ca:	ab a2       	std	Y+35, r10	; 0x23
     7cc:	d6 01       	movw	r26, r12
     7ce:	8c 91       	ld	r24, X
     7d0:	89 8f       	std	Y+25, r24	; 0x19
     7d2:	8c 91       	ld	r24, X
     7d4:	81 11       	cpse	r24, r1
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <xTaskCreate+0x7a>
     7d8:	18 c0       	rjmp	.+48     	; 0x80a <xTaskCreate+0xa2>
     7da:	c3 01       	movw	r24, r6
     7dc:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
     7e0:	d5 c0       	rjmp	.+426    	; 0x98c <__stack+0x8d>
     7e2:	ae 01       	movw	r20, r28
     7e4:	46 5e       	subi	r20, 0xE6	; 230
     7e6:	5f 4f       	sbci	r21, 0xFF	; 255
     7e8:	f6 01       	movw	r30, r12
     7ea:	31 96       	adiw	r30, 0x01	; 1
     7ec:	b8 e0       	ldi	r27, 0x08	; 8
     7ee:	cb 0e       	add	r12, r27
     7f0:	d1 1c       	adc	r13, r1
     7f2:	cf 01       	movw	r24, r30
     7f4:	21 91       	ld	r18, Z+
     7f6:	da 01       	movw	r26, r20
     7f8:	2d 93       	st	X+, r18
     7fa:	ad 01       	movw	r20, r26
     7fc:	dc 01       	movw	r26, r24
     7fe:	8c 91       	ld	r24, X
     800:	88 23       	and	r24, r24
     802:	19 f0       	breq	.+6      	; 0x80a <xTaskCreate+0xa2>
     804:	ec 15       	cp	r30, r12
     806:	fd 05       	cpc	r31, r13
     808:	a1 f7       	brne	.-24     	; 0x7f2 <xTaskCreate+0x8a>
     80a:	18 a2       	std	Y+32, r1	; 0x20
     80c:	04 30       	cpi	r16, 0x04	; 4
     80e:	08 f0       	brcs	.+2      	; 0x812 <xTaskCreate+0xaa>
     810:	03 e0       	ldi	r16, 0x03	; 3
     812:	0e 8b       	std	Y+22, r16	; 0x16
     814:	0d a3       	std	Y+37, r16	; 0x25
     816:	1e a2       	std	Y+38, r1	; 0x26
     818:	6e 01       	movw	r12, r28
     81a:	b2 e0       	ldi	r27, 0x02	; 2
     81c:	cb 0e       	add	r12, r27
     81e:	d1 1c       	adc	r13, r1
     820:	c6 01       	movw	r24, r12
     822:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialiseItem>
     826:	ce 01       	movw	r24, r28
     828:	0c 96       	adiw	r24, 0x0c	; 12
     82a:	0e 94 b3 01 	call	0x366	; 0x366 <vListInitialiseItem>
     82e:	d9 87       	std	Y+9, r29	; 0x09
     830:	c8 87       	std	Y+8, r28	; 0x08
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	80 1b       	sub	r24, r16
     838:	91 09       	sbc	r25, r1
     83a:	9d 87       	std	Y+13, r25	; 0x0d
     83c:	8c 87       	std	Y+12, r24	; 0x0c
     83e:	db 8b       	std	Y+19, r29	; 0x13
     840:	ca 8b       	std	Y+18, r28	; 0x12
     842:	1f a2       	std	Y+39, r1	; 0x27
     844:	18 a6       	std	Y+40, r1	; 0x28
     846:	19 a6       	std	Y+41, r1	; 0x29
     848:	1a a6       	std	Y+42, r1	; 0x2a
     84a:	1b a6       	std	Y+43, r1	; 0x2b
     84c:	a2 01       	movw	r20, r4
     84e:	b4 01       	movw	r22, r8
     850:	c5 01       	movw	r24, r10
     852:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pxPortInitialiseStack>
     856:	99 83       	std	Y+1, r25	; 0x01
     858:	88 83       	st	Y, r24
     85a:	e1 14       	cp	r14, r1
     85c:	f1 04       	cpc	r15, r1
     85e:	19 f0       	breq	.+6      	; 0x866 <xTaskCreate+0xfe>
     860:	f7 01       	movw	r30, r14
     862:	d1 83       	std	Z+1, r29	; 0x01
     864:	c0 83       	st	Z, r28
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	0f 92       	push	r0
     86c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     870:	8f 5f       	subi	r24, 0xFF	; 255
     872:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
     876:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <pxCurrentTCB>
     87a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     87e:	89 2b       	or	r24, r25
     880:	a9 f5       	brne	.+106    	; 0x8ec <xTaskCreate+0x184>
     882:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
     886:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
     88a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	e9 f5       	brne	.+122    	; 0x90c <__stack+0xd>
     892:	89 e4       	ldi	r24, 0x49	; 73
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     89a:	82 e5       	ldi	r24, 0x52	; 82
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8a2:	8b e5       	ldi	r24, 0x5B	; 91
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8aa:	84 e6       	ldi	r24, 0x64	; 100
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8b2:	80 e4       	ldi	r24, 0x40	; 64
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8ba:	87 e3       	ldi	r24, 0x37	; 55
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8c2:	8a e2       	ldi	r24, 0x2A	; 42
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8ca:	81 e2       	ldi	r24, 0x21	; 33
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialise>
     8d2:	80 e4       	ldi	r24, 0x40	; 64
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <pxDelayedTaskList+0x1>
     8da:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <pxDelayedTaskList>
     8de:	87 e3       	ldi	r24, 0x37	; 55
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
     8e6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
     8ea:	10 c0       	rjmp	.+32     	; 0x90c <__stack+0xd>
     8ec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
     8f0:	81 11       	cpse	r24, r1
     8f2:	0c c0       	rjmp	.+24     	; 0x90c <__stack+0xd>
     8f4:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     8f8:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     8fc:	96 89       	ldd	r25, Z+22	; 0x16
     8fe:	8e 89       	ldd	r24, Y+22	; 0x16
     900:	89 17       	cp	r24, r25
     902:	20 f0       	brcs	.+8      	; 0x90c <__stack+0xd>
     904:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <pxCurrentTCB+0x1>
     908:	c0 93 6d 01 	sts	0x016D, r28	; 0x80016d <pxCurrentTCB>
     90c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
     910:	8f 5f       	subi	r24, 0xFF	; 255
     912:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
     916:	e0 90 6d 01 	lds	r14, 0x016D	; 0x80016d <pxCurrentTCB>
     91a:	f0 90 6e 01 	lds	r15, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     91e:	6b a1       	ldd	r22, Y+35	; 0x23
     920:	7c a1       	ldd	r23, Y+36	; 0x24
     922:	88 81       	ld	r24, Y
     924:	99 81       	ldd	r25, Y+1	; 0x01
     926:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     92a:	d7 01       	movw	r26, r14
     92c:	92 96       	adiw	r26, 0x22	; 34
     92e:	9c 93       	st	X, r25
     930:	8e 93       	st	-X, r24
     932:	91 97       	sbiw	r26, 0x21	; 33
     934:	8e 89       	ldd	r24, Y+22	; 0x16
     936:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     93a:	98 17       	cp	r25, r24
     93c:	10 f4       	brcc	.+4      	; 0x942 <__stack+0x43>
     93e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9c 01       	movw	r18, r24
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	b6 01       	movw	r22, r12
     958:	87 5b       	subi	r24, 0xB7	; 183
     95a:	9e 4f       	sbci	r25, 0xFE	; 254
     95c:	0e 94 b7 01 	call	0x36e	; 0x36e <vListInsertEnd>
     960:	0f 90       	pop	r0
     962:	0f be       	out	0x3f, r0	; 63
     964:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
     968:	88 23       	and	r24, r24
     96a:	61 f0       	breq	.+24     	; 0x984 <__stack+0x85>
     96c:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     970:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     974:	96 89       	ldd	r25, Z+22	; 0x16
     976:	8e 89       	ldd	r24, Y+22	; 0x16
     978:	98 17       	cp	r25, r24
     97a:	30 f4       	brcc	.+12     	; 0x988 <__stack+0x89>
     97c:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortYield>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	05 c0       	rjmp	.+10     	; 0x98e <__stack+0x8f>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	01 c0       	rjmp	.+2      	; 0x98e <__stack+0x8f>
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	6f 90       	pop	r6
     9a8:	5f 90       	pop	r5
     9aa:	4f 90       	pop	r4
     9ac:	08 95       	ret

000009ae <vTaskStartScheduler>:
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	0f 2e       	mov	r0, r31
     9b6:	f3 e1       	ldi	r31, 0x13	; 19
     9b8:	ef 2e       	mov	r14, r31
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	ff 2e       	mov	r15, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	44 e6       	ldi	r20, 0x64	; 100
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	66 e0       	ldi	r22, 0x06	; 6
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	8c e7       	ldi	r24, 0x7C	; 124
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 b4 03 	call	0x768	; 0x768 <xTaskCreate>
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	81 f4       	brne	.+32     	; 0x9fa <vTaskStartScheduler+0x4c>
     9da:	f8 94       	cli
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     9e4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
     9ee:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
     9f2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
     9f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <xPortStartScheduler>
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	08 95       	ret

00000a02 <vTaskSuspendAll>:
     a02:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     a0c:	08 95       	ret

00000a0e <xTaskIncrementTick>:
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     a22:	81 11       	cpse	r24, r1
     a24:	99 c0       	rjmp	.+306    	; 0xb58 <xTaskIncrementTick+0x14a>
     a26:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
     a2a:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	e8 1a       	sub	r14, r24
     a32:	f8 0a       	sbc	r15, r24
     a34:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
     a38:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
     a3c:	e1 14       	cp	r14, r1
     a3e:	f1 04       	cpc	r15, r1
     a40:	b9 f4       	brne	.+46     	; 0xa70 <xTaskIncrementTick+0x62>
     a42:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <pxDelayedTaskList>
     a46:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     a4a:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <pxOverflowDelayedTaskList>
     a4e:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <pxOverflowDelayedTaskList+0x1>
     a52:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <pxDelayedTaskList+0x1>
     a56:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <pxDelayedTaskList>
     a5a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxOverflowDelayedTaskList+0x1>
     a5e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxOverflowDelayedTaskList>
     a62:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
     a6c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvResetNextTaskUnblockTime>
     a70:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
     a74:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
     a78:	e8 16       	cp	r14, r24
     a7a:	f9 06       	cpc	r15, r25
     a7c:	10 f4       	brcc	.+4      	; 0xa82 <xTaskIncrementTick+0x74>
     a7e:	d1 2c       	mov	r13, r1
     a80:	53 c0       	rjmp	.+166    	; 0xb28 <xTaskIncrementTick+0x11a>
     a82:	d1 2c       	mov	r13, r1
     a84:	cc 24       	eor	r12, r12
     a86:	c3 94       	inc	r12
     a88:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     a8c:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     a90:	80 81       	ld	r24, Z
     a92:	81 11       	cpse	r24, r1
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <xTaskIncrementTick+0x96>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	9f ef       	ldi	r25, 0xFF	; 255
     a9a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     a9e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     aa2:	42 c0       	rjmp	.+132    	; 0xb28 <xTaskIncrementTick+0x11a>
     aa4:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <pxDelayedTaskList>
     aa8:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <pxDelayedTaskList+0x1>
     aac:	05 80       	ldd	r0, Z+5	; 0x05
     aae:	f6 81       	ldd	r31, Z+6	; 0x06
     ab0:	e0 2d       	mov	r30, r0
     ab2:	c6 81       	ldd	r28, Z+6	; 0x06
     ab4:	d7 81       	ldd	r29, Z+7	; 0x07
     ab6:	8a 81       	ldd	r24, Y+2	; 0x02
     ab8:	9b 81       	ldd	r25, Y+3	; 0x03
     aba:	e8 16       	cp	r14, r24
     abc:	f9 06       	cpc	r15, r25
     abe:	28 f4       	brcc	.+10     	; 0xaca <xTaskIncrementTick+0xbc>
     ac0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
     ac4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
     ac8:	2f c0       	rjmp	.+94     	; 0xb28 <xTaskIncrementTick+0x11a>
     aca:	8e 01       	movw	r16, r28
     acc:	0e 5f       	subi	r16, 0xFE	; 254
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	c8 01       	movw	r24, r16
     ad2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uxListRemove>
     ad6:	8c 89       	ldd	r24, Y+20	; 0x14
     ad8:	9d 89       	ldd	r25, Y+21	; 0x15
     ada:	89 2b       	or	r24, r25
     adc:	21 f0       	breq	.+8      	; 0xae6 <xTaskIncrementTick+0xd8>
     ade:	ce 01       	movw	r24, r28
     ae0:	0c 96       	adiw	r24, 0x0c	; 12
     ae2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uxListRemove>
     ae6:	8e 89       	ldd	r24, Y+22	; 0x16
     ae8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     aec:	98 17       	cp	r25, r24
     aee:	10 f4       	brcc	.+4      	; 0xaf4 <xTaskIncrementTick+0xe6>
     af0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	9c 01       	movw	r18, r24
     af8:	22 0f       	add	r18, r18
     afa:	33 1f       	adc	r19, r19
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	22 0f       	add	r18, r18
     b02:	33 1f       	adc	r19, r19
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	b8 01       	movw	r22, r16
     b0a:	87 5b       	subi	r24, 0xB7	; 183
     b0c:	9e 4f       	sbci	r25, 0xFE	; 254
     b0e:	0e 94 b7 01 	call	0x36e	; 0x36e <vListInsertEnd>
     b12:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     b16:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     b1a:	9e 89       	ldd	r25, Y+22	; 0x16
     b1c:	86 89       	ldd	r24, Z+22	; 0x16
     b1e:	98 17       	cp	r25, r24
     b20:	08 f4       	brcc	.+2      	; 0xb24 <xTaskIncrementTick+0x116>
     b22:	b2 cf       	rjmp	.-156    	; 0xa88 <xTaskIncrementTick+0x7a>
     b24:	dc 2c       	mov	r13, r12
     b26:	b0 cf       	rjmp	.-160    	; 0xa88 <xTaskIncrementTick+0x7a>
     b28:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     b2c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     b30:	86 89       	ldd	r24, Z+22	; 0x16
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	fc 01       	movw	r30, r24
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	8e 0f       	add	r24, r30
     b44:	9f 1f       	adc	r25, r31
     b46:	fc 01       	movw	r30, r24
     b48:	e7 5b       	subi	r30, 0xB7	; 183
     b4a:	fe 4f       	sbci	r31, 0xFE	; 254
     b4c:	80 81       	ld	r24, Z
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	48 f0       	brcs	.+18     	; 0xb64 <xTaskIncrementTick+0x156>
     b52:	dd 24       	eor	r13, r13
     b54:	d3 94       	inc	r13
     b56:	06 c0       	rjmp	.+12     	; 0xb64 <xTaskIncrementTick+0x156>
     b58:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
     b62:	d1 2c       	mov	r13, r1
     b64:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
     b68:	88 23       	and	r24, r24
     b6a:	11 f0       	breq	.+4      	; 0xb70 <xTaskIncrementTick+0x162>
     b6c:	dd 24       	eor	r13, r13
     b6e:	d3 94       	inc	r13
     b70:	8d 2d       	mov	r24, r13
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	08 95       	ret

00000b84 <xTaskResumeAll>:
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	0f 92       	push	r0
     b98:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     b9c:	81 50       	subi	r24, 0x01	; 1
     b9e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     ba2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     ba6:	81 11       	cpse	r24, r1
     ba8:	5f c0       	rjmp	.+190    	; 0xc68 <xTaskResumeAll+0xe4>
     baa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
     bae:	81 11       	cpse	r24, r1
     bb0:	33 c0       	rjmp	.+102    	; 0xc18 <xTaskResumeAll+0x94>
     bb2:	5d c0       	rjmp	.+186    	; 0xc6e <xTaskResumeAll+0xea>
     bb4:	d7 01       	movw	r26, r14
     bb6:	15 96       	adiw	r26, 0x05	; 5
     bb8:	ed 91       	ld	r30, X+
     bba:	fc 91       	ld	r31, X
     bbc:	16 97       	sbiw	r26, 0x06	; 6
     bbe:	c6 81       	ldd	r28, Z+6	; 0x06
     bc0:	d7 81       	ldd	r29, Z+7	; 0x07
     bc2:	ce 01       	movw	r24, r28
     bc4:	0c 96       	adiw	r24, 0x0c	; 12
     bc6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uxListRemove>
     bca:	8e 01       	movw	r16, r28
     bcc:	0e 5f       	subi	r16, 0xFE	; 254
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	c8 01       	movw	r24, r16
     bd2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uxListRemove>
     bd6:	8e 89       	ldd	r24, Y+22	; 0x16
     bd8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
     bdc:	98 17       	cp	r25, r24
     bde:	10 f4       	brcc	.+4      	; 0xbe4 <xTaskResumeAll+0x60>
     be0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9c 01       	movw	r18, r24
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	b8 01       	movw	r22, r16
     bfa:	87 5b       	subi	r24, 0xB7	; 183
     bfc:	9e 4f       	sbci	r25, 0xFE	; 254
     bfe:	0e 94 b7 01 	call	0x36e	; 0x36e <vListInsertEnd>
     c02:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     c06:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     c0a:	9e 89       	ldd	r25, Y+22	; 0x16
     c0c:	86 89       	ldd	r24, Z+22	; 0x16
     c0e:	98 17       	cp	r25, r24
     c10:	68 f0       	brcs	.+26     	; 0xc2c <xTaskResumeAll+0xa8>
     c12:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
     c16:	0a c0       	rjmp	.+20     	; 0xc2c <xTaskResumeAll+0xa8>
     c18:	c0 e0       	ldi	r28, 0x00	; 0
     c1a:	d0 e0       	ldi	r29, 0x00	; 0
     c1c:	0f 2e       	mov	r0, r31
     c1e:	fa e2       	ldi	r31, 0x2A	; 42
     c20:	ef 2e       	mov	r14, r31
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	ff 2e       	mov	r15, r31
     c26:	f0 2d       	mov	r31, r0
     c28:	dd 24       	eor	r13, r13
     c2a:	d3 94       	inc	r13
     c2c:	f7 01       	movw	r30, r14
     c2e:	80 81       	ld	r24, Z
     c30:	81 11       	cpse	r24, r1
     c32:	c0 cf       	rjmp	.-128    	; 0xbb4 <xTaskResumeAll+0x30>
     c34:	cd 2b       	or	r28, r29
     c36:	11 f0       	breq	.+4      	; 0xc3c <xTaskResumeAll+0xb8>
     c38:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvResetNextTaskUnblockTime>
     c3c:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
     c40:	cc 23       	and	r28, r28
     c42:	51 f0       	breq	.+20     	; 0xc58 <xTaskResumeAll+0xd4>
     c44:	d1 e0       	ldi	r29, 0x01	; 1
     c46:	0e 94 07 05 	call	0xa0e	; 0xa0e <xTaskIncrementTick>
     c4a:	81 11       	cpse	r24, r1
     c4c:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
     c50:	c1 50       	subi	r28, 0x01	; 1
     c52:	c9 f7       	brne	.-14     	; 0xc46 <xTaskResumeAll+0xc2>
     c54:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
     c58:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
     c5c:	88 23       	and	r24, r24
     c5e:	31 f0       	breq	.+12     	; 0xc6c <xTaskResumeAll+0xe8>
     c60:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortYield>
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <xTaskResumeAll+0xea>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <xTaskResumeAll+0xea>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	08 95       	ret

00000c82 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     c86:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     c8a:	88 23       	and	r24, r24
     c8c:	21 f0       	breq	.+8      	; 0xc96 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
     c94:	c1 c0       	rjmp	.+386    	; 0xe18 <vTaskSwitchContext+0x196>
	}
	else
	{
		xYieldPending = pdFALSE;
     c96:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
     c9a:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
     c9e:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     ca2:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     ca6:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     caa:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     cae:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     cb2:	93 96       	adiw	r26, 0x23	; 35
     cb4:	6d 91       	ld	r22, X+
     cb6:	7c 91       	ld	r23, X
     cb8:	94 97       	sbiw	r26, 0x24	; 36
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     cc2:	9a a3       	std	Y+34, r25	; 0x22
     cc4:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
     cc6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
     cca:	82 2f       	mov	r24, r18
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	fc 01       	movw	r30, r24
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	e8 0f       	add	r30, r24
     cde:	f9 1f       	adc	r31, r25
     ce0:	e7 5b       	subi	r30, 0xB7	; 183
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	30 81       	ld	r19, Z
     ce6:	31 11       	cpse	r19, r1
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <vTaskSwitchContext+0x8a>
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	82 2f       	mov	r24, r18
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	fc 01       	movw	r30, r24
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	e8 0f       	add	r30, r24
     d00:	f9 1f       	adc	r31, r25
     d02:	e7 5b       	subi	r30, 0xB7	; 183
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	30 81       	ld	r19, Z
     d08:	33 23       	and	r19, r19
     d0a:	79 f3       	breq	.-34     	; 0xcea <vTaskSwitchContext+0x68>
     d0c:	ac 01       	movw	r20, r24
     d0e:	44 0f       	add	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	44 0f       	add	r20, r20
     d14:	55 1f       	adc	r21, r21
     d16:	44 0f       	add	r20, r20
     d18:	55 1f       	adc	r21, r21
     d1a:	48 0f       	add	r20, r24
     d1c:	59 1f       	adc	r21, r25
     d1e:	da 01       	movw	r26, r20
     d20:	a7 5b       	subi	r26, 0xB7	; 183
     d22:	be 4f       	sbci	r27, 0xFE	; 254
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	ed 91       	ld	r30, X+
     d28:	fc 91       	ld	r31, X
     d2a:	12 97       	sbiw	r26, 0x02	; 2
     d2c:	02 80       	ldd	r0, Z+2	; 0x02
     d2e:	f3 81       	ldd	r31, Z+3	; 0x03
     d30:	e0 2d       	mov	r30, r0
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	fc 93       	st	X, r31
     d36:	ee 93       	st	-X, r30
     d38:	11 97       	sbiw	r26, 0x01	; 1
     d3a:	44 5b       	subi	r20, 0xB4	; 180
     d3c:	5e 4f       	sbci	r21, 0xFE	; 254
     d3e:	e4 17       	cp	r30, r20
     d40:	f5 07       	cpc	r31, r21
     d42:	29 f4       	brne	.+10     	; 0xd4e <vTaskSwitchContext+0xcc>
     d44:	42 81       	ldd	r20, Z+2	; 0x02
     d46:	53 81       	ldd	r21, Z+3	; 0x03
     d48:	fd 01       	movw	r30, r26
     d4a:	52 83       	std	Z+2, r21	; 0x02
     d4c:	41 83       	std	Z+1, r20	; 0x01
     d4e:	fc 01       	movw	r30, r24
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	8e 0f       	add	r24, r30
     d5e:	9f 1f       	adc	r25, r31
     d60:	fc 01       	movw	r30, r24
     d62:	e7 5b       	subi	r30, 0xB7	; 183
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
     d66:	01 80       	ldd	r0, Z+1	; 0x01
     d68:	f2 81       	ldd	r31, Z+2	; 0x02
     d6a:	e0 2d       	mov	r30, r0
     d6c:	86 81       	ldd	r24, Z+6	; 0x06
     d6e:	97 81       	ldd	r25, Z+7	; 0x07
     d70:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <pxCurrentTCB+0x1>
     d74:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <pxCurrentTCB>
     d78:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
     d7c:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     d80:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     d84:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     d88:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     d8c:	93 96       	adiw	r26, 0x23	; 35
     d8e:	6d 91       	ld	r22, X+
     d90:	7c 91       	ld	r23, X
     d92:	94 97       	sbiw	r26, 0x24	; 36
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
     d9c:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     da0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     da4:	21 a1       	ldd	r18, Z+33	; 0x21
     da6:	32 a1       	ldd	r19, Z+34	; 0x22
     da8:	82 27       	eor	r24, r18
     daa:	93 27       	eor	r25, r19
     dac:	92 a3       	std	Z+34, r25	; 0x22
     dae:	81 a3       	std	Z+33, r24	; 0x21
     db0:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     db4:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     db8:	81 a1       	ldd	r24, Z+33	; 0x21
     dba:	92 a1       	ldd	r25, Z+34	; 0x22
     dbc:	89 2b       	or	r24, r25
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <vTaskSwitchContext+0x144>
     dc0:	0e 94 48 07 	call	0xe90	; 0xe90 <vApplicationTaskChecksumHook>
     dc4:	29 c0       	rjmp	.+82     	; 0xe18 <vTaskSwitchContext+0x196>
     dc6:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <pxCurrentTCB>
     dca:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dce:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <pxCurrentTCB>
     dd2:	d0 91 6e 01 	lds	r29, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dd6:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <pxCurrentTCB>
     dda:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <pxCurrentTCB+0x1>
     dde:	01 a0       	ldd	r0, Z+33	; 0x21
     de0:	f2 a1       	ldd	r31, Z+34	; 0x22
     de2:	e0 2d       	mov	r30, r0
     de4:	f6 95       	lsr	r31
     de6:	e7 95       	ror	r30
     de8:	f6 95       	lsr	r31
     dea:	e7 95       	ror	r30
     dec:	f6 95       	lsr	r31
     dee:	e7 95       	ror	r30
     df0:	88 81       	ld	r24, Y
     df2:	99 81       	ldd	r25, Y+1	; 0x01
     df4:	e8 0f       	add	r30, r24
     df6:	f9 1f       	adc	r31, r25
     df8:	40 81       	ld	r20, Z
     dfa:	91 96       	adiw	r26, 0x21	; 33
     dfc:	2d 91       	ld	r18, X+
     dfe:	3c 91       	ld	r19, X
     e00:	92 97       	sbiw	r26, 0x22	; 34
     e02:	27 70       	andi	r18, 0x07	; 7
     e04:	33 27       	eor	r19, r19
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vTaskSwitchContext+0x18e>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	2a 95       	dec	r18
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <vTaskSwitchContext+0x18a>
     e14:	84 27       	eor	r24, r20
     e16:	80 83       	st	Z, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	00 d0       	rcall	.+0      	; 0xe24 <_Z7task_txPv+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=45;
     e28:	8d e2       	ldi	r24, 0x2D	; 45
     e2a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
     e2c:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		teste=50;
     e2e:	82 e3       	ldi	r24, 0x32	; 50
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <_Z7task_txPv+0x12>

00000e34 <_Z7task_rxPv>:
	}
}

void task_rx(void* p)
{	
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	00 d0       	rcall	.+0      	; 0xe3a <_Z7task_rxPv+0x6>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t teste=85;
     e3e:	85 e5       	ldi	r24, 0x55	; 85
     e40:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t teste2=45;
     e42:	8d e2       	ldi	r24, 0x2D	; 45
     e44:	8a 83       	std	Y+2, r24	; 0x02
     e46:	ff cf       	rjmp	.-2      	; 0xe46 <_Z7task_rxPv+0x12>

00000e48 <main>:
volatile uint16_t globa;
volatile uint16_t globa1;


int main(void)
{
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
     e52:	e1 2c       	mov	r14, r1
     e54:	f1 2c       	mov	r15, r1
     e56:	01 e0       	ldi	r16, 0x01	; 1
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	44 e6       	ldi	r20, 0x64	; 100
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	6b e0       	ldi	r22, 0x0B	; 11
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	8f e0       	ldi	r24, 0x0F	; 15
     e66:	97 e0       	ldi	r25, 0x07	; 7
     e68:	0e 94 b4 03 	call	0x768	; 0x768 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	44 e6       	ldi	r20, 0x64	; 100
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	6e e0       	ldi	r22, 0x0E	; 14
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	8a e1       	ldi	r24, 0x1A	; 26
     e7a:	97 e0       	ldi	r25, 0x07	; 7
     e7c:	0e 94 b4 03 	call	0x768	; 0x768 <xTaskCreate>
	vTaskStartScheduler();
     e80:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vTaskStartScheduler>
	
	return 0;
}
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	08 95       	ret

00000e90 <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
		globa=0x01;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <globa+0x1>
     e98:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <globa>
     e9c:	08 95       	ret

00000e9e <malloc>:
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	91 05       	cpc	r25, r1
     eaa:	10 f4       	brcc	.+4      	; 0xeb0 <malloc+0x12>
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <__flp>
     eb4:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <__flp+0x1>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	30 97       	sbiw	r30, 0x00	; 0
     ec2:	19 f1       	breq	.+70     	; 0xf0a <malloc+0x6c>
     ec4:	40 81       	ld	r20, Z
     ec6:	51 81       	ldd	r21, Z+1	; 0x01
     ec8:	02 81       	ldd	r16, Z+2	; 0x02
     eca:	13 81       	ldd	r17, Z+3	; 0x03
     ecc:	48 17       	cp	r20, r24
     ece:	59 07       	cpc	r21, r25
     ed0:	c8 f0       	brcs	.+50     	; 0xf04 <malloc+0x66>
     ed2:	84 17       	cp	r24, r20
     ed4:	95 07       	cpc	r25, r21
     ed6:	69 f4       	brne	.+26     	; 0xef2 <malloc+0x54>
     ed8:	10 97       	sbiw	r26, 0x00	; 0
     eda:	31 f0       	breq	.+12     	; 0xee8 <malloc+0x4a>
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	0c 93       	st	X, r16
     ee0:	12 97       	sbiw	r26, 0x02	; 2
     ee2:	13 96       	adiw	r26, 0x03	; 3
     ee4:	1c 93       	st	X, r17
     ee6:	27 c0       	rjmp	.+78     	; 0xf36 <malloc+0x98>
     ee8:	00 93 73 01 	sts	0x0173, r16	; 0x800173 <__flp>
     eec:	10 93 74 01 	sts	0x0174, r17	; 0x800174 <__flp+0x1>
     ef0:	22 c0       	rjmp	.+68     	; 0xf36 <malloc+0x98>
     ef2:	21 15       	cp	r18, r1
     ef4:	31 05       	cpc	r19, r1
     ef6:	19 f0       	breq	.+6      	; 0xefe <malloc+0x60>
     ef8:	42 17       	cp	r20, r18
     efa:	53 07       	cpc	r21, r19
     efc:	18 f4       	brcc	.+6      	; 0xf04 <malloc+0x66>
     efe:	9a 01       	movw	r18, r20
     f00:	bd 01       	movw	r22, r26
     f02:	ef 01       	movw	r28, r30
     f04:	df 01       	movw	r26, r30
     f06:	f8 01       	movw	r30, r16
     f08:	db cf       	rjmp	.-74     	; 0xec0 <malloc+0x22>
     f0a:	21 15       	cp	r18, r1
     f0c:	31 05       	cpc	r19, r1
     f0e:	f9 f0       	breq	.+62     	; 0xf4e <malloc+0xb0>
     f10:	28 1b       	sub	r18, r24
     f12:	39 0b       	sbc	r19, r25
     f14:	24 30       	cpi	r18, 0x04	; 4
     f16:	31 05       	cpc	r19, r1
     f18:	80 f4       	brcc	.+32     	; 0xf3a <malloc+0x9c>
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	9b 81       	ldd	r25, Y+3	; 0x03
     f1e:	61 15       	cp	r22, r1
     f20:	71 05       	cpc	r23, r1
     f22:	21 f0       	breq	.+8      	; 0xf2c <malloc+0x8e>
     f24:	fb 01       	movw	r30, r22
     f26:	93 83       	std	Z+3, r25	; 0x03
     f28:	82 83       	std	Z+2, r24	; 0x02
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <malloc+0x96>
     f2c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <__flp+0x1>
     f30:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <__flp>
     f34:	fe 01       	movw	r30, r28
     f36:	32 96       	adiw	r30, 0x02	; 2
     f38:	44 c0       	rjmp	.+136    	; 0xfc2 <malloc+0x124>
     f3a:	fe 01       	movw	r30, r28
     f3c:	e2 0f       	add	r30, r18
     f3e:	f3 1f       	adc	r31, r19
     f40:	81 93       	st	Z+, r24
     f42:	91 93       	st	Z+, r25
     f44:	22 50       	subi	r18, 0x02	; 2
     f46:	31 09       	sbc	r19, r1
     f48:	39 83       	std	Y+1, r19	; 0x01
     f4a:	28 83       	st	Y, r18
     f4c:	3a c0       	rjmp	.+116    	; 0xfc2 <malloc+0x124>
     f4e:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
     f52:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
     f56:	23 2b       	or	r18, r19
     f58:	41 f4       	brne	.+16     	; 0xf6a <malloc+0xcc>
     f5a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f5e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f62:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <__brkval+0x1>
     f66:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <__brkval>
     f6a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f6e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f72:	21 15       	cp	r18, r1
     f74:	31 05       	cpc	r19, r1
     f76:	41 f4       	brne	.+16     	; 0xf88 <malloc+0xea>
     f78:	2d b7       	in	r18, 0x3d	; 61
     f7a:	3e b7       	in	r19, 0x3e	; 62
     f7c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f80:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f84:	24 1b       	sub	r18, r20
     f86:	35 0b       	sbc	r19, r21
     f88:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <__brkval>
     f8c:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <__brkval+0x1>
     f90:	e2 17       	cp	r30, r18
     f92:	f3 07       	cpc	r31, r19
     f94:	a0 f4       	brcc	.+40     	; 0xfbe <malloc+0x120>
     f96:	2e 1b       	sub	r18, r30
     f98:	3f 0b       	sbc	r19, r31
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	78 f0       	brcs	.+30     	; 0xfbe <malloc+0x120>
     fa0:	ac 01       	movw	r20, r24
     fa2:	4e 5f       	subi	r20, 0xFE	; 254
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	24 17       	cp	r18, r20
     fa8:	35 07       	cpc	r19, r21
     faa:	48 f0       	brcs	.+18     	; 0xfbe <malloc+0x120>
     fac:	4e 0f       	add	r20, r30
     fae:	5f 1f       	adc	r21, r31
     fb0:	50 93 72 01 	sts	0x0172, r21	; 0x800172 <__brkval+0x1>
     fb4:	40 93 71 01 	sts	0x0171, r20	; 0x800171 <__brkval>
     fb8:	81 93       	st	Z+, r24
     fba:	91 93       	st	Z+, r25
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <malloc+0x124>
     fbe:	e0 e0       	ldi	r30, 0x00	; 0
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	cf 01       	movw	r24, r30
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <free>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <free+0xa>
     fd6:	81 c0       	rjmp	.+258    	; 0x10da <free+0x10c>
     fd8:	fc 01       	movw	r30, r24
     fda:	32 97       	sbiw	r30, 0x02	; 2
     fdc:	13 82       	std	Z+3, r1	; 0x03
     fde:	12 82       	std	Z+2, r1	; 0x02
     fe0:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <__flp>
     fe4:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <__flp+0x1>
     fe8:	10 97       	sbiw	r26, 0x00	; 0
     fea:	81 f4       	brne	.+32     	; 0x100c <free+0x3e>
     fec:	20 81       	ld	r18, Z
     fee:	31 81       	ldd	r19, Z+1	; 0x01
     ff0:	82 0f       	add	r24, r18
     ff2:	93 1f       	adc	r25, r19
     ff4:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
     ff8:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	51 f5       	brne	.+84     	; 0x1056 <free+0x88>
    1002:	f0 93 72 01 	sts	0x0172, r31	; 0x800172 <__brkval+0x1>
    1006:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <__brkval>
    100a:	67 c0       	rjmp	.+206    	; 0x10da <free+0x10c>
    100c:	ed 01       	movw	r28, r26
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	ce 17       	cp	r28, r30
    1014:	df 07       	cpc	r29, r31
    1016:	40 f4       	brcc	.+16     	; 0x1028 <free+0x5a>
    1018:	4a 81       	ldd	r20, Y+2	; 0x02
    101a:	5b 81       	ldd	r21, Y+3	; 0x03
    101c:	9e 01       	movw	r18, r28
    101e:	41 15       	cp	r20, r1
    1020:	51 05       	cpc	r21, r1
    1022:	f1 f0       	breq	.+60     	; 0x1060 <free+0x92>
    1024:	ea 01       	movw	r28, r20
    1026:	f5 cf       	rjmp	.-22     	; 0x1012 <free+0x44>
    1028:	d3 83       	std	Z+3, r29	; 0x03
    102a:	c2 83       	std	Z+2, r28	; 0x02
    102c:	40 81       	ld	r20, Z
    102e:	51 81       	ldd	r21, Z+1	; 0x01
    1030:	84 0f       	add	r24, r20
    1032:	95 1f       	adc	r25, r21
    1034:	c8 17       	cp	r28, r24
    1036:	d9 07       	cpc	r29, r25
    1038:	59 f4       	brne	.+22     	; 0x1050 <free+0x82>
    103a:	88 81       	ld	r24, Y
    103c:	99 81       	ldd	r25, Y+1	; 0x01
    103e:	84 0f       	add	r24, r20
    1040:	95 1f       	adc	r25, r21
    1042:	02 96       	adiw	r24, 0x02	; 2
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	9b 81       	ldd	r25, Y+3	; 0x03
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
    1050:	21 15       	cp	r18, r1
    1052:	31 05       	cpc	r19, r1
    1054:	29 f4       	brne	.+10     	; 0x1060 <free+0x92>
    1056:	f0 93 74 01 	sts	0x0174, r31	; 0x800174 <__flp+0x1>
    105a:	e0 93 73 01 	sts	0x0173, r30	; 0x800173 <__flp>
    105e:	3d c0       	rjmp	.+122    	; 0x10da <free+0x10c>
    1060:	e9 01       	movw	r28, r18
    1062:	fb 83       	std	Y+3, r31	; 0x03
    1064:	ea 83       	std	Y+2, r30	; 0x02
    1066:	49 91       	ld	r20, Y+
    1068:	59 91       	ld	r21, Y+
    106a:	c4 0f       	add	r28, r20
    106c:	d5 1f       	adc	r29, r21
    106e:	ec 17       	cp	r30, r28
    1070:	fd 07       	cpc	r31, r29
    1072:	61 f4       	brne	.+24     	; 0x108c <free+0xbe>
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	84 0f       	add	r24, r20
    107a:	95 1f       	adc	r25, r21
    107c:	02 96       	adiw	r24, 0x02	; 2
    107e:	e9 01       	movw	r28, r18
    1080:	99 83       	std	Y+1, r25	; 0x01
    1082:	88 83       	st	Y, r24
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	9b 83       	std	Y+3, r25	; 0x03
    108a:	8a 83       	std	Y+2, r24	; 0x02
    108c:	e0 e0       	ldi	r30, 0x00	; 0
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	12 96       	adiw	r26, 0x02	; 2
    1092:	8d 91       	ld	r24, X+
    1094:	9c 91       	ld	r25, X
    1096:	13 97       	sbiw	r26, 0x03	; 3
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	19 f0       	breq	.+6      	; 0x10a2 <free+0xd4>
    109c:	fd 01       	movw	r30, r26
    109e:	dc 01       	movw	r26, r24
    10a0:	f7 cf       	rjmp	.-18     	; 0x1090 <free+0xc2>
    10a2:	8d 91       	ld	r24, X+
    10a4:	9c 91       	ld	r25, X
    10a6:	11 97       	sbiw	r26, 0x01	; 1
    10a8:	9d 01       	movw	r18, r26
    10aa:	2e 5f       	subi	r18, 0xFE	; 254
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	82 0f       	add	r24, r18
    10b0:	93 1f       	adc	r25, r19
    10b2:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <__brkval>
    10b6:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <__brkval+0x1>
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	69 f4       	brne	.+26     	; 0x10da <free+0x10c>
    10c0:	30 97       	sbiw	r30, 0x00	; 0
    10c2:	29 f4       	brne	.+10     	; 0x10ce <free+0x100>
    10c4:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <__flp+0x1>
    10c8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__flp>
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <free+0x104>
    10ce:	13 82       	std	Z+3, r1	; 0x03
    10d0:	12 82       	std	Z+2, r1	; 0x02
    10d2:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <__brkval+0x1>
    10d6:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <__brkval>
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <memset>:
    10e0:	dc 01       	movw	r26, r24
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <memset+0x6>
    10e4:	6d 93       	st	X+, r22
    10e6:	41 50       	subi	r20, 0x01	; 1
    10e8:	50 40       	sbci	r21, 0x00	; 0
    10ea:	e0 f7       	brcc	.-8      	; 0x10e4 <memset+0x4>
    10ec:	08 95       	ret

000010ee <_exit>:
    10ee:	f8 94       	cli

000010f0 <__stop_program>:
    10f0:	ff cf       	rjmp	.-2      	; 0x10f0 <__stop_program>
