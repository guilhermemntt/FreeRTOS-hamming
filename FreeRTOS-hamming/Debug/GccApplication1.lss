
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000f32  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800112  00800112  00000fd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b49  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d97  00000000  00000000  00003df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190c  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  0000649c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001185  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002874  00000000  00000000  00007ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 36       	cpi	r26, 0x69	; 105
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4a 06 	call	0xc94	; 0xc94 <main>
  9e:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uxChecksumGetTaskChecksum>:
}

#elif ( configSUPPORT_TASK_CHECKSUM==3 )

ChecksumType_t uxChecksumGetTaskChecksum(volatile StackType_t *pxStartOfStack, volatile StackType_t	*pxEndOfStack)
{
  a6:	9f 92       	push	r9
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	5c 01       	movw	r10, r24
	uint8_t * data_p=pxStartOfStack+1;
  be:	ac 01       	movw	r20, r24
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t length = pxEndOfStack-pxStartOfStack;
  c4:	68 1b       	sub	r22, r24
  c6:	79 0b       	sbc	r23, r25
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
  c8:	09 f4       	brne	.+2      	; 0xcc <uxChecksumGetTaskChecksum+0x26>
  ca:	89 c0       	rjmp	.+274    	; 0x1de <uxChecksumGetTaskChecksum+0x138>
  cc:	fa 01       	movw	r30, r20
  ce:	eb 01       	movw	r28, r22
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	c8 0f       	add	r28, r24
  d4:	d9 1f       	adc	r29, r25
  d6:	da 01       	movw	r26, r20
  d8:	90 e0       	ldi	r25, 0x00	; 0
		poolH ^= (*(data_p+i) & 0xAA);
  da:	8d 91       	ld	r24, X+
  dc:	8a 7a       	andi	r24, 0xAA	; 170
  de:	98 27       	eor	r25, r24
	uint16_t i;
	uint16_t posbit;
	
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
  e0:	ac 17       	cp	r26, r28
  e2:	bd 07       	cpc	r27, r29
  e4:	d1 f7       	brne	.-12     	; 0xda <uxChecksumGetTaskChecksum+0x34>
  e6:	7e c0       	rjmp	.+252    	; 0x1e4 <uxChecksumGetTaskChecksum+0x13e>
	}
	hammingBits += (paridade(poolH))<<pBit;
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
  e8:	91 91       	ld	r25, Z+
  ea:	9c 7c       	andi	r25, 0xCC	; 204
  ec:	29 27       	eor	r18, r25
		poolH ^= (*(data_p+i) & 0xAA);
	}
	hammingBits += (paridade(poolH))<<pBit;
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
  ee:	ec 17       	cp	r30, r28
  f0:	fd 07       	cpc	r31, r29
  f2:	d1 f7       	brne	.-12     	; 0xe8 <uxChecksumGetTaskChecksum+0x42>
  f4:	88 c0       	rjmp	.+272    	; 0x206 <uxChecksumGetTaskChecksum+0x160>
	}
	hammingBits += (paridade(poolH))<<pBit;
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
  f6:	91 91       	ld	r25, Z+
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	59 27       	eor	r21, r25
		poolH ^= (*(data_p+i) & 0xCC);
	}
	hammingBits += (paridade(poolH))<<pBit;
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	26 17       	cp	r18, r22
 102:	37 07       	cpc	r19, r23
 104:	c0 f3       	brcs	.-16     	; 0xf6 <uxChecksumGetTaskChecksum+0x50>
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
 106:	85 2f       	mov	r24, r21
 108:	82 95       	swap	r24
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	58 27       	eor	r21, r24
 10e:	5f 70       	andi	r21, 0x0F	; 15
 110:	86 e9       	ldi	r24, 0x96	; 150
 112:	99 e6       	ldi	r25, 0x69	; 105
 114:	02 c0       	rjmp	.+4      	; 0x11a <uxChecksumGetTaskChecksum+0x74>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	5a 95       	dec	r21
 11c:	e2 f7       	brpl	.-8      	; 0x116 <uxChecksumGetTaskChecksum+0x70>
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	99 27       	eor	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	8a 0f       	add	r24, r26
 12c:	9b 1f       	adc	r25, r27
	for(pBit=3;(1<<pBit)<(length *8);pBit++){
 12e:	7b 01       	movw	r14, r22
 130:	ee 0c       	add	r14, r14
 132:	ff 1c       	adc	r15, r15
 134:	ee 0c       	add	r14, r14
 136:	ff 1c       	adc	r15, r15
 138:	ee 0c       	add	r14, r14
 13a:	ff 1c       	adc	r15, r15
 13c:	29 e0       	ldi	r18, 0x09	; 9
 13e:	e2 16       	cp	r14, r18
 140:	f1 04       	cpc	r15, r1
 142:	08 f4       	brcc	.+2      	; 0x146 <uxChecksumGetTaskChecksum+0xa0>
 144:	78 c0       	rjmp	.+240    	; 0x236 <uxChecksumGetTaskChecksum+0x190>
 146:	c3 e0       	ldi	r28, 0x03	; 3
 148:	d0 e0       	ldi	r29, 0x00	; 0
		poolH = 0;
		posbit = (1<<(pBit-3));
 14a:	01 e0       	ldi	r16, 0x01	; 1
 14c:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
 14e:	0f 2e       	mov	r0, r31
 150:	f6 e9       	ldi	r31, 0x96	; 150
 152:	cf 2e       	mov	r12, r31
 154:	f9 e6       	ldi	r31, 0x69	; 105
 156:	df 2e       	mov	r13, r31
 158:	f0 2d       	mov	r31, r0
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
	for(pBit=3;(1<<pBit)<(length *8);pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
 15a:	9e 01       	movw	r18, r28
 15c:	23 50       	subi	r18, 0x03	; 3
 15e:	31 09       	sbc	r19, r1
 160:	d8 01       	movw	r26, r16
 162:	02 c0       	rjmp	.+4      	; 0x168 <uxChecksumGetTaskChecksum+0xc2>
 164:	aa 0f       	add	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	2a 95       	dec	r18
 16a:	e2 f7       	brpl	.-8      	; 0x164 <uxChecksumGetTaskChecksum+0xbe>
		for(i=0;i<length;i++){
 16c:	61 15       	cp	r22, r1
 16e:	71 05       	cpc	r23, r1
 170:	91 f0       	breq	.+36     	; 0x196 <uxChecksumGetTaskChecksum+0xf0>
 172:	f5 01       	movw	r30, r10
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	91 2c       	mov	r9, r1
			if((i+1) & (posbit)){
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	ad 01       	movw	r20, r26
 180:	42 23       	and	r20, r18
 182:	53 23       	and	r21, r19
 184:	45 2b       	or	r20, r21
 186:	11 f0       	breq	.+4      	; 0x18c <uxChecksumGetTaskChecksum+0xe6>
				poolH ^= (*(data_p+i));
 188:	41 81       	ldd	r20, Z+1	; 0x01
 18a:	94 26       	eor	r9, r20
 18c:	31 96       	adiw	r30, 0x01	; 1
	}
	hammingBits += (paridade(poolH))<<pBit;
	for(pBit=3;(1<<pBit)<(length *8);pBit++){
		poolH = 0;
		posbit = (1<<(pBit-3));
		for(i=0;i<length;i++){
 18e:	62 17       	cp	r22, r18
 190:	73 07       	cpc	r23, r19
 192:	99 f7       	brne	.-26     	; 0x17a <uxChecksumGetTaskChecksum+0xd4>
 194:	01 c0       	rjmp	.+2      	; 0x198 <uxChecksumGetTaskChecksum+0xf2>
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
	for(pBit=3;(1<<pBit)<(length *8);pBit++){
		poolH = 0;
 196:	91 2c       	mov	r9, r1
		for(i=0;i<length;i++){
			if((i+1) & (posbit)){
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
 198:	29 2d       	mov	r18, r9
 19a:	22 95       	swap	r18
 19c:	2f 70       	andi	r18, 0x0F	; 15
 19e:	29 25       	eor	r18, r9
 1a0:	2f 70       	andi	r18, 0x0F	; 15
 1a2:	a6 01       	movw	r20, r12
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <uxChecksumGetTaskChecksum+0x104>
 1a6:	55 95       	asr	r21
 1a8:	47 95       	ror	r20
 1aa:	2a 95       	dec	r18
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <uxChecksumGetTaskChecksum+0x100>
 1ae:	9a 01       	movw	r18, r20
 1b0:	21 70       	andi	r18, 0x01	; 1
 1b2:	33 27       	eor	r19, r19
 1b4:	0c 2e       	mov	r0, r28
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <uxChecksumGetTaskChecksum+0x116>
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <uxChecksumGetTaskChecksum+0x112>
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
	for(pBit=3;(1<<pBit)<(length *8);pBit++){
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	98 01       	movw	r18, r16
 1c8:	0c 2e       	mov	r0, r28
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <uxChecksumGetTaskChecksum+0x12a>
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	0a 94       	dec	r0
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <uxChecksumGetTaskChecksum+0x126>
 1d4:	2e 15       	cp	r18, r14
 1d6:	3f 05       	cpc	r19, r15
 1d8:	08 f4       	brcc	.+2      	; 0x1dc <uxChecksumGetTaskChecksum+0x136>
 1da:	bf cf       	rjmp	.-130    	; 0x15a <uxChecksumGetTaskChecksum+0xb4>
 1dc:	2c c0       	rjmp	.+88     	; 0x236 <uxChecksumGetTaskChecksum+0x190>
	poolH = 0;
	pBit = 2;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xF0);
	}
	hammingBits += (paridade(poolH))<<pBit;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
				poolH ^= (*(data_p+i));
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
 1e2:	29 c0       	rjmp	.+82     	; 0x236 <uxChecksumGetTaskChecksum+0x190>
	poolH = 0;
	pBit = 0;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xAA);
	}
	hammingBits += (paridade(poolH))<<pBit;
 1e4:	89 2f       	mov	r24, r25
 1e6:	82 95       	swap	r24
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	98 27       	eor	r25, r24
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	a6 e9       	ldi	r26, 0x96	; 150
 1f0:	b9 e6       	ldi	r27, 0x69	; 105
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <uxChecksumGetTaskChecksum+0x152>
 1f4:	b5 95       	asr	r27
 1f6:	a7 95       	ror	r26
 1f8:	9a 95       	dec	r25
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <uxChecksumGetTaskChecksum+0x14e>
 1fc:	8d 01       	movw	r16, r26
 1fe:	01 70       	andi	r16, 0x01	; 1
 200:	11 27       	eor	r17, r17
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	71 cf       	rjmp	.-286    	; 0xe8 <uxChecksumGetTaskChecksum+0x42>
	poolH = 0;
	pBit = 1;
	for(i=0;i<length;i++){
		poolH ^= (*(data_p+i) & 0xCC);
	}
	hammingBits += (paridade(poolH))<<pBit;
 206:	82 2f       	mov	r24, r18
 208:	82 95       	swap	r24
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	28 27       	eor	r18, r24
 20e:	2f 70       	andi	r18, 0x0F	; 15
 210:	86 e9       	ldi	r24, 0x96	; 150
 212:	99 e6       	ldi	r25, 0x69	; 105
 214:	02 c0       	rjmp	.+4      	; 0x21a <uxChecksumGetTaskChecksum+0x174>
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	2a 95       	dec	r18
 21c:	e2 f7       	brpl	.-8      	; 0x216 <uxChecksumGetTaskChecksum+0x170>
 21e:	81 70       	andi	r24, 0x01	; 1
 220:	99 27       	eor	r25, r25
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	dc 01       	movw	r26, r24
 228:	a0 0f       	add	r26, r16
 22a:	b1 1f       	adc	r27, r17
 22c:	fa 01       	movw	r30, r20
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	60 cf       	rjmp	.-320    	; 0xf6 <uxChecksumGetTaskChecksum+0x50>
			}
		}
		hammingBits += (paridade(poolH))<<pBit;
	}
	return (ChecksumType_t)hammingBits;
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	08 95       	ret

0000024e <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
 254:	0e 94 6d 04 	call	0x8da	; 0x8da <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 6f 06 	call	0xcde	; 0xcde <malloc>
 25e:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 260:	0e 94 2e 05 	call	0xa5c	; 0xa5c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 264:	ce 01       	movw	r24, r28
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
	if( pv )
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	41 f0       	breq	.+16     	; 0x284 <vPortFree+0x18>
 274:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
 276:	0e 94 6d 04 	call	0x8da	; 0x8da <vTaskSuspendAll>
		{
			free( pv );
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 07 07 	call	0xe0e	; 0xe0e <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 280:	0e 94 2e 05 	call	0xa5c	; 0xa5c <xTaskResumeAll>
	}
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 28a:	fc 01       	movw	r30, r24
 28c:	03 96       	adiw	r24, 0x03	; 3
 28e:	92 83       	std	Z+2, r25	; 0x02
 290:	81 83       	std	Z+1, r24	; 0x01
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	3f ef       	ldi	r19, 0xFF	; 255
 296:	34 83       	std	Z+4, r19	; 0x04
 298:	23 83       	std	Z+3, r18	; 0x03
 29a:	96 83       	std	Z+6, r25	; 0x06
 29c:	85 83       	std	Z+5, r24	; 0x05
 29e:	90 87       	std	Z+8, r25	; 0x08
 2a0:	87 83       	std	Z+7, r24	; 0x07
 2a2:	10 82       	st	Z, r1
 2a4:	08 95       	ret

000002a6 <vListInitialiseItem>:
 2a6:	fc 01       	movw	r30, r24
 2a8:	11 86       	std	Z+9, r1	; 0x09
 2aa:	10 86       	std	Z+8, r1	; 0x08
 2ac:	08 95       	ret

000002ae <vListInsertEnd>:
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	9c 01       	movw	r18, r24
 2b4:	fb 01       	movw	r30, r22
 2b6:	dc 01       	movw	r26, r24
 2b8:	11 96       	adiw	r26, 0x01	; 1
 2ba:	cd 91       	ld	r28, X+
 2bc:	dc 91       	ld	r29, X
 2be:	12 97       	sbiw	r26, 0x02	; 2
 2c0:	d3 83       	std	Z+3, r29	; 0x03
 2c2:	c2 83       	std	Z+2, r28	; 0x02
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	9d 81       	ldd	r25, Y+5	; 0x05
 2c8:	95 83       	std	Z+5, r25	; 0x05
 2ca:	84 83       	std	Z+4, r24	; 0x04
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	9d 81       	ldd	r25, Y+5	; 0x05
 2d0:	dc 01       	movw	r26, r24
 2d2:	13 96       	adiw	r26, 0x03	; 3
 2d4:	7c 93       	st	X, r23
 2d6:	6e 93       	st	-X, r22
 2d8:	12 97       	sbiw	r26, 0x02	; 2
 2da:	7d 83       	std	Y+5, r23	; 0x05
 2dc:	6c 83       	std	Y+4, r22	; 0x04
 2de:	31 87       	std	Z+9, r19	; 0x09
 2e0:	20 87       	std	Z+8, r18	; 0x08
 2e2:	f9 01       	movw	r30, r18
 2e4:	80 81       	ld	r24, Z
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 83       	st	Z, r24
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 2f6:	a0 85       	ldd	r26, Z+8	; 0x08
 2f8:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 2fa:	c2 81       	ldd	r28, Z+2	; 0x02
 2fc:	d3 81       	ldd	r29, Z+3	; 0x03
 2fe:	84 81       	ldd	r24, Z+4	; 0x04
 300:	95 81       	ldd	r25, Z+5	; 0x05
 302:	9d 83       	std	Y+5, r25	; 0x05
 304:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 306:	c4 81       	ldd	r28, Z+4	; 0x04
 308:	d5 81       	ldd	r29, Z+5	; 0x05
 30a:	82 81       	ldd	r24, Z+2	; 0x02
 30c:	93 81       	ldd	r25, Z+3	; 0x03
 30e:	9b 83       	std	Y+3, r25	; 0x03
 310:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 312:	11 96       	adiw	r26, 0x01	; 1
 314:	8d 91       	ld	r24, X+
 316:	9c 91       	ld	r25, X
 318:	12 97       	sbiw	r26, 0x02	; 2
 31a:	e8 17       	cp	r30, r24
 31c:	f9 07       	cpc	r31, r25
 31e:	31 f4       	brne	.+12     	; 0x32c <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 320:	84 81       	ldd	r24, Z+4	; 0x04
 322:	95 81       	ldd	r25, Z+5	; 0x05
 324:	12 96       	adiw	r26, 0x02	; 2
 326:	9c 93       	st	X, r25
 328:	8e 93       	st	-X, r24
 32a:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 32c:	11 86       	std	Z+9, r1	; 0x09
 32e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 330:	8c 91       	ld	r24, X
 332:	81 50       	subi	r24, 0x01	; 1
 334:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 336:	8c 91       	ld	r24, X
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 33e:	31 e1       	ldi	r19, 0x11	; 17
 340:	fc 01       	movw	r30, r24
 342:	30 83       	st	Z, r19
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	22 e2       	ldi	r18, 0x22	; 34
 348:	20 83       	st	Z, r18
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	a3 e3       	ldi	r26, 0x33	; 51
 34e:	a0 83       	st	Z, r26
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	60 83       	st	Z, r22
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	70 83       	st	Z, r23
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	10 82       	st	Z, r1
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	60 e8       	ldi	r22, 0x80	; 128
 360:	60 83       	st	Z, r22
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	10 82       	st	Z, r1
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	60 83       	st	Z, r22
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	60 83       	st	Z, r22
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	64 e0       	ldi	r22, 0x04	; 4
 376:	60 83       	st	Z, r22
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	60 83       	st	Z, r22
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	66 e0       	ldi	r22, 0x06	; 6
 382:	60 83       	st	Z, r22
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	67 e0       	ldi	r22, 0x07	; 7
 388:	60 83       	st	Z, r22
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	68 e0       	ldi	r22, 0x08	; 8
 38e:	60 83       	st	Z, r22
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	69 e0       	ldi	r22, 0x09	; 9
 394:	60 83       	st	Z, r22
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	60 e1       	ldi	r22, 0x10	; 16
 39a:	60 83       	st	Z, r22
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	30 83       	st	Z, r19
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	32 e1       	ldi	r19, 0x12	; 18
 3a4:	30 83       	st	Z, r19
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	33 e1       	ldi	r19, 0x13	; 19
 3aa:	30 83       	st	Z, r19
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	34 e1       	ldi	r19, 0x14	; 20
 3b0:	30 83       	st	Z, r19
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	35 e1       	ldi	r19, 0x15	; 21
 3b6:	30 83       	st	Z, r19
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	36 e1       	ldi	r19, 0x16	; 22
 3bc:	30 83       	st	Z, r19
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	37 e1       	ldi	r19, 0x17	; 23
 3c2:	30 83       	st	Z, r19
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	38 e1       	ldi	r19, 0x18	; 24
 3c8:	30 83       	st	Z, r19
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	39 e1       	ldi	r19, 0x19	; 25
 3ce:	30 83       	st	Z, r19
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	30 e2       	ldi	r19, 0x20	; 32
 3d4:	30 83       	st	Z, r19
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	31 e2       	ldi	r19, 0x21	; 33
 3da:	30 83       	st	Z, r19
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	20 83       	st	Z, r18
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	23 e2       	ldi	r18, 0x23	; 35
 3e4:	20 83       	st	Z, r18
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	40 83       	st	Z, r20
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	50 83       	st	Z, r21
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	26 e2       	ldi	r18, 0x26	; 38
 3f2:	20 83       	st	Z, r18
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	27 e2       	ldi	r18, 0x27	; 39
 3f8:	20 83       	st	Z, r18
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	28 e2       	ldi	r18, 0x28	; 40
 3fe:	20 83       	st	Z, r18
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	29 e2       	ldi	r18, 0x29	; 41
 404:	20 83       	st	Z, r18
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	20 83       	st	Z, r18
 40c:	31 97       	sbiw	r30, 0x01	; 1
 40e:	21 e3       	ldi	r18, 0x31	; 49
 410:	20 83       	st	Z, r18
 412:	86 97       	sbiw	r24, 0x26	; 38
 414:	08 95       	ret

00000416 <xPortStartScheduler>:
 416:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 41a:	89 ef       	ldi	r24, 0xF9	; 249
 41c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 420:	8b e0       	ldi	r24, 0x0B	; 11
 422:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 426:	ef e6       	ldi	r30, 0x6F	; 111
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	80 83       	st	Z, r24
 430:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 434:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 438:	cd 91       	ld	r28, X+
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	dd 91       	ld	r29, X+
 43e:	de bf       	out	0x3e, r29	; 62
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	bf 90       	pop	r11
 46a:	af 90       	pop	r10
 46c:	9f 90       	pop	r9
 46e:	8f 90       	pop	r8
 470:	7f 90       	pop	r7
 472:	6f 90       	pop	r6
 474:	5f 90       	pop	r5
 476:	4f 90       	pop	r4
 478:	3f 90       	pop	r3
 47a:	2f 90       	pop	r2
 47c:	1f 90       	pop	r1
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	08 95       	ret
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	08 95       	ret

0000048a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	0f 92       	push	r0
 492:	1f 92       	push	r1
 494:	11 24       	eor	r1, r1
 496:	2f 92       	push	r2
 498:	3f 92       	push	r3
 49a:	4f 92       	push	r4
 49c:	5f 92       	push	r5
 49e:	6f 92       	push	r6
 4a0:	7f 92       	push	r7
 4a2:	8f 92       	push	r8
 4a4:	9f 92       	push	r9
 4a6:	af 92       	push	r10
 4a8:	bf 92       	push	r11
 4aa:	cf 92       	push	r12
 4ac:	df 92       	push	r13
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
 4d2:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 4d6:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 4da:	0d b6       	in	r0, 0x3d	; 61
 4dc:	0d 92       	st	X+, r0
 4de:	0e b6       	in	r0, 0x3e	; 62
 4e0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 4e2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 4e6:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 4ea:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 4ee:	cd 91       	ld	r28, X+
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	dd 91       	ld	r29, X+
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	bf 90       	pop	r11
 520:	af 90       	pop	r10
 522:	9f 90       	pop	r9
 524:	8f 90       	pop	r8
 526:	7f 90       	pop	r7
 528:	6f 90       	pop	r6
 52a:	5f 90       	pop	r5
 52c:	4f 90       	pop	r4
 52e:	3f 90       	pop	r3
 530:	2f 90       	pop	r2
 532:	1f 90       	pop	r1
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0

	asm volatile ( "ret" );
 53a:	08 95       	ret

0000053c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	0f 92       	push	r0
 544:	1f 92       	push	r1
 546:	11 24       	eor	r1, r1
 548:	2f 92       	push	r2
 54a:	3f 92       	push	r3
 54c:	4f 92       	push	r4
 54e:	5f 92       	push	r5
 550:	6f 92       	push	r6
 552:	7f 92       	push	r7
 554:	8f 92       	push	r8
 556:	9f 92       	push	r9
 558:	af 92       	push	r10
 55a:	bf 92       	push	r11
 55c:	cf 92       	push	r12
 55e:	df 92       	push	r13
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	2f 93       	push	r18
 56a:	3f 93       	push	r19
 56c:	4f 93       	push	r20
 56e:	5f 93       	push	r21
 570:	6f 93       	push	r22
 572:	7f 93       	push	r23
 574:	8f 93       	push	r24
 576:	9f 93       	push	r25
 578:	af 93       	push	r26
 57a:	bf 93       	push	r27
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
 584:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 588:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 58c:	0d b6       	in	r0, 0x3d	; 61
 58e:	0d 92       	st	X+, r0
 590:	0e b6       	in	r0, 0x3e	; 62
 592:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 594:	0e 94 73 04 	call	0x8e6	; 0x8e6 <xTaskIncrementTick>
 598:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 59a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 59e:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 5a2:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 5a6:	cd 91       	ld	r28, X+
 5a8:	cd bf       	out	0x3d, r28	; 61
 5aa:	dd 91       	ld	r29, X+
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	ff 91       	pop	r31
 5b0:	ef 91       	pop	r30
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	7f 91       	pop	r23
 5c0:	6f 91       	pop	r22
 5c2:	5f 91       	pop	r21
 5c4:	4f 91       	pop	r20
 5c6:	3f 91       	pop	r19
 5c8:	2f 91       	pop	r18
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	ff 90       	pop	r15
 5d0:	ef 90       	pop	r14
 5d2:	df 90       	pop	r13
 5d4:	cf 90       	pop	r12
 5d6:	bf 90       	pop	r11
 5d8:	af 90       	pop	r10
 5da:	9f 90       	pop	r9
 5dc:	8f 90       	pop	r8
 5de:	7f 90       	pop	r7
 5e0:	6f 90       	pop	r6
 5e2:	5f 90       	pop	r5
 5e4:	4f 90       	pop	r4
 5e6:	3f 90       	pop	r3
 5e8:	2f 90       	pop	r2
 5ea:	1f 90       	pop	r1
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0

	asm volatile ( "ret" );
 5f2:	08 95       	ret

000005f4 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 5f4:	0e 94 9e 02 	call	0x53c	; 0x53c <vPortYieldFromTick>
		asm volatile ( "reti" );
 5f8:	18 95       	reti

000005fa <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 5fa:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 5fe:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 602:	80 81       	ld	r24, Z
 604:	81 11       	cpse	r24, r1
 606:	07 c0       	rjmp	.+14     	; 0x616 <prvResetNextTaskUnblockTime+0x1c>
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 610:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 614:	08 95       	ret
 616:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 61a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 61e:	05 80       	ldd	r0, Z+5	; 0x05
 620:	f6 81       	ldd	r31, Z+6	; 0x06
 622:	e0 2d       	mov	r30, r0
 624:	06 80       	ldd	r0, Z+6	; 0x06
 626:	f7 81       	ldd	r31, Z+7	; 0x07
 628:	e0 2d       	mov	r30, r0
 62a:	82 81       	ldd	r24, Z+2	; 0x02
 62c:	93 81       	ldd	r25, Z+3	; 0x03
 62e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 632:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 636:	08 95       	ret

00000638 <prvIdleTask>:
 638:	cf e3       	ldi	r28, 0x3F	; 63
 63a:	d1 e0       	ldi	r29, 0x01	; 1
 63c:	88 81       	ld	r24, Y
 63e:	82 30       	cpi	r24, 0x02	; 2
 640:	e8 f3       	brcs	.-6      	; 0x63c <prvIdleTask+0x4>
 642:	0e 94 45 02 	call	0x48a	; 0x48a <vPortYield>
 646:	fa cf       	rjmp	.-12     	; 0x63c <prvIdleTask+0x4>

00000648 <xTaskCreate>:
 648:	4f 92       	push	r4
 64a:	5f 92       	push	r5
 64c:	6f 92       	push	r6
 64e:	7f 92       	push	r7
 650:	8f 92       	push	r8
 652:	9f 92       	push	r9
 654:	af 92       	push	r10
 656:	bf 92       	push	r11
 658:	cf 92       	push	r12
 65a:	df 92       	push	r13
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	4c 01       	movw	r8, r24
 668:	6b 01       	movw	r12, r22
 66a:	5a 01       	movw	r10, r20
 66c:	29 01       	movw	r4, r18
 66e:	ca 01       	movw	r24, r20
 670:	0e 94 27 01 	call	0x24e	; 0x24e <pvPortMalloc>
 674:	3c 01       	movw	r6, r24
 676:	89 2b       	or	r24, r25
 678:	09 f4       	brne	.+2      	; 0x67c <xTaskCreate+0x34>
 67a:	f4 c0       	rjmp	.+488    	; 0x864 <xTaskCreate+0x21c>
 67c:	8c e2       	ldi	r24, 0x2C	; 44
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 27 01 	call	0x24e	; 0x24e <pvPortMalloc>
 684:	ec 01       	movw	r28, r24
 686:	89 2b       	or	r24, r25
 688:	c1 f0       	breq	.+48     	; 0x6ba <xTaskCreate+0x72>
 68a:	78 8e       	std	Y+24, r7	; 0x18
 68c:	6f 8a       	std	Y+23, r6	; 0x17
 68e:	a5 01       	movw	r20, r10
 690:	65 ea       	ldi	r22, 0xA5	; 165
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	c3 01       	movw	r24, r6
 696:	0e 94 90 07 	call	0xf20	; 0xf20 <memset>
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	a8 1a       	sub	r10, r24
 69e:	b1 08       	sbc	r11, r1
 6a0:	8f 89       	ldd	r24, Y+23	; 0x17
 6a2:	98 8d       	ldd	r25, Y+24	; 0x18
 6a4:	a8 0e       	add	r10, r24
 6a6:	b9 1e       	adc	r11, r25
 6a8:	bc a2       	std	Y+36, r11	; 0x24
 6aa:	ab a2       	std	Y+35, r10	; 0x23
 6ac:	d6 01       	movw	r26, r12
 6ae:	8c 91       	ld	r24, X
 6b0:	89 8f       	std	Y+25, r24	; 0x19
 6b2:	8c 91       	ld	r24, X
 6b4:	81 11       	cpse	r24, r1
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <xTaskCreate+0x7a>
 6b8:	18 c0       	rjmp	.+48     	; 0x6ea <xTaskCreate+0xa2>
 6ba:	c3 01       	movw	r24, r6
 6bc:	0e 94 36 01 	call	0x26c	; 0x26c <vPortFree>
 6c0:	d1 c0       	rjmp	.+418    	; 0x864 <xTaskCreate+0x21c>
 6c2:	ae 01       	movw	r20, r28
 6c4:	46 5e       	subi	r20, 0xE6	; 230
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	f6 01       	movw	r30, r12
 6ca:	31 96       	adiw	r30, 0x01	; 1
 6cc:	b8 e0       	ldi	r27, 0x08	; 8
 6ce:	cb 0e       	add	r12, r27
 6d0:	d1 1c       	adc	r13, r1
 6d2:	cf 01       	movw	r24, r30
 6d4:	21 91       	ld	r18, Z+
 6d6:	da 01       	movw	r26, r20
 6d8:	2d 93       	st	X+, r18
 6da:	ad 01       	movw	r20, r26
 6dc:	dc 01       	movw	r26, r24
 6de:	8c 91       	ld	r24, X
 6e0:	88 23       	and	r24, r24
 6e2:	19 f0       	breq	.+6      	; 0x6ea <xTaskCreate+0xa2>
 6e4:	ec 15       	cp	r30, r12
 6e6:	fd 05       	cpc	r31, r13
 6e8:	a1 f7       	brne	.-24     	; 0x6d2 <xTaskCreate+0x8a>
 6ea:	18 a2       	std	Y+32, r1	; 0x20
 6ec:	04 30       	cpi	r16, 0x04	; 4
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <xTaskCreate+0xaa>
 6f0:	03 e0       	ldi	r16, 0x03	; 3
 6f2:	0e 8b       	std	Y+22, r16	; 0x16
 6f4:	0d a3       	std	Y+37, r16	; 0x25
 6f6:	1e a2       	std	Y+38, r1	; 0x26
 6f8:	6e 01       	movw	r12, r28
 6fa:	b2 e0       	ldi	r27, 0x02	; 2
 6fc:	cb 0e       	add	r12, r27
 6fe:	d1 1c       	adc	r13, r1
 700:	c6 01       	movw	r24, r12
 702:	0e 94 53 01 	call	0x2a6	; 0x2a6 <vListInitialiseItem>
 706:	ce 01       	movw	r24, r28
 708:	0c 96       	adiw	r24, 0x0c	; 12
 70a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <vListInitialiseItem>
 70e:	d9 87       	std	Y+9, r29	; 0x09
 710:	c8 87       	std	Y+8, r28	; 0x08
 712:	84 e0       	ldi	r24, 0x04	; 4
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	80 1b       	sub	r24, r16
 718:	91 09       	sbc	r25, r1
 71a:	9d 87       	std	Y+13, r25	; 0x0d
 71c:	8c 87       	std	Y+12, r24	; 0x0c
 71e:	db 8b       	std	Y+19, r29	; 0x13
 720:	ca 8b       	std	Y+18, r28	; 0x12
 722:	1f a2       	std	Y+39, r1	; 0x27
 724:	18 a6       	std	Y+40, r1	; 0x28
 726:	19 a6       	std	Y+41, r1	; 0x29
 728:	1a a6       	std	Y+42, r1	; 0x2a
 72a:	1b a6       	std	Y+43, r1	; 0x2b
 72c:	a2 01       	movw	r20, r4
 72e:	b4 01       	movw	r22, r8
 730:	c5 01       	movw	r24, r10
 732:	0e 94 9f 01 	call	0x33e	; 0x33e <pxPortInitialiseStack>
 736:	99 83       	std	Y+1, r25	; 0x01
 738:	88 83       	st	Y, r24
 73a:	e1 14       	cp	r14, r1
 73c:	f1 04       	cpc	r15, r1
 73e:	19 f0       	breq	.+6      	; 0x746 <xTaskCreate+0xfe>
 740:	f7 01       	movw	r30, r14
 742:	d1 83       	std	Z+1, r29	; 0x01
 744:	c0 83       	st	Z, r28
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	0f 92       	push	r0
 74c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <uxCurrentNumberOfTasks>
 756:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <pxCurrentTCB>
 75a:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 75e:	89 2b       	or	r24, r25
 760:	89 f5       	brne	.+98     	; 0x7c4 <xTaskCreate+0x17c>
 762:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 766:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 76a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	c9 f5       	brne	.+114    	; 0x7e4 <xTaskCreate+0x19c>
 772:	8f e3       	ldi	r24, 0x3F	; 63
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 77a:	88 e4       	ldi	r24, 0x48	; 72
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 782:	81 e5       	ldi	r24, 0x51	; 81
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 78a:	8a e5       	ldi	r24, 0x5A	; 90
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 792:	86 e3       	ldi	r24, 0x36	; 54
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 79a:	8d e2       	ldi	r24, 0x2D	; 45
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	91 e0       	ldi	r25, 0x01	; 1
 7a6:	0e 94 45 01 	call	0x28a	; 0x28a <vListInitialise>
 7aa:	86 e3       	ldi	r24, 0x36	; 54
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <pxDelayedTaskList+0x1>
 7b2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <pxDelayedTaskList>
 7b6:	8d e2       	ldi	r24, 0x2D	; 45
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 7be:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 7c2:	10 c0       	rjmp	.+32     	; 0x7e4 <xTaskCreate+0x19c>
 7c4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 7c8:	81 11       	cpse	r24, r1
 7ca:	0c c0       	rjmp	.+24     	; 0x7e4 <xTaskCreate+0x19c>
 7cc:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 7d0:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 7d4:	96 89       	ldd	r25, Z+22	; 0x16
 7d6:	8e 89       	ldd	r24, Y+22	; 0x16
 7d8:	89 17       	cp	r24, r25
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <xTaskCreate+0x19c>
 7dc:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <pxCurrentTCB+0x1>
 7e0:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <pxCurrentTCB>
 7e4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uxTaskNumber>
 7e8:	8f 5f       	subi	r24, 0xFF	; 255
 7ea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uxTaskNumber>
 7ee:	e0 90 63 01 	lds	r14, 0x0163	; 0x800163 <pxCurrentTCB>
 7f2:	f0 90 64 01 	lds	r15, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 7f6:	6b a1       	ldd	r22, Y+35	; 0x23
 7f8:	7c a1       	ldd	r23, Y+36	; 0x24
 7fa:	88 81       	ld	r24, Y
 7fc:	99 81       	ldd	r25, Y+1	; 0x01
 7fe:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 802:	d7 01       	movw	r26, r14
 804:	92 96       	adiw	r26, 0x22	; 34
 806:	9c 93       	st	X, r25
 808:	8e 93       	st	-X, r24
 80a:	91 97       	sbiw	r26, 0x21	; 33
 80c:	8e 89       	ldd	r24, Y+22	; 0x16
 80e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 812:	98 17       	cp	r25, r24
 814:	10 f4       	brcc	.+4      	; 0x81a <xTaskCreate+0x1d2>
 816:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	9c 01       	movw	r18, r24
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	22 0f       	add	r18, r18
 828:	33 1f       	adc	r19, r19
 82a:	82 0f       	add	r24, r18
 82c:	93 1f       	adc	r25, r19
 82e:	b6 01       	movw	r22, r12
 830:	81 5c       	subi	r24, 0xC1	; 193
 832:	9e 4f       	sbci	r25, 0xFE	; 254
 834:	0e 94 57 01 	call	0x2ae	; 0x2ae <vListInsertEnd>
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <xSchedulerRunning>
 840:	88 23       	and	r24, r24
 842:	61 f0       	breq	.+24     	; 0x85c <xTaskCreate+0x214>
 844:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 848:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 84c:	96 89       	ldd	r25, Z+22	; 0x16
 84e:	8e 89       	ldd	r24, Y+22	; 0x16
 850:	98 17       	cp	r25, r24
 852:	30 f4       	brcc	.+12     	; 0x860 <xTaskCreate+0x218>
 854:	0e 94 45 02 	call	0x48a	; 0x48a <vPortYield>
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	05 c0       	rjmp	.+10     	; 0x866 <xTaskCreate+0x21e>
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	03 c0       	rjmp	.+6      	; 0x866 <xTaskCreate+0x21e>
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	01 c0       	rjmp	.+2      	; 0x866 <xTaskCreate+0x21e>
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	df 90       	pop	r13
 872:	cf 90       	pop	r12
 874:	bf 90       	pop	r11
 876:	af 90       	pop	r10
 878:	9f 90       	pop	r9
 87a:	8f 90       	pop	r8
 87c:	7f 90       	pop	r7
 87e:	6f 90       	pop	r6
 880:	5f 90       	pop	r5
 882:	4f 90       	pop	r4
 884:	08 95       	ret

00000886 <vTaskStartScheduler>:
 886:	ef 92       	push	r14
 888:	ff 92       	push	r15
 88a:	0f 93       	push	r16
 88c:	0f 2e       	mov	r0, r31
 88e:	f3 e1       	ldi	r31, 0x13	; 19
 890:	ef 2e       	mov	r14, r31
 892:	f1 e0       	ldi	r31, 0x01	; 1
 894:	ff 2e       	mov	r15, r31
 896:	f0 2d       	mov	r31, r0
 898:	00 e0       	ldi	r16, 0x00	; 0
 89a:	20 e0       	ldi	r18, 0x00	; 0
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	44 e6       	ldi	r20, 0x64	; 100
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	66 e0       	ldi	r22, 0x06	; 6
 8a4:	71 e0       	ldi	r23, 0x01	; 1
 8a6:	8c e1       	ldi	r24, 0x1C	; 28
 8a8:	93 e0       	ldi	r25, 0x03	; 3
 8aa:	0e 94 24 03 	call	0x648	; 0x648 <xTaskCreate>
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	81 f4       	brne	.+32     	; 0x8d2 <vTaskStartScheduler+0x4c>
 8b2:	f8 94       	cli
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 8bc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <xSchedulerRunning>
 8c6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <xTickCount+0x1>
 8ca:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <xTickCount>
 8ce:	0e 94 0b 02 	call	0x416	; 0x416 <xPortStartScheduler>
 8d2:	0f 91       	pop	r16
 8d4:	ff 90       	pop	r15
 8d6:	ef 90       	pop	r14
 8d8:	08 95       	ret

000008da <vTaskSuspendAll>:
 8da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 8de:	8f 5f       	subi	r24, 0xFF	; 255
 8e0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 8e4:	08 95       	ret

000008e6 <xTaskIncrementTick>:
 8e6:	cf 92       	push	r12
 8e8:	df 92       	push	r13
 8ea:	ef 92       	push	r14
 8ec:	ff 92       	push	r15
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 8fa:	81 11       	cpse	r24, r1
 8fc:	99 c0       	rjmp	.+306    	; 0xa30 <__stack+0x131>
 8fe:	e0 90 1d 01 	lds	r14, 0x011D	; 0x80011d <xTickCount>
 902:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <xTickCount+0x1>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	e8 1a       	sub	r14, r24
 90a:	f8 0a       	sbc	r15, r24
 90c:	f0 92 1e 01 	sts	0x011E, r15	; 0x80011e <xTickCount+0x1>
 910:	e0 92 1d 01 	sts	0x011D, r14	; 0x80011d <xTickCount>
 914:	e1 14       	cp	r14, r1
 916:	f1 04       	cpc	r15, r1
 918:	b9 f4       	brne	.+46     	; 0x948 <__stack+0x49>
 91a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <pxDelayedTaskList>
 91e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 922:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxOverflowDelayedTaskList>
 926:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 92a:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <pxDelayedTaskList+0x1>
 92e:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <pxDelayedTaskList>
 932:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pxOverflowDelayedTaskList+0x1>
 936:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pxOverflowDelayedTaskList>
 93a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xNumOfOverflows>
 93e:	8f 5f       	subi	r24, 0xFF	; 255
 940:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xNumOfOverflows>
 944:	0e 94 fd 02 	call	0x5fa	; 0x5fa <prvResetNextTaskUnblockTime>
 948:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <xNextTaskUnblockTime>
 94c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <xNextTaskUnblockTime+0x1>
 950:	e8 16       	cp	r14, r24
 952:	f9 06       	cpc	r15, r25
 954:	10 f4       	brcc	.+4      	; 0x95a <__stack+0x5b>
 956:	d1 2c       	mov	r13, r1
 958:	53 c0       	rjmp	.+166    	; 0xa00 <__stack+0x101>
 95a:	d1 2c       	mov	r13, r1
 95c:	cc 24       	eor	r12, r12
 95e:	c3 94       	inc	r12
 960:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 964:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 968:	80 81       	ld	r24, Z
 96a:	81 11       	cpse	r24, r1
 96c:	07 c0       	rjmp	.+14     	; 0x97c <__stack+0x7d>
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 976:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 97a:	42 c0       	rjmp	.+132    	; 0xa00 <__stack+0x101>
 97c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <pxDelayedTaskList>
 980:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <pxDelayedTaskList+0x1>
 984:	05 80       	ldd	r0, Z+5	; 0x05
 986:	f6 81       	ldd	r31, Z+6	; 0x06
 988:	e0 2d       	mov	r30, r0
 98a:	c6 81       	ldd	r28, Z+6	; 0x06
 98c:	d7 81       	ldd	r29, Z+7	; 0x07
 98e:	8a 81       	ldd	r24, Y+2	; 0x02
 990:	9b 81       	ldd	r25, Y+3	; 0x03
 992:	e8 16       	cp	r14, r24
 994:	f9 06       	cpc	r15, r25
 996:	28 f4       	brcc	.+10     	; 0x9a2 <__stack+0xa3>
 998:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <xNextTaskUnblockTime+0x1>
 99c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <xNextTaskUnblockTime>
 9a0:	2f c0       	rjmp	.+94     	; 0xa00 <__stack+0x101>
 9a2:	8e 01       	movw	r16, r28
 9a4:	0e 5f       	subi	r16, 0xFE	; 254
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	c8 01       	movw	r24, r16
 9aa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uxListRemove>
 9ae:	8c 89       	ldd	r24, Y+20	; 0x14
 9b0:	9d 89       	ldd	r25, Y+21	; 0x15
 9b2:	89 2b       	or	r24, r25
 9b4:	21 f0       	breq	.+8      	; 0x9be <__stack+0xbf>
 9b6:	ce 01       	movw	r24, r28
 9b8:	0c 96       	adiw	r24, 0x0c	; 12
 9ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uxListRemove>
 9be:	8e 89       	ldd	r24, Y+22	; 0x16
 9c0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 9c4:	98 17       	cp	r25, r24
 9c6:	10 f4       	brcc	.+4      	; 0x9cc <__stack+0xcd>
 9c8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	9c 01       	movw	r18, r24
 9d0:	22 0f       	add	r18, r18
 9d2:	33 1f       	adc	r19, r19
 9d4:	22 0f       	add	r18, r18
 9d6:	33 1f       	adc	r19, r19
 9d8:	22 0f       	add	r18, r18
 9da:	33 1f       	adc	r19, r19
 9dc:	82 0f       	add	r24, r18
 9de:	93 1f       	adc	r25, r19
 9e0:	b8 01       	movw	r22, r16
 9e2:	81 5c       	subi	r24, 0xC1	; 193
 9e4:	9e 4f       	sbci	r25, 0xFE	; 254
 9e6:	0e 94 57 01 	call	0x2ae	; 0x2ae <vListInsertEnd>
 9ea:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 9ee:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 9f2:	9e 89       	ldd	r25, Y+22	; 0x16
 9f4:	86 89       	ldd	r24, Z+22	; 0x16
 9f6:	98 17       	cp	r25, r24
 9f8:	08 f4       	brcc	.+2      	; 0x9fc <__stack+0xfd>
 9fa:	b2 cf       	rjmp	.-156    	; 0x960 <__stack+0x61>
 9fc:	dc 2c       	mov	r13, r12
 9fe:	b0 cf       	rjmp	.-160    	; 0x960 <__stack+0x61>
 a00:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 a04:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 a08:	86 89       	ldd	r24, Z+22	; 0x16
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	fc 01       	movw	r30, r24
 a0e:	ee 0f       	add	r30, r30
 a10:	ff 1f       	adc	r31, r31
 a12:	ee 0f       	add	r30, r30
 a14:	ff 1f       	adc	r31, r31
 a16:	ee 0f       	add	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	8e 0f       	add	r24, r30
 a1c:	9f 1f       	adc	r25, r31
 a1e:	fc 01       	movw	r30, r24
 a20:	e1 5c       	subi	r30, 0xC1	; 193
 a22:	fe 4f       	sbci	r31, 0xFE	; 254
 a24:	80 81       	ld	r24, Z
 a26:	82 30       	cpi	r24, 0x02	; 2
 a28:	48 f0       	brcs	.+18     	; 0xa3c <__stack+0x13d>
 a2a:	dd 24       	eor	r13, r13
 a2c:	d3 94       	inc	r13
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <__stack+0x13d>
 a30:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uxPendedTicks>
 a34:	8f 5f       	subi	r24, 0xFF	; 255
 a36:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uxPendedTicks>
 a3a:	d1 2c       	mov	r13, r1
 a3c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 a40:	88 23       	and	r24, r24
 a42:	11 f0       	breq	.+4      	; 0xa48 <__stack+0x149>
 a44:	dd 24       	eor	r13, r13
 a46:	d3 94       	inc	r13
 a48:	8d 2d       	mov	r24, r13
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	1f 91       	pop	r17
 a50:	0f 91       	pop	r16
 a52:	ff 90       	pop	r15
 a54:	ef 90       	pop	r14
 a56:	df 90       	pop	r13
 a58:	cf 90       	pop	r12
 a5a:	08 95       	ret

00000a5c <xTaskResumeAll>:
 a5c:	df 92       	push	r13
 a5e:	ef 92       	push	r14
 a60:	ff 92       	push	r15
 a62:	0f 93       	push	r16
 a64:	1f 93       	push	r17
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	f8 94       	cli
 a6e:	0f 92       	push	r0
 a70:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a74:	81 50       	subi	r24, 0x01	; 1
 a76:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 a7a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 a7e:	81 11       	cpse	r24, r1
 a80:	5f c0       	rjmp	.+190    	; 0xb40 <xTaskResumeAll+0xe4>
 a82:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <uxCurrentNumberOfTasks>
 a86:	81 11       	cpse	r24, r1
 a88:	33 c0       	rjmp	.+102    	; 0xaf0 <xTaskResumeAll+0x94>
 a8a:	5d c0       	rjmp	.+186    	; 0xb46 <xTaskResumeAll+0xea>
 a8c:	d7 01       	movw	r26, r14
 a8e:	15 96       	adiw	r26, 0x05	; 5
 a90:	ed 91       	ld	r30, X+
 a92:	fc 91       	ld	r31, X
 a94:	16 97       	sbiw	r26, 0x06	; 6
 a96:	c6 81       	ldd	r28, Z+6	; 0x06
 a98:	d7 81       	ldd	r29, Z+7	; 0x07
 a9a:	ce 01       	movw	r24, r28
 a9c:	0c 96       	adiw	r24, 0x0c	; 12
 a9e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uxListRemove>
 aa2:	8e 01       	movw	r16, r28
 aa4:	0e 5f       	subi	r16, 0xFE	; 254
 aa6:	1f 4f       	sbci	r17, 0xFF	; 255
 aa8:	c8 01       	movw	r24, r16
 aaa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <uxListRemove>
 aae:	8e 89       	ldd	r24, Y+22	; 0x16
 ab0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <uxTopReadyPriority>
 ab4:	98 17       	cp	r25, r24
 ab6:	10 f4       	brcc	.+4      	; 0xabc <xTaskResumeAll+0x60>
 ab8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <uxTopReadyPriority>
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	9c 01       	movw	r18, r24
 ac0:	22 0f       	add	r18, r18
 ac2:	33 1f       	adc	r19, r19
 ac4:	22 0f       	add	r18, r18
 ac6:	33 1f       	adc	r19, r19
 ac8:	22 0f       	add	r18, r18
 aca:	33 1f       	adc	r19, r19
 acc:	82 0f       	add	r24, r18
 ace:	93 1f       	adc	r25, r19
 ad0:	b8 01       	movw	r22, r16
 ad2:	81 5c       	subi	r24, 0xC1	; 193
 ad4:	9e 4f       	sbci	r25, 0xFE	; 254
 ad6:	0e 94 57 01 	call	0x2ae	; 0x2ae <vListInsertEnd>
 ada:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 ade:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 ae2:	9e 89       	ldd	r25, Y+22	; 0x16
 ae4:	86 89       	ldd	r24, Z+22	; 0x16
 ae6:	98 17       	cp	r25, r24
 ae8:	68 f0       	brcs	.+26     	; 0xb04 <xTaskResumeAll+0xa8>
 aea:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <xYieldPending>
 aee:	0a c0       	rjmp	.+20     	; 0xb04 <xTaskResumeAll+0xa8>
 af0:	c0 e0       	ldi	r28, 0x00	; 0
 af2:	d0 e0       	ldi	r29, 0x00	; 0
 af4:	0f 2e       	mov	r0, r31
 af6:	f0 e2       	ldi	r31, 0x20	; 32
 af8:	ef 2e       	mov	r14, r31
 afa:	f1 e0       	ldi	r31, 0x01	; 1
 afc:	ff 2e       	mov	r15, r31
 afe:	f0 2d       	mov	r31, r0
 b00:	dd 24       	eor	r13, r13
 b02:	d3 94       	inc	r13
 b04:	f7 01       	movw	r30, r14
 b06:	80 81       	ld	r24, Z
 b08:	81 11       	cpse	r24, r1
 b0a:	c0 cf       	rjmp	.-128    	; 0xa8c <xTaskResumeAll+0x30>
 b0c:	cd 2b       	or	r28, r29
 b0e:	11 f0       	breq	.+4      	; 0xb14 <xTaskResumeAll+0xb8>
 b10:	0e 94 fd 02 	call	0x5fa	; 0x5fa <prvResetNextTaskUnblockTime>
 b14:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <uxPendedTicks>
 b18:	cc 23       	and	r28, r28
 b1a:	51 f0       	breq	.+20     	; 0xb30 <xTaskResumeAll+0xd4>
 b1c:	d1 e0       	ldi	r29, 0x01	; 1
 b1e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <xTaskIncrementTick>
 b22:	81 11       	cpse	r24, r1
 b24:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <xYieldPending>
 b28:	c1 50       	subi	r28, 0x01	; 1
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <xTaskResumeAll+0xc2>
 b2c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uxPendedTicks>
 b30:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <xYieldPending>
 b34:	88 23       	and	r24, r24
 b36:	31 f0       	breq	.+12     	; 0xb44 <xTaskResumeAll+0xe8>
 b38:	0e 94 45 02 	call	0x48a	; 0x48a <vPortYield>
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <xTaskResumeAll+0xea>
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <xTaskResumeAll+0xea>
 b44:	80 e0       	ldi	r24, 0x00	; 0
 b46:	0f 90       	pop	r0
 b48:	0f be       	out	0x3f, r0	; 63
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	ff 90       	pop	r15
 b54:	ef 90       	pop	r14
 b56:	df 90       	pop	r13
 b58:	08 95       	ret

00000b5a <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b5e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 b62:	88 23       	and	r24, r24
 b64:	21 f0       	breq	.+8      	; 0xb6e <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <xYieldPending>
 b6c:	8e c0       	rjmp	.+284    	; 0xc8a <vTaskSwitchContext+0x130>
	}
	else
	{
		xYieldPending = pdFALSE;
 b6e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <xYieldPending>
		traceTASK_SWITCHED_OUT();
 b72:	c0 91 63 01 	lds	r28, 0x0163	; 0x800163 <pxCurrentTCB>
 b76:	d0 91 64 01 	lds	r29, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b7a:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 b7e:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b82:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 b86:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 b8a:	93 96       	adiw	r26, 0x23	; 35
 b8c:	6d 91       	ld	r22, X+
 b8e:	7c 91       	ld	r23, X
 b90:	94 97       	sbiw	r26, 0x24	; 36
 b92:	80 81       	ld	r24, Z
 b94:	91 81       	ldd	r25, Z+1	; 0x01
 b96:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 b9a:	9a a3       	std	Y+34, r25	; 0x22
 b9c:	89 a3       	std	Y+33, r24	; 0x21
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		
		taskSELECT_HIGHEST_PRIORITY_TASK();
 b9e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <uxTopReadyPriority>
 ba2:	82 2f       	mov	r24, r18
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	fc 01       	movw	r30, r24
 ba8:	ee 0f       	add	r30, r30
 baa:	ff 1f       	adc	r31, r31
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	e8 0f       	add	r30, r24
 bb6:	f9 1f       	adc	r31, r25
 bb8:	e1 5c       	subi	r30, 0xC1	; 193
 bba:	fe 4f       	sbci	r31, 0xFE	; 254
 bbc:	30 81       	ld	r19, Z
 bbe:	31 11       	cpse	r19, r1
 bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <vTaskSwitchContext+0x8a>
 bc2:	21 50       	subi	r18, 0x01	; 1
 bc4:	82 2f       	mov	r24, r18
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	fc 01       	movw	r30, r24
 bca:	ee 0f       	add	r30, r30
 bcc:	ff 1f       	adc	r31, r31
 bce:	ee 0f       	add	r30, r30
 bd0:	ff 1f       	adc	r31, r31
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	e8 0f       	add	r30, r24
 bd8:	f9 1f       	adc	r31, r25
 bda:	e1 5c       	subi	r30, 0xC1	; 193
 bdc:	fe 4f       	sbci	r31, 0xFE	; 254
 bde:	30 81       	ld	r19, Z
 be0:	33 23       	and	r19, r19
 be2:	79 f3       	breq	.-34     	; 0xbc2 <vTaskSwitchContext+0x68>
 be4:	ac 01       	movw	r20, r24
 be6:	44 0f       	add	r20, r20
 be8:	55 1f       	adc	r21, r21
 bea:	44 0f       	add	r20, r20
 bec:	55 1f       	adc	r21, r21
 bee:	44 0f       	add	r20, r20
 bf0:	55 1f       	adc	r21, r21
 bf2:	48 0f       	add	r20, r24
 bf4:	59 1f       	adc	r21, r25
 bf6:	da 01       	movw	r26, r20
 bf8:	a1 5c       	subi	r26, 0xC1	; 193
 bfa:	be 4f       	sbci	r27, 0xFE	; 254
 bfc:	11 96       	adiw	r26, 0x01	; 1
 bfe:	ed 91       	ld	r30, X+
 c00:	fc 91       	ld	r31, X
 c02:	12 97       	sbiw	r26, 0x02	; 2
 c04:	02 80       	ldd	r0, Z+2	; 0x02
 c06:	f3 81       	ldd	r31, Z+3	; 0x03
 c08:	e0 2d       	mov	r30, r0
 c0a:	12 96       	adiw	r26, 0x02	; 2
 c0c:	fc 93       	st	X, r31
 c0e:	ee 93       	st	-X, r30
 c10:	11 97       	sbiw	r26, 0x01	; 1
 c12:	4e 5b       	subi	r20, 0xBE	; 190
 c14:	5e 4f       	sbci	r21, 0xFE	; 254
 c16:	e4 17       	cp	r30, r20
 c18:	f5 07       	cpc	r31, r21
 c1a:	29 f4       	brne	.+10     	; 0xc26 <vTaskSwitchContext+0xcc>
 c1c:	42 81       	ldd	r20, Z+2	; 0x02
 c1e:	53 81       	ldd	r21, Z+3	; 0x03
 c20:	fd 01       	movw	r30, r26
 c22:	52 83       	std	Z+2, r21	; 0x02
 c24:	41 83       	std	Z+1, r20	; 0x01
 c26:	fc 01       	movw	r30, r24
 c28:	ee 0f       	add	r30, r30
 c2a:	ff 1f       	adc	r31, r31
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	ee 0f       	add	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	8e 0f       	add	r24, r30
 c36:	9f 1f       	adc	r25, r31
 c38:	fc 01       	movw	r30, r24
 c3a:	e1 5c       	subi	r30, 0xC1	; 193
 c3c:	fe 4f       	sbci	r31, 0xFE	; 254
 c3e:	01 80       	ldd	r0, Z+1	; 0x01
 c40:	f2 81       	ldd	r31, Z+2	; 0x02
 c42:	e0 2d       	mov	r30, r0
 c44:	86 81       	ldd	r24, Z+6	; 0x06
 c46:	97 81       	ldd	r25, Z+7	; 0x07
 c48:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <pxCurrentTCB+0x1>
 c4c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <pxCurrentTCB>
 c50:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <uxTopReadyPriority>

		traceTASK_SWITCHED_IN();
 c54:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 c58:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c5c:	c1 a1       	ldd	r28, Z+33	; 0x21
 c5e:	d2 a1       	ldd	r29, Z+34	; 0x22
 c60:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <pxCurrentTCB>
 c64:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c68:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <pxCurrentTCB>
 c6c:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <pxCurrentTCB+0x1>
 c70:	93 96       	adiw	r26, 0x23	; 35
 c72:	6d 91       	ld	r22, X+
 c74:	7c 91       	ld	r23, X
 c76:	94 97       	sbiw	r26, 0x24	; 36
 c78:	80 81       	ld	r24, Z
 c7a:	91 81       	ldd	r25, Z+1	; 0x01
 c7c:	0e 94 53 00 	call	0xa6	; 0xa6 <uxChecksumGetTaskChecksum>
 c80:	c8 17       	cp	r28, r24
 c82:	d9 07       	cpc	r29, r25
 c84:	11 f4       	brne	.+4      	; 0xc8a <vTaskSwitchContext+0x130>
 c86:	0e 94 6e 06 	call	0xcdc	; 0xcdc <vApplicationTaskChecksumHook>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 c8a:	df 91       	pop	r29
 c8c:	cf 91       	pop	r28
 c8e:	08 95       	ret

00000c90 <_Z7task_txPv>:

#include <avr/io.h>
#include "util/delay.h"

void task_tx(void* p)
{
 c90:	ff cf       	rjmp	.-2      	; 0xc90 <_Z7task_txPv>

00000c92 <_Z7task_rxPv>:
	{
	}
}

void task_rx(void* p)
{	
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <_Z7task_rxPv>

00000c94 <main>:
volatile uint16_t globa;
uint16_t globa1;


int main(void)
{
 c94:	ef 92       	push	r14
 c96:	ff 92       	push	r15
 c98:	0f 93       	push	r16
	DDRB = 0xFF; //Nakes PORTC as Output
 c9a:	8f ef       	ldi	r24, 0xFF	; 255
 c9c:	84 b9       	out	0x04, r24	; 4
	xTaskCreate(task_tx, (const char*)"t1", 100, 0, 1, 0);
 c9e:	e1 2c       	mov	r14, r1
 ca0:	f1 2c       	mov	r15, r1
 ca2:	01 e0       	ldi	r16, 0x01	; 1
 ca4:	20 e0       	ldi	r18, 0x00	; 0
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	44 e6       	ldi	r20, 0x64	; 100
 caa:	50 e0       	ldi	r21, 0x00	; 0
 cac:	6b e0       	ldi	r22, 0x0B	; 11
 cae:	71 e0       	ldi	r23, 0x01	; 1
 cb0:	88 e4       	ldi	r24, 0x48	; 72
 cb2:	96 e0       	ldi	r25, 0x06	; 6
 cb4:	0e 94 24 03 	call	0x648	; 0x648 <xTaskCreate>
	xTaskCreate(task_rx, (const char*)"t2", 100, 0, 1, 0);
 cb8:	20 e0       	ldi	r18, 0x00	; 0
 cba:	30 e0       	ldi	r19, 0x00	; 0
 cbc:	44 e6       	ldi	r20, 0x64	; 100
 cbe:	50 e0       	ldi	r21, 0x00	; 0
 cc0:	6e e0       	ldi	r22, 0x0E	; 14
 cc2:	71 e0       	ldi	r23, 0x01	; 1
 cc4:	89 e4       	ldi	r24, 0x49	; 73
 cc6:	96 e0       	ldi	r25, 0x06	; 6
 cc8:	0e 94 24 03 	call	0x648	; 0x648 <xTaskCreate>
	vTaskStartScheduler();
 ccc:	0e 94 43 04 	call	0x886	; 0x886 <vTaskStartScheduler>
	
	return 0;
}
 cd0:	80 e0       	ldi	r24, 0x00	; 0
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	0f 91       	pop	r16
 cd6:	ff 90       	pop	r15
 cd8:	ef 90       	pop	r14
 cda:	08 95       	ret

00000cdc <vApplicationTaskChecksumHook>:

extern "C"{
	
	void vApplicationTaskChecksumHook( void ){ 
 cdc:	08 95       	ret

00000cde <malloc>:
 cde:	0f 93       	push	r16
 ce0:	1f 93       	push	r17
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	82 30       	cpi	r24, 0x02	; 2
 ce8:	91 05       	cpc	r25, r1
 cea:	10 f4       	brcc	.+4      	; 0xcf0 <malloc+0x12>
 cec:	82 e0       	ldi	r24, 0x02	; 2
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <__flp>
 cf4:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <__flp+0x1>
 cf8:	20 e0       	ldi	r18, 0x00	; 0
 cfa:	30 e0       	ldi	r19, 0x00	; 0
 cfc:	a0 e0       	ldi	r26, 0x00	; 0
 cfe:	b0 e0       	ldi	r27, 0x00	; 0
 d00:	30 97       	sbiw	r30, 0x00	; 0
 d02:	19 f1       	breq	.+70     	; 0xd4a <malloc+0x6c>
 d04:	40 81       	ld	r20, Z
 d06:	51 81       	ldd	r21, Z+1	; 0x01
 d08:	02 81       	ldd	r16, Z+2	; 0x02
 d0a:	13 81       	ldd	r17, Z+3	; 0x03
 d0c:	48 17       	cp	r20, r24
 d0e:	59 07       	cpc	r21, r25
 d10:	c8 f0       	brcs	.+50     	; 0xd44 <malloc+0x66>
 d12:	84 17       	cp	r24, r20
 d14:	95 07       	cpc	r25, r21
 d16:	69 f4       	brne	.+26     	; 0xd32 <malloc+0x54>
 d18:	10 97       	sbiw	r26, 0x00	; 0
 d1a:	31 f0       	breq	.+12     	; 0xd28 <malloc+0x4a>
 d1c:	12 96       	adiw	r26, 0x02	; 2
 d1e:	0c 93       	st	X, r16
 d20:	12 97       	sbiw	r26, 0x02	; 2
 d22:	13 96       	adiw	r26, 0x03	; 3
 d24:	1c 93       	st	X, r17
 d26:	27 c0       	rjmp	.+78     	; 0xd76 <malloc+0x98>
 d28:	00 93 67 01 	sts	0x0167, r16	; 0x800167 <__flp>
 d2c:	10 93 68 01 	sts	0x0168, r17	; 0x800168 <__flp+0x1>
 d30:	22 c0       	rjmp	.+68     	; 0xd76 <malloc+0x98>
 d32:	21 15       	cp	r18, r1
 d34:	31 05       	cpc	r19, r1
 d36:	19 f0       	breq	.+6      	; 0xd3e <malloc+0x60>
 d38:	42 17       	cp	r20, r18
 d3a:	53 07       	cpc	r21, r19
 d3c:	18 f4       	brcc	.+6      	; 0xd44 <malloc+0x66>
 d3e:	9a 01       	movw	r18, r20
 d40:	bd 01       	movw	r22, r26
 d42:	ef 01       	movw	r28, r30
 d44:	df 01       	movw	r26, r30
 d46:	f8 01       	movw	r30, r16
 d48:	db cf       	rjmp	.-74     	; 0xd00 <malloc+0x22>
 d4a:	21 15       	cp	r18, r1
 d4c:	31 05       	cpc	r19, r1
 d4e:	f9 f0       	breq	.+62     	; 0xd8e <malloc+0xb0>
 d50:	28 1b       	sub	r18, r24
 d52:	39 0b       	sbc	r19, r25
 d54:	24 30       	cpi	r18, 0x04	; 4
 d56:	31 05       	cpc	r19, r1
 d58:	80 f4       	brcc	.+32     	; 0xd7a <malloc+0x9c>
 d5a:	8a 81       	ldd	r24, Y+2	; 0x02
 d5c:	9b 81       	ldd	r25, Y+3	; 0x03
 d5e:	61 15       	cp	r22, r1
 d60:	71 05       	cpc	r23, r1
 d62:	21 f0       	breq	.+8      	; 0xd6c <malloc+0x8e>
 d64:	fb 01       	movw	r30, r22
 d66:	93 83       	std	Z+3, r25	; 0x03
 d68:	82 83       	std	Z+2, r24	; 0x02
 d6a:	04 c0       	rjmp	.+8      	; 0xd74 <malloc+0x96>
 d6c:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <__flp+0x1>
 d70:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <__flp>
 d74:	fe 01       	movw	r30, r28
 d76:	32 96       	adiw	r30, 0x02	; 2
 d78:	44 c0       	rjmp	.+136    	; 0xe02 <malloc+0x124>
 d7a:	fe 01       	movw	r30, r28
 d7c:	e2 0f       	add	r30, r18
 d7e:	f3 1f       	adc	r31, r19
 d80:	81 93       	st	Z+, r24
 d82:	91 93       	st	Z+, r25
 d84:	22 50       	subi	r18, 0x02	; 2
 d86:	31 09       	sbc	r19, r1
 d88:	39 83       	std	Y+1, r19	; 0x01
 d8a:	28 83       	st	Y, r18
 d8c:	3a c0       	rjmp	.+116    	; 0xe02 <malloc+0x124>
 d8e:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <__brkval>
 d92:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <__brkval+0x1>
 d96:	23 2b       	or	r18, r19
 d98:	41 f4       	brne	.+16     	; 0xdaa <malloc+0xcc>
 d9a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d9e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 da2:	30 93 66 01 	sts	0x0166, r19	; 0x800166 <__brkval+0x1>
 da6:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <__brkval>
 daa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 dae:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 db2:	21 15       	cp	r18, r1
 db4:	31 05       	cpc	r19, r1
 db6:	41 f4       	brne	.+16     	; 0xdc8 <malloc+0xea>
 db8:	2d b7       	in	r18, 0x3d	; 61
 dba:	3e b7       	in	r19, 0x3e	; 62
 dbc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 dc0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 dc4:	24 1b       	sub	r18, r20
 dc6:	35 0b       	sbc	r19, r21
 dc8:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <__brkval>
 dcc:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <__brkval+0x1>
 dd0:	e2 17       	cp	r30, r18
 dd2:	f3 07       	cpc	r31, r19
 dd4:	a0 f4       	brcc	.+40     	; 0xdfe <malloc+0x120>
 dd6:	2e 1b       	sub	r18, r30
 dd8:	3f 0b       	sbc	r19, r31
 dda:	28 17       	cp	r18, r24
 ddc:	39 07       	cpc	r19, r25
 dde:	78 f0       	brcs	.+30     	; 0xdfe <malloc+0x120>
 de0:	ac 01       	movw	r20, r24
 de2:	4e 5f       	subi	r20, 0xFE	; 254
 de4:	5f 4f       	sbci	r21, 0xFF	; 255
 de6:	24 17       	cp	r18, r20
 de8:	35 07       	cpc	r19, r21
 dea:	48 f0       	brcs	.+18     	; 0xdfe <malloc+0x120>
 dec:	4e 0f       	add	r20, r30
 dee:	5f 1f       	adc	r21, r31
 df0:	50 93 66 01 	sts	0x0166, r21	; 0x800166 <__brkval+0x1>
 df4:	40 93 65 01 	sts	0x0165, r20	; 0x800165 <__brkval>
 df8:	81 93       	st	Z+, r24
 dfa:	91 93       	st	Z+, r25
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <malloc+0x124>
 dfe:	e0 e0       	ldi	r30, 0x00	; 0
 e00:	f0 e0       	ldi	r31, 0x00	; 0
 e02:	cf 01       	movw	r24, r30
 e04:	df 91       	pop	r29
 e06:	cf 91       	pop	r28
 e08:	1f 91       	pop	r17
 e0a:	0f 91       	pop	r16
 e0c:	08 95       	ret

00000e0e <free>:
 e0e:	cf 93       	push	r28
 e10:	df 93       	push	r29
 e12:	00 97       	sbiw	r24, 0x00	; 0
 e14:	09 f4       	brne	.+2      	; 0xe18 <free+0xa>
 e16:	81 c0       	rjmp	.+258    	; 0xf1a <free+0x10c>
 e18:	fc 01       	movw	r30, r24
 e1a:	32 97       	sbiw	r30, 0x02	; 2
 e1c:	13 82       	std	Z+3, r1	; 0x03
 e1e:	12 82       	std	Z+2, r1	; 0x02
 e20:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <__flp>
 e24:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <__flp+0x1>
 e28:	10 97       	sbiw	r26, 0x00	; 0
 e2a:	81 f4       	brne	.+32     	; 0xe4c <free+0x3e>
 e2c:	20 81       	ld	r18, Z
 e2e:	31 81       	ldd	r19, Z+1	; 0x01
 e30:	82 0f       	add	r24, r18
 e32:	93 1f       	adc	r25, r19
 e34:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <__brkval>
 e38:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <__brkval+0x1>
 e3c:	28 17       	cp	r18, r24
 e3e:	39 07       	cpc	r19, r25
 e40:	51 f5       	brne	.+84     	; 0xe96 <free+0x88>
 e42:	f0 93 66 01 	sts	0x0166, r31	; 0x800166 <__brkval+0x1>
 e46:	e0 93 65 01 	sts	0x0165, r30	; 0x800165 <__brkval>
 e4a:	67 c0       	rjmp	.+206    	; 0xf1a <free+0x10c>
 e4c:	ed 01       	movw	r28, r26
 e4e:	20 e0       	ldi	r18, 0x00	; 0
 e50:	30 e0       	ldi	r19, 0x00	; 0
 e52:	ce 17       	cp	r28, r30
 e54:	df 07       	cpc	r29, r31
 e56:	40 f4       	brcc	.+16     	; 0xe68 <free+0x5a>
 e58:	4a 81       	ldd	r20, Y+2	; 0x02
 e5a:	5b 81       	ldd	r21, Y+3	; 0x03
 e5c:	9e 01       	movw	r18, r28
 e5e:	41 15       	cp	r20, r1
 e60:	51 05       	cpc	r21, r1
 e62:	f1 f0       	breq	.+60     	; 0xea0 <free+0x92>
 e64:	ea 01       	movw	r28, r20
 e66:	f5 cf       	rjmp	.-22     	; 0xe52 <free+0x44>
 e68:	d3 83       	std	Z+3, r29	; 0x03
 e6a:	c2 83       	std	Z+2, r28	; 0x02
 e6c:	40 81       	ld	r20, Z
 e6e:	51 81       	ldd	r21, Z+1	; 0x01
 e70:	84 0f       	add	r24, r20
 e72:	95 1f       	adc	r25, r21
 e74:	c8 17       	cp	r28, r24
 e76:	d9 07       	cpc	r29, r25
 e78:	59 f4       	brne	.+22     	; 0xe90 <free+0x82>
 e7a:	88 81       	ld	r24, Y
 e7c:	99 81       	ldd	r25, Y+1	; 0x01
 e7e:	84 0f       	add	r24, r20
 e80:	95 1f       	adc	r25, r21
 e82:	02 96       	adiw	r24, 0x02	; 2
 e84:	91 83       	std	Z+1, r25	; 0x01
 e86:	80 83       	st	Z, r24
 e88:	8a 81       	ldd	r24, Y+2	; 0x02
 e8a:	9b 81       	ldd	r25, Y+3	; 0x03
 e8c:	93 83       	std	Z+3, r25	; 0x03
 e8e:	82 83       	std	Z+2, r24	; 0x02
 e90:	21 15       	cp	r18, r1
 e92:	31 05       	cpc	r19, r1
 e94:	29 f4       	brne	.+10     	; 0xea0 <free+0x92>
 e96:	f0 93 68 01 	sts	0x0168, r31	; 0x800168 <__flp+0x1>
 e9a:	e0 93 67 01 	sts	0x0167, r30	; 0x800167 <__flp>
 e9e:	3d c0       	rjmp	.+122    	; 0xf1a <free+0x10c>
 ea0:	e9 01       	movw	r28, r18
 ea2:	fb 83       	std	Y+3, r31	; 0x03
 ea4:	ea 83       	std	Y+2, r30	; 0x02
 ea6:	49 91       	ld	r20, Y+
 ea8:	59 91       	ld	r21, Y+
 eaa:	c4 0f       	add	r28, r20
 eac:	d5 1f       	adc	r29, r21
 eae:	ec 17       	cp	r30, r28
 eb0:	fd 07       	cpc	r31, r29
 eb2:	61 f4       	brne	.+24     	; 0xecc <free+0xbe>
 eb4:	80 81       	ld	r24, Z
 eb6:	91 81       	ldd	r25, Z+1	; 0x01
 eb8:	84 0f       	add	r24, r20
 eba:	95 1f       	adc	r25, r21
 ebc:	02 96       	adiw	r24, 0x02	; 2
 ebe:	e9 01       	movw	r28, r18
 ec0:	99 83       	std	Y+1, r25	; 0x01
 ec2:	88 83       	st	Y, r24
 ec4:	82 81       	ldd	r24, Z+2	; 0x02
 ec6:	93 81       	ldd	r25, Z+3	; 0x03
 ec8:	9b 83       	std	Y+3, r25	; 0x03
 eca:	8a 83       	std	Y+2, r24	; 0x02
 ecc:	e0 e0       	ldi	r30, 0x00	; 0
 ece:	f0 e0       	ldi	r31, 0x00	; 0
 ed0:	12 96       	adiw	r26, 0x02	; 2
 ed2:	8d 91       	ld	r24, X+
 ed4:	9c 91       	ld	r25, X
 ed6:	13 97       	sbiw	r26, 0x03	; 3
 ed8:	00 97       	sbiw	r24, 0x00	; 0
 eda:	19 f0       	breq	.+6      	; 0xee2 <free+0xd4>
 edc:	fd 01       	movw	r30, r26
 ede:	dc 01       	movw	r26, r24
 ee0:	f7 cf       	rjmp	.-18     	; 0xed0 <free+0xc2>
 ee2:	8d 91       	ld	r24, X+
 ee4:	9c 91       	ld	r25, X
 ee6:	11 97       	sbiw	r26, 0x01	; 1
 ee8:	9d 01       	movw	r18, r26
 eea:	2e 5f       	subi	r18, 0xFE	; 254
 eec:	3f 4f       	sbci	r19, 0xFF	; 255
 eee:	82 0f       	add	r24, r18
 ef0:	93 1f       	adc	r25, r19
 ef2:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <__brkval>
 ef6:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <__brkval+0x1>
 efa:	28 17       	cp	r18, r24
 efc:	39 07       	cpc	r19, r25
 efe:	69 f4       	brne	.+26     	; 0xf1a <free+0x10c>
 f00:	30 97       	sbiw	r30, 0x00	; 0
 f02:	29 f4       	brne	.+10     	; 0xf0e <free+0x100>
 f04:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__flp+0x1>
 f08:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <__flp>
 f0c:	02 c0       	rjmp	.+4      	; 0xf12 <free+0x104>
 f0e:	13 82       	std	Z+3, r1	; 0x03
 f10:	12 82       	std	Z+2, r1	; 0x02
 f12:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <__brkval+0x1>
 f16:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <__brkval>
 f1a:	df 91       	pop	r29
 f1c:	cf 91       	pop	r28
 f1e:	08 95       	ret

00000f20 <memset>:
 f20:	dc 01       	movw	r26, r24
 f22:	01 c0       	rjmp	.+2      	; 0xf26 <memset+0x6>
 f24:	6d 93       	st	X+, r22
 f26:	41 50       	subi	r20, 0x01	; 1
 f28:	50 40       	sbci	r21, 0x00	; 0
 f2a:	e0 f7       	brcc	.-8      	; 0xf24 <memset+0x4>
 f2c:	08 95       	ret

00000f2e <_exit>:
 f2e:	f8 94       	cli

00000f30 <__stop_program>:
 f30:	ff cf       	rjmp	.-2      	; 0xf30 <__stop_program>
